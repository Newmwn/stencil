{
  "timestamp": "2024-07-11T17:50:52",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.19.2",
    "typescriptVersion": "5.4.5"
  },
  "components": [
    {
      "filePath": "src/components/components-library-core-test/components-library-core-test.tsx",
      "encapsulation": "shadow",
      "tag": "components-library-core-test",
      "readme": "# components-test\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/np-accordion/np-accordion.tsx",
      "encapsulation": "shadow",
      "tag": "np-accordion",
      "readme": "# np-accordion\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "items",
          "type": "AccordionItemModel[]",
          "complexType": {
            "original": "Array<AccordionItemModel>",
            "resolved": "AccordionItemModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "AccordionItemModel": {
                "location": "import",
                "path": "./models/np-accordion.model",
                "id": "src/components/np-accordion/models/np-accordion.model.ts::AccordionItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List of acordion items to the accordion",
          "docsTags": [
            {
              "name": "type",
              "text": "{AccordionItemModel[]}"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "AccordionItemModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the accordion item",
          "docsTags": [
            {
              "name": "type",
              "text": "{Size}"
            }
          ],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "AccordionItemZoomConfig",
          "complexType": {
            "original": "AccordionItemZoomConfig",
            "resolved": "AccordionItemZoomConfig",
            "references": {
              "AccordionItemZoomConfig": {
                "location": "import",
                "path": "../np-accordion-item/models/np-accordion-item.model",
                "id": "src/components/np-accordion-item/models/np-accordion-item.model.ts::AccordionItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define the component zoom configuration",
          "docsTags": [
            {
              "name": "type",
              "text": "{AccordionItemZoomConfig}"
            }
          ],
          "values": [
            {
              "type": "AccordionItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-accordion-item"
      ],
      "dependencyGraph": {
        "np-accordion": [
          "np-accordion-item"
        ],
        "np-accordion-item": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-accordion-item/np-accordion-item.tsx",
      "encapsulation": "none",
      "tag": "np-accordion-item",
      "readme": "# np-accordion-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accordionColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "accordioncolor",
          "reflectToAttr": false,
          "docs": "Accordion Color",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "backgroundColor",
          "type": "string",
          "complexType": {
            "original": "Color | string | null",
            "resolved": "string",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "backgroundcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_1",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Description label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "Header label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headericon",
          "reflectToAttr": false,
          "docs": "Header Icon",
          "docsTags": [],
          "default": "'icon_arrow'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideSubHeaderDescription",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidesubheaderdescription",
          "reflectToAttr": false,
          "docs": "To hide sub header and description when expanded",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isAccordionOpened",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "isaccordionopened",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Defines if the accordion its required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Defines accordion state",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateTooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statetooltip",
          "reflectToAttr": false,
          "docs": "Tooltip state",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subHeader",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "subheader",
          "reflectToAttr": false,
          "docs": "HubHeader label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "AccordionItemZoomConfig",
          "complexType": {
            "original": "AccordionItemZoomConfig",
            "resolved": "AccordionItemZoomConfig",
            "references": {
              "AccordionItemZoomConfig": {
                "location": "import",
                "path": "./models/np-accordion-item.model",
                "id": "src/components/np-accordion-item/models/np-accordion-item.model.ts::AccordionItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "AccordionItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "accordionClickedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emmited when accordion is clicked",
          "docsTags": []
        },
        {
          "event": "accordionClosedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emmited when accordion its closed",
          "docsTags": []
        },
        {
          "event": "accordionOpenedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emmited when accordion its opened",
          "docsTags": []
        },
        {
          "event": "isAccordionOpenedChangeEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emmited when accordion action change (Open or close)",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-accordion"
      ],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-accordion-item": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-accordion": [
          "np-accordion-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-accordion-list/np-accordion-list.tsx",
      "encapsulation": "shadow",
      "tag": "np-accordion-list",
      "readme": "# np-accordion-list\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "clickOnEnter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clickonenter",
          "reflectToAttr": false,
          "docs": "If enter on item should trigger click event",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerMultiple",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headermultiple",
          "reflectToAttr": false,
          "docs": "header label when elem has more than 1 children",
          "docsTags": [],
          "default": "'Vários elementos'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerSingle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headersingle",
          "reflectToAttr": false,
          "docs": "header label when elem has 1 children",
          "docsTags": [],
          "default": "'1 elemento'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideParent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hideparent",
          "reflectToAttr": false,
          "docs": "hide Parent",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "_items",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionChildren",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionchildren",
          "reflectToAttr": false,
          "docs": "option for item children",
          "docsTags": [],
          "default": "'children'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionid",
          "reflectToAttr": false,
          "docs": "option for Identification",
          "docsTags": [],
          "default": "'id'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "optionlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'label'",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionModeNpAccordionListType.Multiple | SelectionModeNpAccordionListType.Single | SelectionModeNpAccordionListType.Toggle",
          "complexType": {
            "original": "SelectionModeNpAccordionListType",
            "resolved": "SelectionModeNpAccordionListType.Multiple | SelectionModeNpAccordionListType.Single | SelectionModeNpAccordionListType.Toggle",
            "references": {
              "SelectionModeNpAccordionListType": {
                "location": "import",
                "path": "./models/np-accordion-list-type.enum",
                "id": "src/components/np-accordion-list/models/np-accordion-list-type.enum.ts::SelectionModeNpAccordionListType"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "selection Mode",
          "docsTags": [],
          "values": [
            {
              "type": "SelectionModeNpAccordionListType.Multiple"
            },
            {
              "type": "SelectionModeNpAccordionListType.Single"
            },
            {
              "type": "SelectionModeNpAccordionListType.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "This changes the components's font size, icon size and list item height",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "AccordionListZoomConfig",
          "complexType": {
            "original": "AccordionListZoomConfig",
            "resolved": "AccordionListZoomConfig",
            "references": {
              "AccordionListZoomConfig": {
                "location": "import",
                "path": "./models/np-accordion-list.model",
                "id": "src/components/np-accordion-list/models/np-accordion-list.model.ts::AccordionListZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "AccordionListZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "fatherClick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(element: any, scrollTo?: boolean, htmlElement?: any) => Promise<void>",
            "parameters": [
              {
                "name": "element",
                "type": "any",
                "docs": ""
              },
              {
                "name": "scrollTo",
                "type": "boolean",
                "docs": ""
              },
              {
                "name": "htmlElement",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "fatherClick(element: any, scrollTo?: boolean, htmlElement?: any) => Promise<void>",
          "parameters": [
            {
              "name": "element",
              "type": "any",
              "docs": ""
            },
            {
              "name": "scrollTo",
              "type": "boolean",
              "docs": ""
            },
            {
              "name": "htmlElement",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "childEnterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "enter click child",
          "docsTags": []
        },
        {
          "event": "childKeyboardKeyEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "child key press",
          "docsTags": []
        },
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "click on component",
          "docsTags": []
        },
        {
          "event": "fatherEnterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "enter click father",
          "docsTags": []
        },
        {
          "event": "fatherKeyboardKeyEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "father key press",
          "docsTags": []
        },
        {
          "event": "itemShiftTabKeyEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "item shift tab key press",
          "docsTags": []
        },
        {
          "event": "itemTabKeyEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "item tab key press",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-text",
        "np-virtual-scroller"
      ],
      "dependencyGraph": {
        "np-accordion-list": [
          "np-icon",
          "np-text",
          "np-virtual-scroller"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-action-bar/np-action-bar.tsx",
      "encapsulation": "shadow",
      "tag": "np-action-bar",
      "readme": "# nc-action-bar\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "actionBackgroundColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "actionbackgroundcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableHighlightButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablehighlightbutton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlightButtonString",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "highlightbuttonstring",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'New'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highlightIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "highlighticon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'icon_plus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "ActionBarOrientation.Bottom | ActionBarOrientation.Left | ActionBarOrientation.Right | ActionBarOrientation.Top",
          "complexType": {
            "original": "ActionBarOrientation",
            "resolved": "ActionBarOrientation.Bottom | ActionBarOrientation.Left | ActionBarOrientation.Right | ActionBarOrientation.Top",
            "references": {
              "ActionBarOrientation": {
                "location": "import",
                "path": "./models/np-action-bar.enum",
                "id": "src/components/np-action-bar/models/np-action-bar.enum.ts::ActionBarOrientation"
              }
            }
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "ActionBarOrientation.Left",
          "values": [
            {
              "type": "ActionBarOrientation.Bottom"
            },
            {
              "type": "ActionBarOrientation.Left"
            },
            {
              "type": "ActionBarOrientation.Right"
            },
            {
              "type": "ActionBarOrientation.Top"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showHighlightButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showhighlightbutton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "transparentActionBar",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "transparentactionbar",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoom-percentage-config",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "30",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "highlightButtonClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-tool-tip",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-action-bar": [
          "np-tool-tip",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-action-bar/np-action-bar-item/np-action-bar-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-action-bar-item",
      "readme": "# nc-action-bar-item\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "change",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "change",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconBottom",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "iconbottom",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_11",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconDisabledColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "icondisabledcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_7",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconHoverColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconhovercolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconLeft",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "iconleft",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPressedColor",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "iconpressedcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "18",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "iconsize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "16",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "imageSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "imagesrc",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "30",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "selectEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-tool-tip",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-action-bar-item": [
          "np-tool-tip",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-alert/np-alert.tsx",
      "encapsulation": "shadow",
      "tag": "np-alert",
      "readme": "# np-alert\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "destroyAfterClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "destroyafterclose",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inViewport",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inviewport",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "AlertZoomConfig",
          "complexType": {
            "original": "AlertZoomConfig",
            "resolved": "AlertZoomConfig",
            "references": {
              "AlertZoomConfig": {
                "location": "import",
                "path": "./models/np-alert.model",
                "id": "src/components/np-alert/models/np-alert.model.ts::AlertZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "AlertZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(data: ModalMessageModel) => Promise<void>",
            "parameters": [
              {
                "name": "data",
                "type": "ModalMessageModel",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ModalMessageModel": {
                "location": "import",
                "path": "./models/np-alert.model",
                "id": "src/components/np-alert/models/np-alert.model.ts::ModalMessageModel"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open(data: ModalMessageModel) => Promise<void>",
          "parameters": [
            {
              "name": "data",
              "type": "ModalMessageModel",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-text",
        "np-tip",
        "np-button"
      ],
      "dependencyGraph": {
        "np-alert": [
          "np-icon",
          "np-text",
          "np-tip",
          "np-button"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-tip": [
          "np-icon",
          "np-text"
        ],
        "np-button": [
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-axis-selector/np-axis-selector.tsx",
      "encapsulation": "shadow",
      "tag": "np-axis-selector",
      "readme": "# np-axis-selector\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Define a prop 'color' that is a string, initialized with 'primary'",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean[][]",
          "complexType": {
            "original": "Array<Array<boolean>>",
            "resolved": "boolean[][]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "this.createMatrix(false)",
          "values": [
            {
              "type": "boolean[][]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabledAll",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "disabledall",
          "reflectToAttr": false,
          "docs": "Define a prop 'disabledAll' that will map to the HTML attribute 'disabledAll'",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ishidden",
          "type": "boolean[][]",
          "complexType": {
            "original": "Array<Array<boolean>>",
            "resolved": "boolean[][]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "this.createMatrix(false)",
          "values": [
            {
              "type": "boolean[][]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mirror",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "mirror",
          "reflectToAttr": false,
          "docs": "Define a prop 'mirror' that is a boolean, initialized with false",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "positionMatrix",
          "type": "boolean[][]",
          "complexType": {
            "original": "Array<Array<boolean>>",
            "resolved": "boolean[][]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Define a prop 'positionMatrix' that is an array of arrays of booleans, initialized with false values",
          "docsTags": [],
          "default": "this.createMatrix(false)",
          "values": [
            {
              "type": "boolean[][]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "secondaryColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "secondarycolor",
          "reflectToAttr": false,
          "docs": "Define a prop 'secondaryColor' that will map to the HTML attribute 'secondaryColor' and is a string, initialized with 'secondary'",
          "docsTags": [],
          "default": "'secondary'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionModeAxis.Multiple | SelectionModeAxis.Single | SelectionModeAxis.Toggle",
          "complexType": {
            "original": "SelectionModeAxis",
            "resolved": "SelectionModeAxis.Multiple | SelectionModeAxis.Single | SelectionModeAxis.Toggle",
            "references": {
              "SelectionModeAxis": {
                "location": "import",
                "path": "./models/np-axis-selector-type.enum",
                "id": "src/components/np-axis-selector/models/np-axis-selector-type.enum.ts::SelectionModeAxis"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "Define a prop 'selectionMode' that will map to the HTML attribute 'selectionMode' and is of type 'selectionMode'",
          "docsTags": [],
          "values": [
            {
              "type": "SelectionModeAxis.Multiple"
            },
            {
              "type": "SelectionModeAxis.Single"
            },
            {
              "type": "SelectionModeAxis.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "SizeAxis.Large | SizeAxis.Medium | SizeAxis.Small",
          "complexType": {
            "original": "SizeAxis",
            "resolved": "SizeAxis.Large | SizeAxis.Medium | SizeAxis.Small",
            "references": {
              "SizeAxis": {
                "location": "import",
                "path": "./models/np-axis-selector-type.enum",
                "id": "src/components/np-axis-selector/models/np-axis-selector-type.enum.ts::SizeAxis"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define a prop 'size' that is of type 'sizeaxis'",
          "docsTags": [],
          "values": [
            {
              "type": "SizeAxis.Large"
            },
            {
              "type": "SizeAxis.Medium"
            },
            {
              "type": "SizeAxis.Small"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "Define a prop 'zoomPercentageConfig' that will map to the HTML attribute 'zoomPercentageConfig' and is a number, initialized with 90",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Define an event 'changeEvent' that will emit events of any type",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-axis-selector": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-basic-list-item/np-basic-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-basic-list-item",
      "readme": "# nc-list-item\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "item",
          "type": "BasicListItemModel",
          "complexType": {
            "original": "BasicListItemModel",
            "resolved": "BasicListItemModel",
            "references": {
              "BasicListItemModel": {
                "location": "import",
                "path": "./models/np-basic-list-item.model",
                "id": "src/components/np-basic-list-item/models/np-basic-list-item.model.ts::BasicListItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "BasicListItemModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optiondescription",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visited",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "visited",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "BasicListItemZoomConfig",
          "complexType": {
            "original": "BasicListItemZoomConfig",
            "resolved": "BasicListItemZoomConfig",
            "references": {
              "BasicListItemZoomConfig": {
                "location": "import",
                "path": "./models/np-basic-list-item-zoom.model",
                "id": "src/components/np-basic-list-item/models/np-basic-list-item-zoom.model.ts::BasicListItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new BasicListItemZoomConfig()",
          "values": [
            {
              "type": "BasicListItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "clickIconEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-tool-tip",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-basic-list-item": [
          "np-tool-tip",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-box-template/np-box-template.tsx",
      "encapsulation": "none",
      "tag": "np-box-template",
      "readme": "# np-box-template\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bgColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "bgcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "border",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "border",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "label color",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When true, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "font",
          "type": "FontType.Primary | FontType.Secondary",
          "complexType": {
            "original": "FontType",
            "resolved": "FontType.Primary | FontType.Secondary",
            "references": {
              "FontType": {
                "location": "import",
                "path": "../models/font-type.enum",
                "id": "src/components/models/font-type.enum.ts::FontType"
              }
            }
          },
          "mutable": false,
          "attr": "font",
          "reflectToAttr": false,
          "docs": "label font",
          "docsTags": [],
          "default": "FontType.Primary",
          "values": [
            {
              "type": "FontType.Primary"
            },
            {
              "type": "FontType.Secondary"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Set Input label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "When present, adds '*' to the label to represent as an required field",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reverse",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "reverse",
          "reflectToAttr": false,
          "docs": "reverse component order",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shadow",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "shadow",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showBorder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showborder",
          "reflectToAttr": false,
          "docs": "show Border around the component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showShadow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showshadow",
          "reflectToAttr": false,
          "docs": "show shadow around the component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the component's text",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "weight",
          "type": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
          "complexType": {
            "original": "FontWeight",
            "resolved": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
            "references": {
              "FontWeight": {
                "location": "import",
                "path": "../models/weight.enum",
                "id": "src/components/models/weight.enum.ts::FontWeight"
              }
            }
          },
          "mutable": false,
          "attr": "weight",
          "reflectToAttr": false,
          "docs": "label weight",
          "docsTags": [],
          "default": "FontWeight.W500",
          "values": [
            {
              "type": "FontWeight.Bold"
            },
            {
              "type": "FontWeight.Bolder"
            },
            {
              "type": "FontWeight.Lighter"
            },
            {
              "type": "FontWeight.Normal"
            },
            {
              "type": "FontWeight.Regular"
            },
            {
              "type": "FontWeight.Semibold"
            },
            {
              "type": "FontWeight.W100"
            },
            {
              "type": "FontWeight.W200"
            },
            {
              "type": "FontWeight.W300"
            },
            {
              "type": "FontWeight.W400"
            },
            {
              "type": "FontWeight.W500"
            },
            {
              "type": "FontWeight.W600"
            },
            {
              "type": "FontWeight.W700"
            },
            {
              "type": "FontWeight.W800"
            },
            {
              "type": "FontWeight.W900"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "The amount of zoom to be appliyed to the label",
          "docsTags": [],
          "default": "105",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text"
      ],
      "dependencyGraph": {
        "np-box-template": [
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-button/np-button.tsx",
      "encapsulation": "shadow",
      "tag": "np-button",
      "readme": "# nc-button\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color of the button",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "if true, the button will gain the disabled state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fullwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Button's icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "The color of the button's icon",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconHoverColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconhovercolor",
          "reflectToAttr": false,
          "docs": "The hover color of the button's icon",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconSize",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "iconsize",
          "reflectToAttr": false,
          "docs": "The size of the button's icon",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indexTab",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "indextab",
          "reflectToAttr": false,
          "docs": "Button index attribute",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "light",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "light",
          "reflectToAttr": false,
          "docs": "If true,  button will have an lighter color",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxWidth",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "maxwidth",
          "reflectToAttr": false,
          "docs": "Sets button max width",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "If true,  the button will have an transparent background and and border of 2 pixels",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reverse",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "reverse",
          "reflectToAttr": false,
          "docs": "Reverses button orientation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Button size",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "ButtonState.Loading | ButtonState.Success",
          "complexType": {
            "original": "ButtonState",
            "resolved": "ButtonState.Loading | ButtonState.Success",
            "references": {
              "ButtonState": {
                "location": "import",
                "path": "./models/np-button.enum",
                "id": "src/components/np-button/models/np-button.enum.ts::ButtonState"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ButtonState.Loading"
            },
            {
              "type": "ButtonState.Success"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "success",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "success",
          "reflectToAttr": false,
          "docs": "Sucess state's text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The button's background is removed, showing only the text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "ButtonType.Button | ButtonType.Reset | ButtonType.Submit",
          "complexType": {
            "original": "ButtonType",
            "resolved": "ButtonType.Button | ButtonType.Reset | ButtonType.Submit",
            "references": {
              "ButtonType": {
                "location": "import",
                "path": "./models/np-button.enum",
                "id": "src/components/np-button/models/np-button.enum.ts::ButtonType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Button type",
          "docsTags": [],
          "values": [
            {
              "type": "ButtonType.Button"
            },
            {
              "type": "ButtonType.Reset"
            },
            {
              "type": "ButtonType.Submit"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unsetMinWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "unsetminwidth",
          "reflectToAttr": false,
          "docs": "If button is only an icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Sets button width",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "ButtonZoomConfig",
          "complexType": {
            "original": "ButtonZoomConfig",
            "resolved": "ButtonZoomConfig",
            "references": {
              "ButtonZoomConfig": {
                "location": "import",
                "path": "./models/np-button.model",
                "id": "src/components/np-button/models/np-button.model.ts::ButtonZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ButtonZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getElement",
          "returns": {
            "type": "Promise<HTMLElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<HTMLElement>"
          },
          "signature": "getElement() => Promise<HTMLElement>",
          "parameters": [],
          "docs": "returns the button element",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "blurEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits button blur events",
          "docsTags": []
        },
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits button click events",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits button focus events",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-alert",
        "np-card-list",
        "np-card-list-item",
        "np-date-picker",
        "np-list-template",
        "np-tree-card-grid"
      ],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-button": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-alert": [
          "np-button"
        ],
        "np-card-list": [
          "np-button"
        ],
        "np-card-list-item": [
          "np-button"
        ],
        "np-date-picker": [
          "np-button"
        ],
        "np-list-template": [
          "np-button"
        ],
        "np-tree-card-grid": [
          "np-button"
        ]
      }
    },
    {
      "filePath": "src/components/np-button-group/np-button-group.tsx",
      "encapsulation": "shadow",
      "tag": "np-button-group",
      "readme": "# nc-button-group\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bgColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "bgcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonStyle",
          "type": "ButtonGroupColorStyle.c_scale_1 | ButtonGroupColorStyle.c_scale_4 | ButtonGroupColorStyle.outlined",
          "complexType": {
            "original": "ButtonGroupColorStyle",
            "resolved": "ButtonGroupColorStyle.c_scale_1 | ButtonGroupColorStyle.c_scale_4 | ButtonGroupColorStyle.outlined",
            "references": {
              "ButtonGroupColorStyle": {
                "location": "import",
                "path": "./models/np-button-group.enum",
                "id": "src/components/np-button-group/models/np-button-group.enum.ts::ButtonGroupColorStyle"
              }
            }
          },
          "mutable": false,
          "attr": "buttonstyle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "ButtonGroupColorStyle.c_scale_1",
          "values": [
            {
              "type": "ButtonGroupColorStyle.c_scale_1"
            },
            {
              "type": "ButtonGroupColorStyle.c_scale_4"
            },
            {
              "type": "ButtonGroupColorStyle.outlined"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "canDelete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "candelete",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "canEdit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "canedit",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "countLayers",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "countlayers",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "deleteString",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "deletestring",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Delete'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "direction",
          "type": "Direction.horizontal | Direction.vertical",
          "complexType": {
            "original": "Direction",
            "resolved": "Direction.horizontal | Direction.vertical",
            "references": {
              "Direction": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Direction"
              }
            }
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Direction.horizontal",
          "values": [
            {
              "type": "Direction.horizontal"
            },
            {
              "type": "Direction.vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabledAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabledall",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editString",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "editstring",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Edit'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "editable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "errormessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'action unavailable'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "initialElem",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "initialelem",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layerString",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "layerstring",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lightMode",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "lightmode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxCharacters",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxcharacters",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "metaKey",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "metakey",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "onlyClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "onlyclick",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "OptionModel[]",
          "complexType": {
            "original": "Array<OptionModel>",
            "resolved": "OptionModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "OptionModel": {
                "location": "import",
                "path": "./models/np-button-group.model",
                "id": "src/components/np-button-group/models/np-button-group.model.ts::OptionModel"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "OptionModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "plusIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "plusicon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "positionIcon",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "positionicon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "ElementPosition.Left",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "ButtonGroupZoomConfigs",
          "complexType": {
            "original": "ButtonGroupZoomConfigs",
            "resolved": "ButtonGroupZoomConfigs",
            "references": {
              "ButtonGroupZoomConfigs": {
                "location": "import",
                "path": "./models/np-button-group.model",
                "id": "src/components/np-button-group/models/np-button-group.model.ts::ButtonGroupZoomConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ButtonGroupZoomConfigs"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "addEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "deletedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "editedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "optionClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "optionsChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-side-view"
      ],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-button-group": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-side-view": [
          "np-button-group"
        ]
      }
    },
    {
      "filePath": "src/components/np-button-toggle/np-button-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "np-button-toggle",
      "readme": "# nc-button-toggle\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bgColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "bgcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_5",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fullwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "Option[]",
          "complexType": {
            "original": "Array<Option>",
            "resolved": "Option[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "Option": {
                "location": "import",
                "path": "./models/np-button-toggle.model",
                "id": "src/components/np-button-toggle/models/np-button-toggle.model.ts::Option"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "Option[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "selectedcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_1",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Large",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "textcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_10",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textColorSelected",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "textcolorselected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textHoverColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "texthovercolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'c-scale-12'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "ButtonToggleZoomConfig",
          "complexType": {
            "original": "ButtonToggleZoomConfig",
            "resolved": "ButtonToggleZoomConfig",
            "references": {
              "ButtonToggleZoomConfig": {
                "location": "import",
                "path": "./models/np-button-toggle.zoom",
                "id": "src/components/np-button-toggle/models/np-button-toggle.zoom.ts::ButtonToggleZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new ButtonToggleZoomConfig()",
          "values": [
            {
              "type": "ButtonToggleZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEvent",
          "detail": "Option[]",
          "bubbles": true,
          "complexType": {
            "original": "Option[]",
            "resolved": "Option[]",
            "references": {
              "Option": {
                "location": "import",
                "path": "./models/np-button-toggle.model",
                "id": "src/components/np-button-toggle/models/np-button-toggle.model.ts::Option"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text"
      ],
      "dependencyGraph": {
        "np-button-toggle": [
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-card-input/np-card-input.tsx",
      "encapsulation": "shadow",
      "tag": "np-card-input",
      "readme": "# np-card-input\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "buttonMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "buttonmessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Done'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contact",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "contact",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editable",
          "type": "\"multiple\" | \"none\" | \"single\"",
          "complexType": {
            "original": "'none' | 'single' | 'multiple'",
            "resolved": "\"multiple\" | \"none\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "editable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "CardInputSelectionModel[]",
          "complexType": {
            "original": "Array<CardInputSelectionModel>",
            "resolved": "CardInputSelectionModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "CardInputSelectionModel": {
                "location": "import",
                "path": "./models/np-card-input.model",
                "id": "src/components/np-card-input/models/np-card-input.model.ts::CardInputSelectionModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "CardInputSelectionModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "CardInputMenuItemModel[]",
          "complexType": {
            "original": "Array<CardInputMenuItemModel>",
            "resolved": "CardInputMenuItemModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "CardInputMenuItemModel": {
                "location": "import",
                "path": "./models/np-card-input.model",
                "id": "src/components/np-card-input/models/np-card-input.model.ts::CardInputMenuItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "CardInputMenuItemModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pinned",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pinned",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "CardInputSelectionModel[]",
          "complexType": {
            "original": "Array<CardInputSelectionModel>",
            "resolved": "CardInputSelectionModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "CardInputSelectionModel": {
                "location": "import",
                "path": "./models/np-card-input.model",
                "id": "src/components/np-card-input/models/np-card-input.model.ts::CardInputSelectionModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "CardInputSelectionModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\" | \"xlarge\" | \"xsmall\"",
          "complexType": {
            "original": "'xsmall' | 'small' | 'medium' | 'large' | 'xlarge'",
            "resolved": "\"large\" | \"medium\" | \"small\" | \"xlarge\" | \"xsmall\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'xsmall'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            },
            {
              "value": "xsmall",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "titlevalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "editModeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectionChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "valueChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-more-options",
        "np-menu-item"
      ],
      "dependencyGraph": {
        "np-card-input": [
          "np-more-options",
          "np-menu-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-card-list/np-card-list.tsx",
      "encapsulation": "shadow",
      "tag": "np-card-list",
      "readme": "# card-list\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "buttonAction",
          "type": "CardListButtonAction.New | CardListButtonAction.Other",
          "complexType": {
            "original": "CardListButtonAction",
            "resolved": "CardListButtonAction.New | CardListButtonAction.Other",
            "references": {
              "CardListButtonAction": {
                "location": "import",
                "path": "./models/np-card-list.enum",
                "id": "src/components/np-card-list/models/np-card-list.enum.ts::CardListButtonAction"
              }
            }
          },
          "mutable": false,
          "attr": "buttonaction",
          "reflectToAttr": false,
          "docs": "button Action to use in this component [New / Other]",
          "docsTags": [],
          "default": "CardListButtonAction.Other",
          "values": [
            {
              "type": "CardListButtonAction.New"
            },
            {
              "type": "CardListButtonAction.Other"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "buttoncolor",
          "reflectToAttr": false,
          "docs": "Button color in the other button case",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "buttondisabled",
          "reflectToAttr": false,
          "docs": "Button disabled in the button action",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "buttonicon",
          "reflectToAttr": false,
          "docs": "Button Icon in the other button case",
          "docsTags": [],
          "default": "'icon_plus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "chips",
          "type": "ChipsOptions[]",
          "complexType": {
            "original": "ChipsOptions[]",
            "resolved": "ChipsOptions[]",
            "references": {
              "ChipsOptions": {
                "location": "import",
                "path": "../np-chips/models/np-chips.interface",
                "id": "src/components/np-chips/models/np-chips.interface.ts::ChipsOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Chips to use in this component",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "ChipsOptions[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "chipsBgColor",
          "type": "ChipsBgColor.c_scale_3 | ChipsBgColor.c_scale_4 | ChipsBgColor.c_scale_8 | ChipsBgColor.c_scale_9 | ChipsBgColor.secondary",
          "complexType": {
            "original": "ChipsBgColor",
            "resolved": "ChipsBgColor.c_scale_3 | ChipsBgColor.c_scale_4 | ChipsBgColor.c_scale_8 | ChipsBgColor.c_scale_9 | ChipsBgColor.secondary",
            "references": {
              "ChipsBgColor": {
                "location": "import",
                "path": "../np-chips/models/np-chips.enum",
                "id": "src/components/np-chips/models/np-chips.enum.ts::ChipsBgColor"
              }
            }
          },
          "mutable": false,
          "attr": "chipsbgcolor",
          "reflectToAttr": false,
          "docs": "Chips Background Color",
          "docsTags": [],
          "default": "ChipsBgColor.c_scale_3",
          "values": [
            {
              "type": "ChipsBgColor.c_scale_3"
            },
            {
              "type": "ChipsBgColor.c_scale_4"
            },
            {
              "type": "ChipsBgColor.c_scale_8"
            },
            {
              "type": "ChipsBgColor.c_scale_9"
            },
            {
              "type": "ChipsBgColor.secondary"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "chipsSelectionMode",
          "type": "ChipsSelectionMode.Multiple | ChipsSelectionMode.Single | ChipsSelectionMode.Toggle",
          "complexType": {
            "original": "ChipsSelectionMode",
            "resolved": "ChipsSelectionMode.Multiple | ChipsSelectionMode.Single | ChipsSelectionMode.Toggle",
            "references": {
              "ChipsSelectionMode": {
                "location": "import",
                "path": "../np-chips/models/np-chips.enum",
                "id": "src/components/np-chips/models/np-chips.enum.ts::ChipsSelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "chipsselectionmode",
          "reflectToAttr": false,
          "docs": "selection mode to use in this chips",
          "docsTags": [],
          "default": "ChipsSelectionMode.Single",
          "values": [
            {
              "type": "ChipsSelectionMode.Multiple"
            },
            {
              "type": "ChipsSelectionMode.Single"
            },
            {
              "type": "ChipsSelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultLabels",
          "type": "DefaultLabelsModel",
          "complexType": {
            "original": "DefaultLabelsModel",
            "resolved": "DefaultLabelsModel",
            "references": {
              "DefaultLabelsModel": {
                "location": "import",
                "path": "./np-card-list-item/models/np-card-list-item.model",
                "id": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::DefaultLabelsModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Default Labels to use in this component",
          "docsTags": [],
          "values": [
            {
              "type": "DefaultLabelsModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "deleteButton",
          "type": "CardListDeleteButton.All | CardListDeleteButton.None | CardListDeleteButton.Selected",
          "complexType": {
            "original": "CardListDeleteButton",
            "resolved": "CardListDeleteButton.All | CardListDeleteButton.None | CardListDeleteButton.Selected",
            "references": {
              "CardListDeleteButton": {
                "location": "import",
                "path": "./models/np-card-list.enum",
                "id": "src/components/np-card-list/models/np-card-list.enum.ts::CardListDeleteButton"
              }
            }
          },
          "mutable": false,
          "attr": "deletebutton",
          "reflectToAttr": false,
          "docs": "Delete Action to use in this component [All / Selected / None]",
          "docsTags": [],
          "default": "CardListDeleteButton.Selected",
          "values": [
            {
              "type": "CardListDeleteButton.All"
            },
            {
              "type": "CardListDeleteButton.None"
            },
            {
              "type": "CardListDeleteButton.Selected"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableFilterInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablefilterinput",
          "reflectToAttr": false,
          "docs": "Input filter disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableItems",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableitems",
          "reflectToAttr": false,
          "docs": "If this property is set to true, the items will be disabled, meaning that the user won't be able to select or do any action on the item",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyListNew",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "emptylistnew",
          "reflectToAttr": false,
          "docs": "Used to define if there is an empty list",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filter",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "Sets a value to the filter input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterProperties",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Identifiers to use filtering to items in this component",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredItems",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items filtered to use in this component",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filtering",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filtering",
          "reflectToAttr": false,
          "docs": "Multi Select with click in this component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleButtonActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handlebuttonactive",
          "reflectToAttr": false,
          "docs": "Used to define if there is an button action validation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleButtonClick",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to validate an button action",
          "docsTags": [],
          "default": "(...params) => {\r\n    return params ?? false;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleDelete",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to validate an delete button action",
          "docsTags": [],
          "default": "(...params) => {\r\n    return params ?? false;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleDeleteActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handledeleteactive",
          "reflectToAttr": false,
          "docs": "Used to define if there is an delete button validation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelect",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to validate an item selection",
          "docsTags": [],
          "default": "(...params) => {\r\n    return params ?? false;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectactive",
          "reflectToAttr": false,
          "docs": "Used to define if there is an item selection validation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasFilterInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hasfilterinput",
          "reflectToAttr": false,
          "docs": "Show input filter in the header",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hasheader",
          "reflectToAttr": false,
          "docs": "Show Header",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEmptyList",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconemptylist",
          "reflectToAttr": false,
          "docs": "The icon that appears on the component that appears when there are no results",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifiers",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Identifiers to use filtering in this component",
          "docsTags": [],
          "default": "['id']",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemHeight",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "itemheight",
          "reflectToAttr": false,
          "docs": "Item Height to use in this component",
          "docsTags": [],
          "default": "48",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "CardListItemModel[]",
          "complexType": {
            "original": "Array<CardListItemModel>",
            "resolved": "CardListItemModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "CardListItemModel": {
                "location": "import",
                "path": "./np-card-list-item/models/np-card-list-item.model",
                "id": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::CardListItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "items to use in this component",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "CardListItemModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiSelectWithClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiselectwithclick",
          "reflectToAttr": false,
          "docs": "Multi Select with click in this component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "newCardAtBeginning",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "newcardatbeginning",
          "reflectToAttr": false,
          "docs": "NEW CARD AT BEGINNING IF ITEMS ARE NOT EMPTY",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsConfigs",
          "type": "FiltersInfoModel",
          "complexType": {
            "original": "FiltersInfoModel",
            "resolved": "FiltersInfoModel",
            "references": {
              "FiltersInfoModel": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Configurations for the component that appears when there are no results",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsTranslations",
          "type": "FiltersInfoTranslations",
          "complexType": {
            "original": "FiltersInfoTranslations",
            "resolved": "FiltersInfoTranslations",
            "references": {
              "FiltersInfoTranslations": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Translations for the component that appears when there are no results",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "onlyEnableSelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "onlyenableselected",
          "reflectToAttr": false,
          "docs": "Only Enable Selected in this component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "CardListItemModel[]",
          "complexType": {
            "original": "Array<CardListItemModel>",
            "resolved": "CardListItemModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "CardListItemModel": {
                "location": "import",
                "path": "./np-card-list-item/models/np-card-list-item.model",
                "id": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::CardListItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "selected in this component",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "CardListItemModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../models/selection-mode.enum",
                "id": "src/components/models/selection-mode.enum.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "selection mode to use in this component",
          "docsTags": [],
          "default": "SelectionMode.Multiple",
          "values": [
            {
              "type": "SelectionMode.Multiple"
            },
            {
              "type": "SelectionMode.MultipleToggle"
            },
            {
              "type": "SelectionMode.Single"
            },
            {
              "type": "SelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "size to use in this chips component",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "CardListZoomModel",
          "complexType": {
            "original": "CardListZoomModel",
            "resolved": "CardListZoomModel",
            "references": {
              "CardListZoomModel": {
                "location": "import",
                "path": "./models/np-card-list.model",
                "id": "src/components/np-card-list/models/np-card-list.model.ts::CardListZoomModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "CardListZoomModel"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hideNewCard",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hideNewCard() => Promise<void>",
          "parameters": [],
          "docs": "Hide New Card",
          "docsTags": []
        },
        {
          "name": "showNewCard",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "showNewCard() => Promise<void>",
          "parameters": [],
          "docs": "Show New Card",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "buttonClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Button action click emitter to use in this component",
          "docsTags": []
        },
        {
          "event": "deleteButtonEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Delete button click emitter to use in this component",
          "docsTags": []
        },
        {
          "event": "deleteCardEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Delete item confirm click emitter to use in the card item component",
          "docsTags": []
        },
        {
          "event": "filterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Filter event emitter to use in this component",
          "docsTags": []
        },
        {
          "event": "hideNewEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Hide New Event emitter to use in this component",
          "docsTags": []
        },
        {
          "event": "itemsChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Items Change emitter to use in this component",
          "docsTags": []
        },
        {
          "event": "newClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "New Click Event emitter to use in this component",
          "docsTags": []
        },
        {
          "event": "selectedChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Selected Change emitter to use in this component",
          "docsTags": []
        },
        {
          "event": "showNewEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Show New Event emitter to use in this component",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-card-list-item",
        "np-list-template",
        "np-chips",
        "np-button"
      ],
      "dependencyGraph": {
        "np-card-list": [
          "np-card-list-item",
          "np-list-template",
          "np-chips",
          "np-button"
        ],
        "np-card-list-item": [
          "np-text",
          "np-button",
          "np-icon"
        ],
        "np-button": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-list-template": [
          "np-text",
          "np-button",
          "np-select-box",
          "np-icon",
          "np-input",
          "np-custom-list"
        ],
        "np-select-box": [
          "np-text",
          "np-icon",
          "np-check-box",
          "np-select-item",
          "np-virtual-scroller",
          "np-chips",
          "np-input"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-select-item": [
          "np-check-box",
          "np-icon",
          "np-text"
        ],
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-custom-list": [
          "np-filters-info",
          "np-icon",
          "np-virtual-scroller",
          "np-context-menu"
        ],
        "np-filters-info": [
          "np-icon",
          "np-text"
        ],
        "np-context-menu": [
          "np-icon",
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-card-list/np-card-list-item/np-card-list-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-card-list-item",
      "readme": "# np-card-list-item\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "cardType",
          "type": "CardItemType.Card | CardItemType.New",
          "complexType": {
            "original": "CardItemType",
            "resolved": "CardItemType.Card | CardItemType.New",
            "references": {
              "CardItemType": {
                "location": "import",
                "path": "./models/np-card-list-item.enum",
                "id": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.enum.ts::CardItemType"
              }
            }
          },
          "mutable": false,
          "attr": "cardtype",
          "reflectToAttr": false,
          "docs": "Card Type",
          "docsTags": [],
          "default": "CardItemType.Card",
          "values": [
            {
              "type": "CardItemType.Card"
            },
            {
              "type": "CardItemType.New"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultLabels",
          "type": "DefaultLabelsModel",
          "complexType": {
            "original": "DefaultLabelsModel",
            "resolved": "DefaultLabelsModel",
            "references": {
              "DefaultLabelsModel": {
                "location": "import",
                "path": "./models/np-card-list-item.model",
                "id": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::DefaultLabelsModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new DefaultLabelsModel()",
          "values": [
            {
              "type": "DefaultLabelsModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "deleteButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "deletebutton",
          "reflectToAttr": false,
          "docs": "Show Delete Button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Item disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isDelete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "isdelete",
          "reflectToAttr": false,
          "docs": "Delete Actived",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "item",
          "type": "CardListItemModel",
          "complexType": {
            "original": "CardListItemModel",
            "resolved": "CardListItemModel",
            "references": {
              "CardListItemModel": {
                "location": "import",
                "path": "./models/np-card-list-item.model",
                "id": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::CardListItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new CardListItemModel()",
          "values": [
            {
              "type": "CardListItemModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Item Selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "CardListItemZoom",
          "complexType": {
            "original": "CardListItemZoom",
            "resolved": "CardListItemZoom",
            "references": {
              "CardListItemZoom": {
                "location": "import",
                "path": "./models/np-card-list-item.model",
                "id": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::CardListItemZoom"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new CardListItemZoom()",
          "values": [
            {
              "type": "CardListItemZoom"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "cardClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Card Click event emitter",
          "docsTags": []
        },
        {
          "event": "deleteClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Delete Click event emitter",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-card-list"
      ],
      "dependencies": [
        "np-text",
        "np-button",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-card-list-item": [
          "np-text",
          "np-button",
          "np-icon"
        ],
        "np-button": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-card-list": [
          "np-card-list-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-check-box/np-check-box.tsx",
      "encapsulation": "shadow",
      "tag": "np-check-box",
      "readme": "# np-check-box\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "arialabelledby",
          "reflectToAttr": false,
          "docs": "Establishes relationships between the component and label(s) where its value should be one or more element IDs",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "binary",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "binary",
          "reflectToAttr": false,
          "docs": "Allows to select a boolean value instead of multiple values",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filledBackgroundColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "filledbackgroundcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselection",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "imageSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "imagesrc",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indexTab",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "indextab",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label of the checkbox",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "labelcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelReverse",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labelreverse",
          "reflectToAttr": false,
          "docs": "Label left to the checkbox",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelSize",
          "type": "FontSize.H1 | FontSize.H2 | FontSize.H3 | FontSize.H4 | FontSize.H5 | FontSize.H6 | FontSize.H7 | FontSize.H8",
          "complexType": {
            "original": "FontSize",
            "resolved": "FontSize.H1 | FontSize.H2 | FontSize.H3 | FontSize.H4 | FontSize.H5 | FontSize.H6 | FontSize.H7 | FontSize.H8",
            "references": {
              "FontSize": {
                "location": "import",
                "path": "../models/font-size.enum",
                "id": "src/components/models/font-size.enum.ts::FontSize"
              }
            }
          },
          "mutable": true,
          "attr": "labelsize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "FontSize.H1"
            },
            {
              "type": "FontSize.H2"
            },
            {
              "type": "FontSize.H3"
            },
            {
              "type": "FontSize.H4"
            },
            {
              "type": "FontSize.H5"
            },
            {
              "type": "FontSize.H6"
            },
            {
              "type": "FontSize.H7"
            },
            {
              "type": "FontSize.H8"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the checkbox group",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "nullBorderColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "nullbordercolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_7",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabIndexValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindexvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "-1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "triState",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "tristate",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "triStateIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tristateicon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'icon_cross'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the checkbox",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "CheckBoxZoomConfig",
          "complexType": {
            "original": "CheckBoxZoomConfig",
            "resolved": "CheckBoxZoomConfig",
            "references": {
              "CheckBoxZoomConfig": {
                "location": "import",
                "path": "./models/np-check-box-zoom.model",
                "id": "src/components/np-check-box/models/np-check-box-zoom.model.ts::CheckBoxZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "CheckBoxZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Manually sets focus on the check box",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "blurEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "checkedChangeEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Deprecated",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-select-box",
        "np-select-item",
        "np-tree-node"
      ],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-select-box": [
          "np-check-box"
        ],
        "np-select-item": [
          "np-check-box"
        ],
        "np-tree-node": [
          "np-check-box"
        ]
      }
    },
    {
      "filePath": "src/components/np-chips/np-chips.tsx",
      "encapsulation": "shadow",
      "tag": "np-chips",
      "readme": "# nc-chips\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "addOnBlur",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "addonblur",
          "reflectToAttr": false,
          "docs": "Adds chips on focus out",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "addOnTab",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "addontab",
          "reflectToAttr": false,
          "docs": "Adds chips on tab",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allowDuplicate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allowduplicate",
          "reflectToAttr": false,
          "docs": "Allows duplicated labels",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "bgColor",
          "type": "ChipsBgColor.c_scale_3 | ChipsBgColor.c_scale_4 | ChipsBgColor.c_scale_8 | ChipsBgColor.c_scale_9 | ChipsBgColor.secondary",
          "complexType": {
            "original": "ChipsBgColor",
            "resolved": "ChipsBgColor.c_scale_3 | ChipsBgColor.c_scale_4 | ChipsBgColor.c_scale_8 | ChipsBgColor.c_scale_9 | ChipsBgColor.secondary",
            "references": {
              "ChipsBgColor": {
                "location": "import",
                "path": "./models/np-chips.enum",
                "id": "src/components/np-chips/models/np-chips.enum.ts::ChipsBgColor"
              }
            }
          },
          "mutable": false,
          "attr": "bgcolor",
          "reflectToAttr": false,
          "docs": "Sets background colors",
          "docsTags": [],
          "default": "ChipsBgColor.c_scale_3",
          "values": [
            {
              "type": "ChipsBgColor.c_scale_3"
            },
            {
              "type": "ChipsBgColor.c_scale_4"
            },
            {
              "type": "ChipsBgColor.c_scale_8"
            },
            {
              "type": "ChipsBgColor.c_scale_9"
            },
            {
              "type": "ChipsBgColor.secondary"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "Chips can be closed",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeSelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closeselection",
          "reflectToAttr": false,
          "docs": "Chips can only be selected/deselected - deselected on the cross icon",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Sets input to disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputid",
          "reflectToAttr": false,
          "docs": "Sets the id for the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputText",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inputtext",
          "reflectToAttr": false,
          "docs": "Sets input visible",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemTemplate",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "itemtemplate",
          "reflectToAttr": false,
          "docs": "Sets the item template",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Sets max number of chips",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Sets max number of chips",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Sets chips to outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Sets second label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Sets input to readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "ChipsSelectionMode.Multiple | ChipsSelectionMode.Single | ChipsSelectionMode.Toggle",
          "complexType": {
            "original": "ChipsSelectionMode",
            "resolved": "ChipsSelectionMode.Multiple | ChipsSelectionMode.Single | ChipsSelectionMode.Toggle",
            "references": {
              "ChipsSelectionMode": {
                "location": "import",
                "path": "./models/np-chips.enum",
                "id": "src/components/np-chips/models/np-chips.enum.ts::ChipsSelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "Sets selection mode",
          "docsTags": [],
          "default": "ChipsSelectionMode.Multiple",
          "values": [
            {
              "type": "ChipsSelectionMode.Multiple"
            },
            {
              "type": "ChipsSelectionMode.Single"
            },
            {
              "type": "ChipsSelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selector",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selector",
          "reflectToAttr": false,
          "docs": "Chips can only be selected/deselected",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "separator",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "separator",
          "reflectToAttr": false,
          "docs": "Sets spaces between words on paste",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets chips size",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabIndexValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindexvalue",
          "reflectToAttr": false,
          "docs": "Sets the tabIndex value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "ChipsOptions[]",
          "complexType": {
            "original": "ChipsOptions[]",
            "resolved": "ChipsOptions[]",
            "references": {
              "ChipsOptions": {
                "location": "import",
                "path": "./models/np-chips.interface",
                "id": "src/components/np-chips/models/np-chips.interface.ts::ChipsOptions"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Sets chips",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "ChipsOptions[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "ChipsZoomConfig",
          "complexType": {
            "original": "ChipsZoomConfig",
            "resolved": "ChipsZoomConfig",
            "references": {
              "ChipsZoomConfig": {
                "location": "import",
                "path": "./models/np-chips.model",
                "id": "src/components/np-chips/models/np-chips.model.ts::ChipsZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new ChipsZoomConfig()",
          "values": [
            {
              "type": "ChipsZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "addEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Add event for adding chips",
          "docsTags": []
        },
        {
          "event": "blurEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Blur event for managing blur on chips",
          "docsTags": []
        },
        {
          "event": "chipClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Click event for managing clicks on chips",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Focus event for managing focus on chips",
          "docsTags": []
        },
        {
          "event": "removeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Remove event for removing chips",
          "docsTags": []
        },
        {
          "event": "valueChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event for managing value changes on chips",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-card-list",
        "np-input-rounded",
        "np-select-box"
      ],
      "dependencies": [
        "np-icon",
        "np-text",
        "np-input"
      ],
      "dependencyGraph": {
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-card-list": [
          "np-chips"
        ],
        "np-input-rounded": [
          "np-chips"
        ],
        "np-select-box": [
          "np-chips"
        ]
      }
    },
    {
      "filePath": "src/components/np-color-picker/np-color-picker.tsx",
      "encapsulation": "shadow",
      "tag": "np-color-picker",
      "readme": "# np-color-picker\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alphaChannel",
          "type": "AlphaChannel.Disabled | AlphaChannel.Enabled",
          "complexType": {
            "original": "AlphaChannel",
            "resolved": "AlphaChannel.Disabled | AlphaChannel.Enabled",
            "references": {
              "AlphaChannel": {
                "location": "import",
                "path": "./models/np-color-picker.enum",
                "id": "src/components/np-color-picker/models/np-color-picker.enum.ts::AlphaChannel"
              }
            }
          },
          "mutable": false,
          "attr": "alphachannel",
          "reflectToAttr": false,
          "docs": "If alpha chanel is disabled, the opacity will disapear from the color picker",
          "docsTags": [],
          "default": "AlphaChannel.Enabled",
          "values": [
            {
              "type": "AlphaChannel.Disabled"
            },
            {
              "type": "AlphaChannel.Enabled"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "If the clear cross is hidden or not",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorMode",
          "type": "ColorMode.Color | ColorMode.Grayscale",
          "complexType": {
            "original": "ColorMode",
            "resolved": "ColorMode.Color | ColorMode.Grayscale",
            "references": {
              "ColorMode": {
                "location": "import",
                "path": "./models/np-color-picker.enum",
                "id": "src/components/np-color-picker/models/np-color-picker.enum.ts::ColorMode"
              }
            }
          },
          "mutable": false,
          "attr": "colormode",
          "reflectToAttr": false,
          "docs": "If the color mode is gray scale, it will be only possible to select gray scale color",
          "docsTags": [],
          "default": "ColorMode.Color",
          "values": [
            {
              "type": "ColorMode.Color"
            },
            {
              "type": "ColorMode.Grayscale"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorPresets",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorPresetsLimit",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "colorpresetslimit",
          "reflectToAttr": false,
          "docs": "The limit of color presets to appear on the color picker",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorStyle",
          "type": "ColorStyle.Round | ColorStyle.SemiRound | ColorStyle.Square",
          "complexType": {
            "original": "ColorStyle",
            "resolved": "ColorStyle.Round | ColorStyle.SemiRound | ColorStyle.Square",
            "references": {
              "ColorStyle": {
                "location": "import",
                "path": "./models/np-color-picker.enum",
                "id": "src/components/np-color-picker/models/np-color-picker.enum.ts::ColorStyle"
              }
            }
          },
          "mutable": false,
          "attr": "colorstyle",
          "reflectToAttr": false,
          "docs": "The style of the presets and color visualizer",
          "docsTags": [],
          "default": "ColorStyle.Round",
          "values": [
            {
              "type": "ColorStyle.Round"
            },
            {
              "type": "ColorStyle.SemiRound"
            },
            {
              "type": "ColorStyle.Square"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorVariableType",
          "type": "ColorType.Bg | ColorType.Border | ColorType.Fill | ColorType.Link | ColorType.Txt",
          "complexType": {
            "original": "ColorType",
            "resolved": "ColorType.Bg | ColorType.Border | ColorType.Fill | ColorType.Link | ColorType.Txt",
            "references": {
              "ColorType": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::ColorType"
              }
            }
          },
          "mutable": false,
          "attr": "colorvariabletype",
          "reflectToAttr": false,
          "docs": "The type of color variable that we are going to be using on the list, If we define the value as ex: '_bg' the emmited selected variable will be color + colorVariableType (ex: primary_bg)",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "ColorType.Bg"
            },
            {
              "type": "ColorType.Border"
            },
            {
              "type": "ColorType.Fill"
            },
            {
              "type": "ColorType.Link"
            },
            {
              "type": "ColorType.Txt"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "direction",
          "type": "Direction.horizontal | Direction.vertical",
          "complexType": {
            "original": "Direction",
            "resolved": "Direction.horizontal | Direction.vertical",
            "references": {
              "Direction": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Direction"
              }
            }
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "The direction that the color preset picker will display the color components",
          "docsTags": [],
          "default": "Direction.vertical",
          "values": [
            {
              "type": "Direction.horizontal"
            },
            {
              "type": "Direction.vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "The disabled state of the color picker",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fallbackColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "fallbackcolor",
          "reflectToAttr": false,
          "docs": "The color picker's fallback color, this is usefull when the given color value is null or undefined",
          "docsTags": [],
          "default": "'#fff'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "generatePresets",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "generatepresets",
          "reflectToAttr": false,
          "docs": "If true, various shades of the selected color will appear as presets",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasColorPicker",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hascolorpicker",
          "reflectToAttr": false,
          "docs": "if defined as false, the color picker won't appear",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasColorVariables",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hascolorvariables",
          "reflectToAttr": false,
          "docs": "if defined as true, an list of color variables will appear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "If error cross is hidden or not",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The input label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberOfPresets",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "numberofpresets",
          "reflectToAttr": false,
          "docs": "The number of presets to be generated",
          "docsTags": [],
          "default": "20",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayAditionalWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "overlayaditionalwidth",
          "reflectToAttr": false,
          "docs": "The aditional width of the color picker",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPosition",
          "type": "OverlayPosition.Auto | OverlayPosition.Bottom | OverlayPosition.Left | OverlayPosition.Right | OverlayPosition.Top",
          "complexType": {
            "original": "OverlayPosition",
            "resolved": "OverlayPosition.Auto | OverlayPosition.Bottom | OverlayPosition.Left | OverlayPosition.Right | OverlayPosition.Top",
            "references": {
              "OverlayPosition": {
                "location": "import",
                "path": "../models/overlay-position.enum",
                "id": "src/components/models/overlay-position.enum.ts::OverlayPosition"
              }
            }
          },
          "mutable": false,
          "attr": "overlayposition",
          "reflectToAttr": false,
          "docs": "This property is used to define the position where the color picker's overlay is gonna appear from",
          "docsTags": [],
          "default": "OverlayPosition.Auto",
          "values": [
            {
              "type": "OverlayPosition.Auto"
            },
            {
              "type": "OverlayPosition.Bottom"
            },
            {
              "type": "OverlayPosition.Left"
            },
            {
              "type": "OverlayPosition.Right"
            },
            {
              "type": "OverlayPosition.Top"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "overlayvisible",
          "reflectToAttr": false,
          "docs": "if the color picker's overlay is visible or hidden",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input placeholder",
          "docsTags": [],
          "default": "'Selecione uma cor'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "The readonly state of the color picker",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "The required state of the color picker",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectBoxOptions",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The select box's options",
          "docsTags": [],
          "default": "[\r\n    { id: 0, label: 'Hex' },\r\n    { id: 1, label: 'Hsl' },\r\n    { id: 2, label: 'Rgb' },\r\n  ]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedColorVariable",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selectedcolorvariable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedOption",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The selected item of the select box",
          "docsTags": [],
          "default": "[this.selectBoxOptions[0]]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedPreset",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The list of the selected presets",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectorItems",
          "type": "ColorPickerSelectorModel[]",
          "complexType": {
            "original": "Array<ColorPickerSelectorModel>",
            "resolved": "ColorPickerSelectorModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ColorPickerSelectorModel": {
                "location": "import",
                "path": "./models/np-color-picker.interface",
                "id": "src/components/np-color-picker/models/np-color-picker.interface.ts::ColorPickerSelectorModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The array of the selector tabs",
          "docsTags": [],
          "default": "[\r\n    { id: '0', label: 'Color Picker' },\r\n    { id: '1', label: 'Color Theme' },\r\n  ]",
          "values": [
            {
              "type": "ColorPickerSelectorModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectorSelectedItems",
          "type": "ColorPickerSelectorModel[]",
          "complexType": {
            "original": "Array<ColorPickerSelectorModel>",
            "resolved": "ColorPickerSelectorModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ColorPickerSelectorModel": {
                "location": "import",
                "path": "./models/np-color-picker.interface",
                "id": "src/components/np-color-picker/models/np-color-picker.interface.ts::ColorPickerSelectorModel"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The selected tab of the selector component",
          "docsTags": [],
          "default": "[this.selectorItems[0]]",
          "values": [
            {
              "type": "ColorPickerSelectorModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showOnlyPresets",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showonlypresets",
          "reflectToAttr": false,
          "docs": "If true, the color picker will be hidden, and only the presets will appear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "The state of the color preset picker",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "The state message of the color preset picker",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "ColorPickerTooltipPosition",
          "complexType": {
            "original": "ColorPickerTooltipPosition",
            "resolved": "ColorPickerTooltipPosition",
            "references": {
              "ColorPickerTooltipPosition": {
                "location": "import",
                "path": "./models/np-color-picker.model",
                "id": "src/components/np-color-picker/models/np-color-picker.model.ts::ColorPickerTooltipPosition"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ColorPickerTooltipPosition"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translations",
          "type": "ColorPickerTranslations",
          "complexType": {
            "original": "ColorPickerTranslations",
            "resolved": "ColorPickerTranslations",
            "references": {
              "ColorPickerTranslations": {
                "location": "import",
                "path": "./models/np-color-picker.model",
                "id": "src/components/np-color-picker/models/np-color-picker.model.ts::ColorPickerTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ColorPickerTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "ColorPresetPickerConfig",
          "complexType": {
            "original": "ColorPresetPickerConfig",
            "resolved": "ColorPresetPickerConfig",
            "references": {
              "ColorPresetPickerConfig": {
                "location": "import",
                "path": "./models/np-color-picker.model",
                "id": "src/components/np-color-picker/models/np-color-picker.model.ts::ColorPresetPickerConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ColorPresetPickerConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Used to programaticaly open the color selector",
          "docsTags": []
        },
        {
          "name": "openColorSelector",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(focus?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "focus",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openColorSelector(focus?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "focus",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Used to programaticaly open the color selector",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Used to manually define focus on the component's input",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits the value of  the chosen color",
          "docsTags": []
        },
        {
          "event": "copyClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits the value of copied color",
          "docsTags": []
        },
        {
          "event": "panelHideEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits everytime the overlay is closed",
          "docsTags": []
        },
        {
          "event": "panelShowEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits everytime the overlay is opened",
          "docsTags": []
        },
        {
          "event": "sliderChangedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime an slider is being draged",
          "docsTags": []
        },
        {
          "event": "sliderDragEndedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime an slider stops being draged",
          "docsTags": []
        },
        {
          "event": "sliderDragStartedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime an slider starts being dragged",
          "docsTags": []
        },
        {
          "event": "variableChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emits the value of the chosen color variable from the variables list",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-input",
        "np-select-box",
        "np-color-picker-variable-item",
        "np-list-template",
        "np-color-picker-overlay",
        "np-selector"
      ],
      "dependencyGraph": {
        "np-color-picker": [
          "np-icon",
          "np-input",
          "np-select-box",
          "np-color-picker-variable-item",
          "np-list-template",
          "np-color-picker-overlay",
          "np-selector"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-select-box": [
          "np-text",
          "np-icon",
          "np-check-box",
          "np-select-item",
          "np-virtual-scroller",
          "np-chips",
          "np-input"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-select-item": [
          "np-check-box",
          "np-icon",
          "np-text"
        ],
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-color-picker-variable-item": [
          "np-text",
          "np-icon"
        ],
        "np-list-template": [
          "np-text",
          "np-button",
          "np-select-box",
          "np-icon",
          "np-input",
          "np-custom-list"
        ],
        "np-button": [
          "np-icon"
        ],
        "np-custom-list": [
          "np-filters-info",
          "np-icon",
          "np-virtual-scroller",
          "np-context-menu"
        ],
        "np-filters-info": [
          "np-icon",
          "np-text"
        ],
        "np-context-menu": [
          "np-icon",
          "np-text"
        ],
        "np-selector": [
          "np-text",
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-color-picker/np-color-picker-overlay/np-color-picker-overlay.tsx",
      "encapsulation": "shadow",
      "tag": "np-color-picker-overlay",
      "readme": "# np-color-picker-overlay\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alphaChannel",
          "type": "AlphaChannel.Disabled | AlphaChannel.Enabled",
          "complexType": {
            "original": "AlphaChannel",
            "resolved": "AlphaChannel.Disabled | AlphaChannel.Enabled",
            "references": {
              "AlphaChannel": {
                "location": "import",
                "path": "../models/np-color-picker.enum",
                "id": "src/components/np-color-picker/models/np-color-picker.enum.ts::AlphaChannel"
              }
            }
          },
          "mutable": false,
          "attr": "alphachannel",
          "reflectToAttr": false,
          "docs": "If alpha chanel is disabled, the opacity will disapear from the color picker",
          "docsTags": [],
          "default": "AlphaChannel.Enabled",
          "values": [
            {
              "type": "AlphaChannel.Disabled"
            },
            {
              "type": "AlphaChannel.Enabled"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color value of the color and alpha sliders",
          "docsTags": [],
          "default": "'#00e9ffff'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorMode",
          "type": "ColorMode.Color | ColorMode.Grayscale",
          "complexType": {
            "original": "ColorMode",
            "resolved": "ColorMode.Color | ColorMode.Grayscale",
            "references": {
              "ColorMode": {
                "location": "import",
                "path": "../models/np-color-picker.enum",
                "id": "src/components/np-color-picker/models/np-color-picker.enum.ts::ColorMode"
              }
            }
          },
          "mutable": false,
          "attr": "colormode",
          "reflectToAttr": false,
          "docs": "If the color mode is gray scale, it will be only possible to select gray scale color",
          "docsTags": [],
          "default": "ColorMode.Color",
          "values": [
            {
              "type": "ColorMode.Color"
            },
            {
              "type": "ColorMode.Grayscale"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorPickerHidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "colorpickerhidden",
          "reflectToAttr": false,
          "docs": "if true, the color picker's color, alpha slidders will be hidden",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "direction",
          "type": "Direction.horizontal | Direction.vertical",
          "complexType": {
            "original": "Direction",
            "resolved": "Direction.horizontal | Direction.vertical",
            "references": {
              "Direction": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Direction"
              }
            }
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "The direction of the overlay, it can be horizontal or vertical (default)",
          "docsTags": [],
          "default": "Direction.vertical",
          "values": [
            {
              "type": "Direction.horizontal"
            },
            {
              "type": "Direction.vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fallbackColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "fallbackcolor",
          "reflectToAttr": false,
          "docs": "The color picker's fallback color, this is usefull when the given color value is null or undefined",
          "docsTags": [],
          "default": "'#fff'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gapBetweenInput",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "gapbetweeninput",
          "reflectToAttr": false,
          "docs": "the gap between the input and the overlay",
          "docsTags": [],
          "default": "14",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayAditionalWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "overlayaditionalwidth",
          "reflectToAttr": false,
          "docs": "the aditional with of the overlay",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPosition",
          "type": "OverlayPosition.Auto | OverlayPosition.Bottom | OverlayPosition.Left | OverlayPosition.Right | OverlayPosition.Top",
          "complexType": {
            "original": "OverlayPosition",
            "resolved": "OverlayPosition.Auto | OverlayPosition.Bottom | OverlayPosition.Left | OverlayPosition.Right | OverlayPosition.Top",
            "references": {
              "OverlayPosition": {
                "location": "import",
                "path": "../../models/overlay-position.enum",
                "id": "src/components/models/overlay-position.enum.ts::OverlayPosition"
              }
            }
          },
          "mutable": false,
          "attr": "overlayposition",
          "reflectToAttr": false,
          "docs": "The position of the overlay",
          "docsTags": [],
          "values": [
            {
              "type": "OverlayPosition.Auto"
            },
            {
              "type": "OverlayPosition.Bottom"
            },
            {
              "type": "OverlayPosition.Left"
            },
            {
              "type": "OverlayPosition.Right"
            },
            {
              "type": "OverlayPosition.Top"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayPositionOffset",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "overlaypositionoffset",
          "reflectToAttr": false,
          "docs": "The position offset of the overlay",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "overlayvisible",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showOnlyPresets",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showonlypresets",
          "reflectToAttr": false,
          "docs": "if true, only the color presets will be visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "The state of the color picker overlay",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "targetElement",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "targetelement",
          "reflectToAttr": false,
          "docs": "the element that the overlay will be appended to",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "colorPickerChangeEvent",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime the color chamges",
          "docsTags": []
        },
        {
          "event": "colorPickerCloseEvent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime the color picker overlay is closed",
          "docsTags": []
        },
        {
          "event": "colorPickerOpenEvent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime the color picker overlay is opened",
          "docsTags": []
        },
        {
          "event": "sliderChangedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime an slider is being draged",
          "docsTags": []
        },
        {
          "event": "sliderDragEndedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime an slider stops being draged",
          "docsTags": []
        },
        {
          "event": "sliderDragStartedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime an slider starts being dragged",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-color-picker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "np-color-picker": [
          "np-color-picker-overlay"
        ]
      }
    },
    {
      "filePath": "src/components/np-color-picker/np-color-picker-variable-item/np-color-picker-variable-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-color-picker-variable-item",
      "readme": "# np-color-picker-variable-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "item",
          "type": "ColorPickerColorVariables",
          "complexType": {
            "original": "ColorPickerColorVariables",
            "resolved": "ColorPickerColorVariables",
            "references": {
              "ColorPickerColorVariables": {
                "location": "import",
                "path": "../models/np-color-picker.interface",
                "id": "src/components/np-color-picker/models/np-color-picker.interface.ts::ColorPickerColorVariables"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ColorPickerColorVariables"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "ColorPickerVariableItemZoomConfig",
          "complexType": {
            "original": "ColorPickerVariableItemZoomConfig",
            "resolved": "ColorPickerVariableItemZoomConfig",
            "references": {
              "ColorPickerVariableItemZoomConfig": {
                "location": "import",
                "path": "./models/np-color-picker-variable-item.model",
                "id": "src/components/np-color-picker/np-color-picker-variable-item/models/np-color-picker-variable-item.model.ts::ColorPickerVariableItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ColorPickerVariableItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-color-picker"
      ],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-color-picker-variable-item": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-color-picker": [
          "np-color-picker-variable-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-context-menu/np-context-menu.tsx",
      "encapsulation": "shadow",
      "tag": "np-context-menu",
      "readme": "# np-context-menu\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "menuOptions",
          "type": "MenuItem[]",
          "complexType": {
            "original": "Array<MenuItem>",
            "resolved": "MenuItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "MenuItem": {
                "location": "import",
                "path": "./models/np-context-menu.model",
                "id": "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "MenuItem[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "closeContextMenu",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "closeContextMenu() => Promise<void>",
          "parameters": [],
          "docs": "Close the menu on item click, on mouse left click or by being called programatically",
          "docsTags": []
        },
        {
          "name": "defineRef",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(ref: any) => Promise<void>",
            "parameters": [
              {
                "name": "ref",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "defineRef(ref: any) => Promise<void>",
          "parameters": [
            {
              "name": "ref",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "The method called to define the ref of the context menu's parent",
          "docsTags": []
        },
        {
          "name": "openContextMenu",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(ev: any) => Promise<void>",
            "parameters": [
              {
                "name": "ev",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openContextMenu(ev: any) => Promise<void>",
          "parameters": [
            {
              "name": "ev",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Opens the context menu, on mouse right click or by being called programatically",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "closeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the context menu is closed",
          "docsTags": []
        },
        {
          "event": "menuOptionSelectedEvent",
          "detail": "MenuItem",
          "bubbles": true,
          "complexType": {
            "original": "MenuItem",
            "resolved": "MenuItem",
            "references": {
              "MenuItem": {
                "location": "import",
                "path": "./models/np-context-menu.model",
                "id": "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an action of the context menu is clicked",
          "docsTags": []
        },
        {
          "event": "openEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the context menu is opened",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-custom-list"
      ],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-context-menu": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-custom-list": [
          "np-context-menu"
        ]
      }
    },
    {
      "filePath": "src/components/np-custom-list/np-custom-list.tsx",
      "encapsulation": "shadow",
      "tag": "np-custom-list",
      "readme": "# np-custom-list\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "changes",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "changes",
          "reflectToAttr": false,
          "docs": "If there are changes made in the detail, then set to true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configs",
          "type": "CustomListConfigs",
          "complexType": {
            "original": "CustomListConfigs",
            "resolved": "CustomListConfigs",
            "references": {
              "CustomListConfigs": {
                "location": "import",
                "path": "./models/np-custom-list.model",
                "id": "src/components/np-custom-list/models/np-custom-list.model.ts::CustomListConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "CustomListConfigs"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contextMenuItems",
          "type": "MenuItem[]",
          "complexType": {
            "original": "Array<MenuItem>",
            "resolved": "MenuItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "MenuItem": {
                "location": "import",
                "path": "../np-context-menu/models/np-context-menu.model",
                "id": "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The list's context menu items (if empty, the context menu won't appear)",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "MenuItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If true, the list will be disabled, meaning we are unable to select or drag items",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragConfigs",
          "type": "CustomListDragConfigs",
          "complexType": {
            "original": "CustomListDragConfigs",
            "resolved": "CustomListDragConfigs",
            "references": {
              "CustomListDragConfigs": {
                "location": "import",
                "path": "./models/np-custom-list.model",
                "id": "src/components/np-custom-list/models/np-custom-list.model.ts::CustomListDragConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "CustomListDragConfigs"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelect",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to validate an item selection",
          "docsTags": [],
          "default": "(...params) => {\r\n    return params ?? true;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectactive",
          "reflectToAttr": false,
          "docs": "Used to define if there is an item selection validation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelection",
          "type": "HandleSelection[]",
          "complexType": {
            "original": "Array<HandleSelection>",
            "resolved": "HandleSelection[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "HandleSelection": {
                "location": "import",
                "path": "./models/np-custom-list.model",
                "id": "src/components/np-custom-list/models/np-custom-list.model.ts::HandleSelection"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "This lets us add custom logic to clicking on an certain element of an item",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "HandleSelection[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": false,
          "docs": "Used to show or hide the list template",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEmptyList",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconemptylist",
          "reflectToAttr": false,
          "docs": "The icon that will apear when the list is empty",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ignoreChanges",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "ignorechanges",
          "reflectToAttr": false,
          "docs": "If true, the value selected will be ignored",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemTemplate",
          "type": "any",
          "complexType": {
            "original": "((viewPortItem: any, index: number) => VNode | string) | any",
            "resolved": "any",
            "references": {
              "VNode": {
                "location": "import",
                "path": "@stencil/core",
                "id": "node_modules::VNode"
              }
            }
          },
          "mutable": false,
          "attr": "itemtemplate",
          "reflectToAttr": false,
          "docs": "this callback will emit the index of the list item to be rendered",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "itemValidation",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Validations for item\r\nThis two callbacks validate if the item will be visible on the list",
          "docsTags": [
            {
              "name": "param",
              "text": "params item data"
            },
            {
              "name": "returns",
              "text": "true or false"
            }
          ],
          "default": "(...params) => {\r\n    return params ?? true;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The items that are gonna populate the list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lenghtToScroll",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "lenghttoscroll",
          "reflectToAttr": false,
          "docs": "The number of pixels that we are going to scroll when clicking on the scroller buttons",
          "docsTags": [],
          "default": "1500",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsConfigs",
          "type": "FiltersInfoModel",
          "complexType": {
            "original": "FiltersInfoModel",
            "resolved": "FiltersInfoModel",
            "references": {
              "FiltersInfoModel": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Configurations for the component that appears when there are no results",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsTranslations",
          "type": "FiltersInfoTranslations",
          "complexType": {
            "original": "FiltersInfoTranslations",
            "resolved": "FiltersInfoTranslations",
            "references": {
              "FiltersInfoTranslations": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollerButtons",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrollerbuttons",
          "reflectToAttr": false,
          "docs": "This adds scroller buttons to the list",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The selected elements of the items list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "topHeight",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "topheight",
          "reflectToAttr": false,
          "docs": "The total height of the list, used to position the scroller buttons correctly",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "virtuallScrollHasContent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "virtuallscrollhascontent",
          "reflectToAttr": false,
          "docs": "Used to indicate that there is content to populate the virtuall scroller",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getVirtualScrolConfig",
          "returns": {
            "type": "Promise<{ scrollType: \"scrollLeft\" | \"scrollTop\"; offsetMeasureType: \"offsetHeight\" | \"offsetWidth\"; }>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<{ scrollType: \"scrollLeft\" | \"scrollTop\"; offsetMeasureType: \"offsetHeight\" | \"offsetWidth\"; }>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<{ scrollType: \"scrollLeft\" | \"scrollTop\"; offsetMeasureType: \"offsetHeight\" | \"offsetWidth\"; }>"
          },
          "signature": "getVirtualScrolConfig() => Promise<{ scrollType: \"scrollLeft\" | \"scrollTop\"; offsetMeasureType: \"offsetHeight\" | \"offsetWidth\"; }>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "getVirtualScroll",
          "returns": {
            "type": "Promise<HTMLNpVirtualScrollerElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLNpVirtualScrollerElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLNpVirtualScrollerElement": {
                "location": "global",
                "id": "global::HTMLNpVirtualScrollerElement"
              }
            },
            "return": "Promise<HTMLNpVirtualScrollerElement>"
          },
          "signature": "getVirtualScroll() => Promise<HTMLNpVirtualScrollerElement>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "scrollerButtonsScrollTo",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(type: any) => Promise<void>",
            "parameters": [
              {
                "name": "type",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "scrollerButtonsScrollTo(type: any) => Promise<void>",
          "parameters": [
            {
              "name": "type",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "Scroll in the list",
          "docsTags": [
            {
              "name": "param",
              "text": "type"
            }
          ]
        },
        {
          "name": "select",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(direction: 'next' | 'previous') => Promise<void>",
            "parameters": [
              {
                "name": "direction",
                "type": "\"next\" | \"previous\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "select(direction: 'next' | 'previous') => Promise<void>",
          "parameters": [
            {
              "name": "direction",
              "type": "\"next\" | \"previous\"",
              "docs": ""
            }
          ],
          "docs": "Scroll to item before or after selected item",
          "docsTags": [
            {
              "name": "param",
              "text": "direction"
            },
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "contextMenuActionClickedEvent",
          "detail": "MenuItem",
          "bubbles": true,
          "complexType": {
            "original": "MenuItem",
            "resolved": "MenuItem",
            "references": {
              "MenuItem": {
                "location": "import",
                "path": "../np-context-menu/models/np-context-menu.model",
                "id": "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an action of the context menu is clicked",
          "docsTags": []
        },
        {
          "event": "contextMenuCloseEvent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the context menu is closed",
          "docsTags": []
        },
        {
          "event": "contextMenuOpenEvent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the context menu is opened",
          "docsTags": []
        },
        {
          "event": "doubleClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is double clicked",
          "docsTags": []
        },
        {
          "event": "dragStartEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user start dragging an item",
          "docsTags": []
        },
        {
          "event": "dragStopEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user stops dragging an item",
          "docsTags": []
        },
        {
          "event": "dropIntoListEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is dropped into this list",
          "docsTags": []
        },
        {
          "event": "dropOutsideListEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is dropped into another list",
          "docsTags": []
        },
        {
          "event": "ignoreChangesEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the ignore changes value changes",
          "docsTags": []
        },
        {
          "event": "scrollEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called whenever the user is scrolling",
          "docsTags": []
        },
        {
          "event": "scrollSizeChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the height of the virtuall scroller changes",
          "docsTags": []
        },
        {
          "event": "scrollStartEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user start srolling on the list",
          "docsTags": []
        },
        {
          "event": "scrollStopEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user Stops srolling on the list",
          "docsTags": []
        },
        {
          "event": "selectedChangeEvent",
          "detail": "any[]",
          "bubbles": true,
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is selected or deselected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-list-template"
      ],
      "dependencies": [
        "np-filters-info",
        "np-icon",
        "np-virtual-scroller",
        "np-context-menu"
      ],
      "dependencyGraph": {
        "np-custom-list": [
          "np-filters-info",
          "np-icon",
          "np-virtual-scroller",
          "np-context-menu"
        ],
        "np-filters-info": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-context-menu": [
          "np-icon",
          "np-text"
        ],
        "np-list-template": [
          "np-custom-list"
        ]
      }
    },
    {
      "filePath": "src/components/np-date-picker/np-date-picker.tsx",
      "encapsulation": "shadow",
      "tag": "np-date-picker",
      "readme": "# np-date-picker\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "appendTo",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "appendto",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ariaLabelledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "arialabelledby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoZIndex",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autozindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "baseZIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "basezindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "Sets icon clear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearToCurrentTime",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "cleartocurrenttime",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dateFormat",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dateformat",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'dd/mm/yy'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "datePickerButtonTranslations",
          "type": "DatePickerButtonTranslations",
          "complexType": {
            "original": "DatePickerButtonTranslations",
            "resolved": "DatePickerButtonTranslations",
            "references": {
              "DatePickerButtonTranslations": {
                "location": "import",
                "path": "./models/np-date-picker.models",
                "id": "src/components/np-date-picker/models/np-date-picker.models.ts::DatePickerButtonTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new DatePickerButtonTranslations(null)",
          "values": [
            {
              "type": "DatePickerButtonTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dateStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "date-style",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dateTemplate",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "datetemplate",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "datepickerConfig",
          "type": "DatePickerConfig",
          "complexType": {
            "original": "DatePickerConfig",
            "resolved": "DatePickerConfig",
            "references": {
              "DatePickerConfig": {
                "location": "import",
                "path": "./models/np-date-picker.models",
                "id": "src/components/np-date-picker/models/np-date-picker.models.ts::DatePickerConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "DatePickerConfig"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decadeTemplate",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "decadetemplate",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultTimeZone",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "defaulttimezone",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultValue",
          "type": "Date | number | string",
          "complexType": {
            "original": "string | Date | number",
            "resolved": "Date | number | string",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "attr": "defaultvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableicon",
          "reflectToAttr": false,
          "docs": "When the icon is disabled, it has the c-scale-10 color",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabledDates",
          "type": "Date[]",
          "complexType": {
            "original": "Array<Date>",
            "resolved": "Date[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabledDays",
          "type": "number[]",
          "complexType": {
            "original": "Array<number>",
            "resolved": "number[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "firstDayOfWeek",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "firstdayofweek",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusTrap",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focustrap",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "Hides clear icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'pi pi-calendar'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconarialabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "inputstyle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputstyleclass",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keepInvalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keepinvalid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxDateCount",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxdatecount",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numberOfMonths",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "numberofmonths",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayAditionalWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "overlayaditionalwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "panelstyle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "panelstyleclass",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'dd/mm/aaaa'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholderposition",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "responsiveOptions",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showPopupIfDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showpopupifdisabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showTime",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "boolean",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "styleclass",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabindex",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timezone",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "timezone",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translations",
          "type": "TranslationsDates",
          "complexType": {
            "original": "TranslationsDates",
            "resolved": "TranslationsDates",
            "references": {
              "TranslationsDates": {
                "location": "import",
                "path": "./models/np-date-picker.models",
                "id": "src/components/np-date-picker/models/np-date-picker.models.ts::TranslationsDates"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new TranslationsDates(null)",
          "values": [
            {
              "type": "TranslationsDates"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translationsKeys",
          "type": "TranslationKeys",
          "complexType": {
            "original": "TranslationKeys",
            "resolved": "TranslationKeys",
            "references": {
              "TranslationKeys": {
                "location": "import",
                "path": "./models/np-date-picker.models",
                "id": "src/components/np-date-picker/models/np-date-picker.models.ts::TranslationKeys"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new TranslationKeys(null)",
          "values": [
            {
              "type": "TranslationKeys"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "view",
          "type": "\"date\" | \"month\" | \"year\"",
          "complexType": {
            "original": "CalendarTypeView",
            "resolved": "\"date\" | \"month\" | \"year\"",
            "references": {
              "CalendarTypeView": {
                "location": "import",
                "path": "./models/np-date-picker.models",
                "id": "src/components/np-date-picker/models/np-date-picker.models.ts::CalendarTypeView"
              }
            }
          },
          "mutable": false,
          "attr": "view",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'date'",
          "values": [
            {
              "value": "date",
              "type": "string"
            },
            {
              "value": "month",
              "type": "string"
            },
            {
              "value": "year",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "yearRange",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "yearrange",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'1900:2065'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "DatePickerZoomConfig",
          "complexType": {
            "original": "DatePickerZoomConfig",
            "resolved": "DatePickerZoomConfig",
            "references": {
              "DatePickerZoomConfig": {
                "location": "import",
                "path": "./models/np-date-picker-zoom.model",
                "id": "src/components/np-date-picker/models/np-date-picker-zoom.model.ts::DatePickerZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new DatePickerZoomConfig(null)",
          "values": [
            {
              "type": "DatePickerZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Set focus on date picker",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "applyClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "blurEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "clearClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "closeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "enterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "monthChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "showEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "todayClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "valueChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "yearChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-input-mask",
        "np-icon",
        "np-input",
        "np-text",
        "np-button"
      ],
      "dependencyGraph": {
        "np-date-picker": [
          "np-input-mask",
          "np-icon",
          "np-input",
          "np-text",
          "np-button"
        ],
        "np-input-mask": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-button": [
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-detail-list/np-detail-item/np-detail-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-detail-item",
      "readme": "# np-detail-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alignItemsWithSVG",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "alignitemswithsvg",
          "reflectToAttr": false,
          "docs": "this property align items with the svg icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allItemsWithFavorite",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allitemswithfavorite",
          "reflectToAttr": false,
          "docs": "if true, all of the items have the favorite icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "colorPalette",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "colorpalette",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "content",
          "type": "DetailItemModel",
          "complexType": {
            "original": "DetailItemModel",
            "resolved": "DetailItemModel",
            "references": {
              "DetailItemModel": {
                "location": "import",
                "path": "../models/np-detail-item.model",
                "id": "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The content of the item",
          "docsTags": [],
          "values": [
            {
              "type": "DetailItemModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "detailItemType",
          "type": "1 | 2",
          "complexType": {
            "original": "1 | 2",
            "resolved": "1 | 2",
            "references": {}
          },
          "mutable": false,
          "attr": "detailitemtype",
          "reflectToAttr": false,
          "docs": "The design type of the item",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableTextDescription",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabletextdescription",
          "reflectToAttr": false,
          "docs": "This properties set visible or not description text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editItem",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "edititem",
          "reflectToAttr": false,
          "docs": "If true, the edit icon will apear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "favoriteIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "favoriteicon",
          "reflectToAttr": false,
          "docs": "Favorite icon",
          "docsTags": [],
          "default": "'icon_favorite'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "favoriteSide",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "favoriteside",
          "reflectToAttr": false,
          "docs": "the position of the favorite icon",
          "docsTags": [],
          "default": "ElementPosition.Right",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasSeparators",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hasseparators",
          "reflectToAttr": false,
          "docs": "Adds an line separating each item",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "The color of the icons",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconHoverColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconhovercolor",
          "reflectToAttr": false,
          "docs": "The hover color of the icons",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPin",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconpin",
          "reflectToAttr": false,
          "docs": "Pin icon",
          "docsTags": [],
          "default": "'icon_pin'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "imageBorder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "imageborder",
          "reflectToAttr": false,
          "docs": "if true, image has border",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inLine",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": false,
          "docs": "If true, the item will have inline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optiondescription",
          "reflectToAttr": false,
          "docs": "Define the detail item description property to be shown",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionlabel",
          "reflectToAttr": false,
          "docs": "Define the detail item label property to be shown",
          "docsTags": [],
          "default": "'label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pintToCheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pinttocheck",
          "reflectToAttr": false,
          "docs": "Adds pin icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "roundStyle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "roundstyle",
          "reflectToAttr": false,
          "docs": "Sets the item with an round style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "if true, the item is selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "selectedicon",
          "reflectToAttr": false,
          "docs": "If true and the item is selected, an icon will appear indicated that the item is selected",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selector",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selector",
          "reflectToAttr": false,
          "docs": "If true and selectionMode === 'single' or selectionMode === 'toggle', when an item is selected an icon will apear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "singleSelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "singleselection",
          "reflectToAttr": false,
          "docs": "Indicates that the list in which the item is contained, is of single selection",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "DetailItemSize.Large | DetailItemSize.Medium | DetailItemSize.Regular | DetailItemSize.Small | DetailItemSize.Xsmall",
          "complexType": {
            "original": "DetailItemSize",
            "resolved": "DetailItemSize.Large | DetailItemSize.Medium | DetailItemSize.Regular | DetailItemSize.Small | DetailItemSize.Xsmall",
            "references": {
              "DetailItemSize": {
                "location": "import",
                "path": "../models/np-detail-item.enum",
                "id": "src/components/np-detail-list/models/np-detail-item.enum.ts::DetailItemSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the item",
          "docsTags": [],
          "default": "DetailItemSize.Regular",
          "values": [
            {
              "type": "DetailItemSize.Large"
            },
            {
              "type": "DetailItemSize.Medium"
            },
            {
              "type": "DetailItemSize.Regular"
            },
            {
              "type": "DetailItemSize.Small"
            },
            {
              "type": "DetailItemSize.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visited",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "visited",
          "reflectToAttr": false,
          "docs": "if the item has been visited or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "DetailItemZoomConfig",
          "complexType": {
            "original": "DetailItemZoomConfig",
            "resolved": "DetailItemZoomConfig",
            "references": {
              "DetailItemZoomConfig": {
                "location": "import",
                "path": "../models/np-detail-item.model",
                "id": "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "DetailItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called whenever an item is clicked",
          "docsTags": []
        },
        {
          "event": "doubleClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called whenever an item is double clicked",
          "docsTags": []
        },
        {
          "event": "editClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called whenever the edit icon is clicked",
          "docsTags": []
        },
        {
          "event": "iconClickedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called whenever an icon is clicked",
          "docsTags": []
        },
        {
          "event": "pinClickedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called whenever the pin icon is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-detail-list"
      ],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-detail-item": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-detail-list": [
          "np-detail-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-detail-list/np-detail-list.tsx",
      "encapsulation": "shadow",
      "tag": "np-detail-list",
      "readme": "# np-detail-list\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "addButtonsLayout",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "addbuttonslayout",
          "reflectToAttr": false,
          "docs": "Enables buttons layout",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "alignItemsWithSVG",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "alignitemswithsvg",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allItemsWithFavorite",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allitemswithfavorite",
          "reflectToAttr": false,
          "docs": "if true, all of the items have the favorite icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonAdd",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "buttonadd",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonEdit",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "buttonedit",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonRemove",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "buttonremove",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "changes",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "changes",
          "reflectToAttr": false,
          "docs": "If there are changes made in the detail, then set this to true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeAfterOrder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closeafterorder",
          "reflectToAttr": false,
          "docs": "If set to true, order filter dropdown will close when chossing an option",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contextMenuItems",
          "type": "MenuItem[]",
          "complexType": {
            "original": "Array<MenuItem>",
            "resolved": "MenuItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "MenuItem": {
                "location": "import",
                "path": "../np-context-menu/models/np-context-menu.model",
                "id": "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The list's context menu items (if empty, the context menu won't appear)",
          "docsTags": [],
          "values": [
            {
              "type": "MenuItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "deselectAllDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "deselectalldisabled",
          "reflectToAttr": false,
          "docs": "Adds deselect all",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "detailItemStyleType",
          "type": "1 | 2",
          "complexType": {
            "original": "1 | 2",
            "resolved": "1 | 2",
            "references": {}
          },
          "mutable": false,
          "attr": "detailitemstyletype",
          "reflectToAttr": false,
          "docs": "The style of the detail item",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "detailItemZoomPercentageConfig",
          "type": "DetailItemZoomConfig",
          "complexType": {
            "original": "DetailItemZoomConfig",
            "resolved": "DetailItemZoomConfig",
            "references": {
              "DetailItemZoomConfig": {
                "location": "import",
                "path": "./models/np-detail-item.model",
                "id": "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Zoom Configurations for the detail item",
          "docsTags": [],
          "values": [
            {
              "type": "DetailItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "direction",
          "type": "Direction.horizontal | Direction.vertical",
          "complexType": {
            "original": "Direction",
            "resolved": "Direction.horizontal | Direction.vertical",
            "references": {
              "Direction": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Direction"
              }
            }
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "The direction that the list will display the items",
          "docsTags": [],
          "default": "Direction.vertical",
          "values": [
            {
              "type": "Direction.horizontal"
            },
            {
              "type": "Direction.vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableAddButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableaddbutton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableAllFields",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableallfields",
          "reflectToAttr": false,
          "docs": "If this property is set to true, the list will be completely disable\r\nMeaning that the user won't be able to do any action on the list (drag, filter, select item)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableEditButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableeditbutton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablefilter",
          "reflectToAttr": false,
          "docs": "Disables Select box order filter",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableFilterInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablefilterinput",
          "reflectToAttr": false,
          "docs": "Disables the list's filter input  Meaning we won't be able to use it to filter data on the list",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableItems",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableitems",
          "reflectToAttr": false,
          "docs": "If this property is set to true, the items will be disabled, meaning that the user won't be able to select or do any action on the item",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableListControls",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablelistcontrols",
          "reflectToAttr": false,
          "docs": "Disables drop down order filter to the list",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableRemoveButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableremovebutton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableSelectboxFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableselectboxfilter",
          "reflectToAttr": false,
          "docs": "Disables select box \"filter by item type\"",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableTextDescription",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabletextdescription",
          "reflectToAttr": false,
          "docs": "This properties set visible or not description text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editItem",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "edititem",
          "reflectToAttr": false,
          "docs": "If true, the edit icon will apear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "favoriteIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "favoriteicon",
          "reflectToAttr": false,
          "docs": "Favorite icon",
          "docsTags": [],
          "default": "'icon_favorite'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "favoriteSide",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "favoriteside",
          "reflectToAttr": false,
          "docs": "the position of the favorite icon",
          "docsTags": [],
          "default": "ElementPosition.Right",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filter",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "Sets a value to the filter input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterEnter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filterenter",
          "reflectToAttr": false,
          "docs": "if true filter text will only be applied on enter",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filterinput",
          "reflectToAttr": false,
          "docs": "Adds filter input",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterProperties",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The properties used to filter an item",
          "docsTags": [],
          "default": "['label']",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterTranslations",
          "type": "ListTemplateFilterTranslations",
          "complexType": {
            "original": "ListTemplateFilterTranslations",
            "resolved": "ListTemplateFilterTranslations",
            "references": {
              "ListTemplateFilterTranslations": {
                "location": "import",
                "path": "../np-list-template/models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateFilterTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The list's filter translations",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateFilterTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelect",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to validate an item selection",
          "docsTags": [],
          "default": "(...params) => {\r\n    return params ?? true;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectactive",
          "reflectToAttr": false,
          "docs": "Used to define if there is an item selection validation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectDeselect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectdeselect",
          "reflectToAttr": false,
          "docs": "if true we will handle the select and deselect all buttons click",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasPlaceholderItem",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hasplaceholderitem",
          "reflectToAttr": false,
          "docs": "if true and there are no select items on the list, a placeholder will appear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasSeparators",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hasseparators",
          "reflectToAttr": false,
          "docs": "Adds an line separating each item",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headerdescription",
          "reflectToAttr": false,
          "docs": "List Description",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerGap",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headergap",
          "reflectToAttr": false,
          "docs": "Gap between list title and description",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headertitle",
          "reflectToAttr": false,
          "docs": "List Title",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "The color of the icons",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconHoverColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconhovercolor",
          "reflectToAttr": false,
          "docs": "The hover color of the icons",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconNoResults",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconnoresults",
          "reflectToAttr": false,
          "docs": "The icon that appears on the component that appears when there are no results",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPin",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconpin",
          "reflectToAttr": false,
          "docs": "Pin icon",
          "docsTags": [],
          "default": "'icon_pin'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifiers",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Array of Identifiers for comparation between items",
          "docsTags": [],
          "default": "['id']",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "imageBorder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "imageborder",
          "reflectToAttr": false,
          "docs": "if true, image has border",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inLine",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": false,
          "docs": "If true, the item will have inline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemHeight",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "itemheight",
          "reflectToAttr": false,
          "docs": "The height of the list items, if the value is not set and it's an vertical list or if it's a resizable list, the height will be calculated, it's recomented in this case, if possible to specify the height, to improve performance",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "itemwidth",
          "reflectToAttr": false,
          "docs": "The width of the list items, if the value is not set and it's an horizontal list or if it's a resizable list, the width will be calculated, it's recomented in this case, if possible to specify the width, to improve performance",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "DetailItemModel[]",
          "complexType": {
            "original": "DetailItemModel[]",
            "resolved": "DetailItemModel[]",
            "references": {
              "DetailItemModel": {
                "location": "import",
                "path": "./models/np-detail-item.model",
                "id": "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemModel"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The items that are gonna populate the list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "DetailItemModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemsPerGroup",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "itemspergroup",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "listControls",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "listcontrols",
          "reflectToAttr": false,
          "docs": "Adds drop down order filter to the list",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "listTemplateZoomPercentageConfig",
          "type": "ListTemplateZoomConfig",
          "complexType": {
            "original": "ListTemplateZoomConfig",
            "resolved": "ListTemplateZoomConfig",
            "references": {
              "ListTemplateZoomConfig": {
                "location": "import",
                "path": "../np-list-template/models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Zoom Configurations for the list template",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiSelectWithClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiselectwithclick",
          "reflectToAttr": false,
          "docs": "lets the user select multiple items with click",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsConfigs",
          "type": "FiltersInfoModel",
          "complexType": {
            "original": "FiltersInfoModel",
            "resolved": "FiltersInfoModel",
            "references": {
              "FiltersInfoModel": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Configurations for the component that appears when there are no results",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsTranslations",
          "type": "FiltersInfoTranslations",
          "complexType": {
            "original": "FiltersInfoTranslations",
            "resolved": "FiltersInfoTranslations",
            "references": {
              "FiltersInfoTranslations": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Translations for the component that appears when there are no results",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optiondescription",
          "reflectToAttr": false,
          "docs": "Define the detail item description property to be shown",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionlabel",
          "reflectToAttr": false,
          "docs": "Define the detail item label property to be shown",
          "docsTags": [],
          "default": "'label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orderOption",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "1 | 2 | 3 | 4 | 5 | 6",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {}
          },
          "mutable": true,
          "attr": "orderoption",
          "reflectToAttr": false,
          "docs": "1- A-Z ; 2- Z-A; 3 - Most recent Date; 4- Eariest Date; 5- More Values; 6- Less Values  null - No order",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayAditionalWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "overlayaditionalwidth",
          "reflectToAttr": false,
          "docs": "This properties add an aditional width to the select box overlay",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pintToCheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pinttocheck",
          "reflectToAttr": false,
          "docs": "Adds pin icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderConfig",
          "type": "DetailListPlaceholderConfig",
          "complexType": {
            "original": "DetailListPlaceholderConfig",
            "resolved": "DetailListPlaceholderConfig",
            "references": {
              "DetailListPlaceholderConfig": {
                "location": "import",
                "path": "./models/np-detail-list.model",
                "id": "src/components/np-detail-list/models/np-detail-list.model.ts::DetailListPlaceholderConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "DetailListPlaceholderConfig"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonlySelectboxFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonlyselectboxfilter",
          "reflectToAttr": false,
          "docs": "Sets select box \"filter by item type\" as readolny",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "roundStyle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "roundstyle",
          "reflectToAttr": false,
          "docs": "Sets the item with an round style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectAllDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectalldisabled",
          "reflectToAttr": false,
          "docs": "Adds select all",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectBoxFilterProperties",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Filter Select Box filter Options - For ex: ['id', 'attributeTypeId'], the items will be filtered based on their \"attributeTypeId\" being equal to the \"id\" of the Filter Select Box items",
          "docsTags": [],
          "default": "[['id', 'attributeTypeId']]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOptions",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Filter select box options list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectWhenFiltering",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectwhenfiltering",
          "reflectToAttr": false,
          "docs": "If selection mode is 'toggle' or 'multipleToggle', this property defines if an item should be selected when filtering",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectboxFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectboxfilter",
          "reflectToAttr": false,
          "docs": "Adds select box filter by item type",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectboxHasSearch",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectboxhassearch",
          "reflectToAttr": false,
          "docs": "Enables select box filter input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectboxLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectboxlabel",
          "reflectToAttr": false,
          "docs": "Filter select box Label translation",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectboxOptionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectboxoptionlabel",
          "reflectToAttr": false,
          "docs": "Filter select box option",
          "docsTags": [],
          "default": "'name'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectboxSelectionMode",
          "type": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../models/selection-mode.enum",
                "id": "src/components/models/selection-mode.enum.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectboxselectionmode",
          "reflectToAttr": false,
          "docs": "The Selection mode for the Filter by item type select box",
          "docsTags": [],
          "default": "SelectionMode.Single",
          "values": [
            {
              "type": "SelectionMode.Multiple"
            },
            {
              "type": "SelectionMode.MultipleToggle"
            },
            {
              "type": "SelectionMode.Single"
            },
            {
              "type": "SelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "DetailItemModel[]",
          "complexType": {
            "original": "DetailItemModel[]",
            "resolved": "DetailItemModel[]",
            "references": {
              "DetailItemModel": {
                "location": "import",
                "path": "./models/np-detail-item.model",
                "id": "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemModel"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The selected items of the list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "DetailItemModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedOption",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Filter select box selected option",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../models/selection-mode.enum",
                "id": "src/components/models/selection-mode.enum.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "Selection mode for list",
          "docsTags": [],
          "default": "SelectionMode.Single",
          "values": [
            {
              "type": "SelectionMode.Multiple"
            },
            {
              "type": "SelectionMode.MultipleToggle"
            },
            {
              "type": "SelectionMode.Single"
            },
            {
              "type": "SelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selector",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selector",
          "reflectToAttr": false,
          "docs": "If true and selectionMode === 'single' or selectionMode === 'toggle', when an item is selected an icon will apear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDeselectAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showdeselectall",
          "reflectToAttr": false,
          "docs": "defines the deselect all button as enabled (true) or disabled (false)",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showfilter",
          "reflectToAttr": false,
          "docs": "Enables Select box order filter",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showFilterDates",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showfilterdates",
          "reflectToAttr": false,
          "docs": "If set to true, the we will be to filter items by date in the order filter dropdown/select boc",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showFilterValues",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showfiltervalues",
          "reflectToAttr": false,
          "docs": "If set to true, the we will be to filter items by values in the order filter dropdown/select boc",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showSelectAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showselectall",
          "reflectToAttr": false,
          "docs": "defines the select all button as enabled (true) or disabled (false)",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "DetailItemSize.Large | DetailItemSize.Medium | DetailItemSize.Regular | DetailItemSize.Small | DetailItemSize.Xsmall",
          "complexType": {
            "original": "DetailItemSize",
            "resolved": "DetailItemSize.Large | DetailItemSize.Medium | DetailItemSize.Regular | DetailItemSize.Small | DetailItemSize.Xsmall",
            "references": {
              "DetailItemSize": {
                "location": "import",
                "path": "./models/np-detail-item.enum",
                "id": "src/components/np-detail-list/models/np-detail-item.enum.ts::DetailItemSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the item",
          "docsTags": [],
          "default": "DetailItemSize.Regular",
          "values": [
            {
              "type": "DetailItemSize.Large"
            },
            {
              "type": "DetailItemSize.Medium"
            },
            {
              "type": "DetailItemSize.Regular"
            },
            {
              "type": "DetailItemSize.Small"
            },
            {
              "type": "DetailItemSize.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggleStartWithSelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "togglestartwithselected",
          "reflectToAttr": false,
          "docs": "If selection mode is 'toggle' or 'multipleToggle', this property defines if the list should start with a selected item",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translations",
          "type": "DetailListMainTranslations",
          "complexType": {
            "original": "DetailListMainTranslations",
            "resolved": "DetailListMainTranslations",
            "references": {
              "DetailListMainTranslations": {
                "location": "import",
                "path": "./models/np-detail-list.model",
                "id": "src/components/np-detail-list/models/np-detail-list.model.ts::DetailListMainTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "DetailListMainTranslations"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "addButtonEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Add button is clicked",
          "docsTags": []
        },
        {
          "event": "editButtonEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Edit button is clicked",
          "docsTags": []
        },
        {
          "event": "editClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the edit icon is clicked",
          "docsTags": []
        },
        {
          "event": "filterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the list is filtered or ordered",
          "docsTags": []
        },
        {
          "event": "iconClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an icon is clicked",
          "docsTags": []
        },
        {
          "event": "itemDoubleClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the item is double clicked",
          "docsTags": []
        },
        {
          "event": "orderChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the item order changes",
          "docsTags": []
        },
        {
          "event": "pinClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the pin icon is clicked",
          "docsTags": []
        },
        {
          "event": "removeButtonEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Remove button is clicked",
          "docsTags": []
        },
        {
          "event": "selectBoxChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when items are filtered by type",
          "docsTags": []
        },
        {
          "event": "selectBoxClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an select box is clicked",
          "docsTags": []
        },
        {
          "event": "selectedChangeEvent",
          "detail": "DetailItemModel[]",
          "bubbles": true,
          "complexType": {
            "original": "DetailItemModel[]",
            "resolved": "DetailItemModel[]",
            "references": {
              "DetailItemModel": {
                "location": "import",
                "path": "./models/np-detail-item.model",
                "id": "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemModel"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is selected or deselected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-detail-item",
        "np-list-template",
        "np-text"
      ],
      "dependencyGraph": {
        "np-detail-list": [
          "np-detail-item",
          "np-list-template",
          "np-text"
        ],
        "np-detail-item": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-list-template": [
          "np-text",
          "np-button",
          "np-select-box",
          "np-icon",
          "np-input",
          "np-custom-list"
        ],
        "np-button": [
          "np-icon"
        ],
        "np-select-box": [
          "np-text",
          "np-icon",
          "np-check-box",
          "np-select-item",
          "np-virtual-scroller",
          "np-chips",
          "np-input"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-select-item": [
          "np-check-box",
          "np-icon",
          "np-text"
        ],
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-custom-list": [
          "np-filters-info",
          "np-icon",
          "np-virtual-scroller",
          "np-context-menu"
        ],
        "np-filters-info": [
          "np-icon",
          "np-text"
        ],
        "np-context-menu": [
          "np-icon",
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-filters-info/np-filters-info.tsx",
      "encapsulation": "shadow",
      "tag": "np-filters-info",
      "readme": "# nc-filters-info\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "config",
          "type": "FiltersInfoModel",
          "complexType": {
            "original": "FiltersInfoModel",
            "resolved": "FiltersInfoModel",
            "references": {
              "FiltersInfoModel": {
                "location": "import",
                "path": "./models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new FiltersInfoModel()",
          "values": [
            {
              "type": "FiltersInfoModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "sets the icon to be displayed",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translations",
          "type": "FiltersInfoTranslations",
          "complexType": {
            "original": "FiltersInfoTranslations",
            "resolved": "FiltersInfoTranslations",
            "references": {
              "FiltersInfoTranslations": {
                "location": "import",
                "path": "./models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new FiltersInfoTranslations()",
          "values": [
            {
              "type": "FiltersInfoTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "FiltersInfoZoomConfig",
          "complexType": {
            "original": "FiltersInfoZoomConfig",
            "resolved": "FiltersInfoZoomConfig",
            "references": {
              "FiltersInfoZoomConfig": {
                "location": "import",
                "path": "./models/np-filters-info-zoom.model",
                "id": "src/components/np-filters-info/models/np-filters-info-zoom.model.ts::FiltersInfoZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-custom-list",
        "np-side-view"
      ],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-filters-info": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-custom-list": [
          "np-filters-info"
        ],
        "np-side-view": [
          "np-filters-info"
        ]
      }
    },
    {
      "filePath": "src/components/np-icon/np-icon.tsx",
      "encapsulation": "shadow",
      "tag": "np-icon",
      "readme": "# np-icon\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "States | Color",
          "complexType": {
            "original": "Color | States",
            "resolved": "States | Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              },
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color of the icon",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "States"
            },
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "customcolor",
          "reflectToAttr": false,
          "docs": "Sets svg color with any color in string type (ex: used when color comes from API)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customHoverColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "customhovercolor",
          "reflectToAttr": false,
          "docs": "Sets svg hover color with any color in string type (ex: used when color comes from API)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customStyles",
          "type": "CustomStyles[]",
          "complexType": {
            "original": "Array<CustomStyles>",
            "resolved": "CustomStyles[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "CustomStyles": {
                "location": "import",
                "path": "./models/np-icon.model",
                "id": "src/components/np-icon/models/np-icon.model.ts::CustomStyles"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of custom styles to be applied to the icon",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "CustomStyles[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fillColor",
          "type": "States | Color",
          "complexType": {
            "original": "Color | States",
            "resolved": "States | Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              },
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "fillcolor",
          "reflectToAttr": false,
          "docs": "The fill color of the icon",
          "docsTags": [],
          "values": [
            {
              "type": "States"
            },
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoverColor",
          "type": "States | Color",
          "complexType": {
            "original": "Color | States",
            "resolved": "States | Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              },
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "hovercolor",
          "reflectToAttr": false,
          "docs": "The hover color of the icon",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "States"
            },
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The name of the icon\r\nBased on the icon name, we will get the path of the icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconToolTipWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "icontooltipwidth",
          "reflectToAttr": false,
          "docs": "The width of the tooltip",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconTooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icontooltip",
          "reflectToAttr": false,
          "docs": "The text to be displayed in the tooltip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconTooltipColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "icontooltipcolor",
          "reflectToAttr": false,
          "docs": "The color of the tooltip",
          "docsTags": [],
          "default": "Color.primary_dark",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconTooltipEvent",
          "type": "TooltipEvent.Focus | TooltipEvent.Hover | TooltipEvent.Label",
          "complexType": {
            "original": "TooltipEvent",
            "resolved": "TooltipEvent.Focus | TooltipEvent.Hover | TooltipEvent.Label",
            "references": {
              "TooltipEvent": {
                "location": "import",
                "path": "../np-tool-tip/models/np-tool-tip.enum",
                "id": "src/components/np-tool-tip/models/np-tool-tip.enum.ts::TooltipEvent"
              }
            }
          },
          "mutable": false,
          "attr": "icontooltipevent",
          "reflectToAttr": false,
          "docs": "The type of tooltip event",
          "docsTags": [],
          "default": "TooltipEvent.Label",
          "values": [
            {
              "type": "TooltipEvent.Focus"
            },
            {
              "type": "TooltipEvent.Hover"
            },
            {
              "type": "TooltipEvent.Label"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconTooltipPosition",
          "type": "TooltipPosition.Bottom | TooltipPosition.Left | TooltipPosition.Right | TooltipPosition.Top",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "TooltipPosition.Bottom | TooltipPosition.Left | TooltipPosition.Right | TooltipPosition.Top",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../models/tooltip-position.enum",
                "id": "src/components/models/tooltip-position.enum.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "icontooltipposition",
          "reflectToAttr": false,
          "docs": "The position for the tooltip to open from (if there isn't space avaiable, the tooltip will open from another position)",
          "docsTags": [],
          "default": "TooltipPosition.Right",
          "values": [
            {
              "type": "TooltipPosition.Bottom"
            },
            {
              "type": "TooltipPosition.Left"
            },
            {
              "type": "TooltipPosition.Right"
            },
            {
              "type": "TooltipPosition.Top"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ignoreFill",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "ignorefill",
          "reflectToAttr": false,
          "docs": "Makes the icon ignore the default color",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preload",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "preload",
          "reflectToAttr": false,
          "docs": "Preload icon",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Set size accept numbers",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "focusElement",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "focusElement() => Promise<void>",
          "parameters": [],
          "docs": "This public function is used to focus the the svg icon",
          "docsTags": []
        },
        {
          "name": "getElement",
          "returns": {
            "type": "Promise<HTMLDivElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLDivElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLDivElement": {
                "location": "global",
                "id": "global::HTMLDivElement"
              }
            },
            "return": "Promise<HTMLDivElement>"
          },
          "signature": "getElement() => Promise<HTMLDivElement>",
          "parameters": [],
          "docs": "This public function is used to return the reference of the svg icon",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-accordion-item",
        "np-accordion-list",
        "np-action-bar",
        "np-action-bar-item",
        "np-alert",
        "np-axis-selector",
        "np-basic-list-item",
        "np-button",
        "np-button-group",
        "np-card-list-item",
        "np-check-box",
        "np-chips",
        "np-color-picker",
        "np-color-picker-variable-item",
        "np-context-menu",
        "np-custom-list",
        "np-date-picker",
        "np-detail-item",
        "np-filters-info",
        "np-info-box",
        "np-input",
        "np-input-group",
        "np-input-mask",
        "np-input-rounded",
        "np-input-selector",
        "np-input-spinner",
        "np-input-time-spinner",
        "np-keyboard",
        "np-list-item",
        "np-list-template",
        "np-menu-bar",
        "np-popup",
        "np-radio-button",
        "np-select-box",
        "np-select-item",
        "np-selector",
        "np-side-tab",
        "np-side-view",
        "np-split",
        "np-state-card-item",
        "np-stepper",
        "np-stepper-bar-item",
        "np-tabview-nav",
        "np-textarea",
        "np-textarea-chips",
        "np-tip",
        "np-toast-message-item",
        "np-tree-card-grid",
        "np-tree-node",
        "np-tri-checkbox"
      ],
      "dependencies": [
        "np-tool-tip"
      ],
      "dependencyGraph": {
        "np-icon": [
          "np-tool-tip"
        ],
        "np-accordion-item": [
          "np-icon"
        ],
        "np-accordion-list": [
          "np-icon"
        ],
        "np-action-bar": [
          "np-icon"
        ],
        "np-action-bar-item": [
          "np-icon"
        ],
        "np-alert": [
          "np-icon"
        ],
        "np-axis-selector": [
          "np-icon"
        ],
        "np-basic-list-item": [
          "np-icon"
        ],
        "np-button": [
          "np-icon"
        ],
        "np-button-group": [
          "np-icon"
        ],
        "np-card-list-item": [
          "np-icon"
        ],
        "np-check-box": [
          "np-icon"
        ],
        "np-chips": [
          "np-icon"
        ],
        "np-color-picker": [
          "np-icon"
        ],
        "np-color-picker-variable-item": [
          "np-icon"
        ],
        "np-context-menu": [
          "np-icon"
        ],
        "np-custom-list": [
          "np-icon"
        ],
        "np-date-picker": [
          "np-icon"
        ],
        "np-detail-item": [
          "np-icon"
        ],
        "np-filters-info": [
          "np-icon"
        ],
        "np-info-box": [
          "np-icon"
        ],
        "np-input": [
          "np-icon"
        ],
        "np-input-group": [
          "np-icon"
        ],
        "np-input-mask": [
          "np-icon"
        ],
        "np-input-rounded": [
          "np-icon"
        ],
        "np-input-selector": [
          "np-icon"
        ],
        "np-input-spinner": [
          "np-icon"
        ],
        "np-input-time-spinner": [
          "np-icon"
        ],
        "np-keyboard": [
          "np-icon"
        ],
        "np-list-item": [
          "np-icon"
        ],
        "np-list-template": [
          "np-icon"
        ],
        "np-menu-bar": [
          "np-icon"
        ],
        "np-popup": [
          "np-icon"
        ],
        "np-radio-button": [
          "np-icon"
        ],
        "np-select-box": [
          "np-icon"
        ],
        "np-select-item": [
          "np-icon"
        ],
        "np-selector": [
          "np-icon"
        ],
        "np-side-tab": [
          "np-icon"
        ],
        "np-side-view": [
          "np-icon"
        ],
        "np-split": [
          "np-icon"
        ],
        "np-state-card-item": [
          "np-icon"
        ],
        "np-stepper": [
          "np-icon"
        ],
        "np-stepper-bar-item": [
          "np-icon"
        ],
        "np-tabview-nav": [
          "np-icon"
        ],
        "np-textarea": [
          "np-icon"
        ],
        "np-textarea-chips": [
          "np-icon"
        ],
        "np-tip": [
          "np-icon"
        ],
        "np-toast-message-item": [
          "np-icon"
        ],
        "np-tree-card-grid": [
          "np-icon"
        ],
        "np-tree-node": [
          "np-icon"
        ],
        "np-tri-checkbox": [
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-info-box/np-info-box.tsx",
      "encapsulation": "none",
      "tag": "np-info-box",
      "readme": "# np-info-box\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "clickable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clickable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "date",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "date",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "docValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "docvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "documentName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "documentname",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "documentType",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "documenttype",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "entityName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "entityname",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "InfoBoxZoomConfig",
          "complexType": {
            "original": "InfoBoxZoomConfig",
            "resolved": "InfoBoxZoomConfig",
            "references": {
              "InfoBoxZoomConfig": {
                "location": "import",
                "path": "./models/np-info-box-zoom.model",
                "id": "src/components/np-info-box/models/np-info-box-zoom.model.ts::InfoBoxZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "InfoBoxZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "click component event",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-info-box": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-input/np-input.tsx",
      "encapsulation": "shadow",
      "tag": "np-input",
      "readme": "# np-input\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "InputActions.counter | InputActions.icon | InputActions.lock | InputActions.moreoptions | InputActions.reset | InputActions.tags | InputActions.toolTip",
          "complexType": {
            "original": "InputActions",
            "resolved": "InputActions.counter | InputActions.icon | InputActions.lock | InputActions.moreoptions | InputActions.reset | InputActions.tags | InputActions.toolTip",
            "references": {
              "InputActions": {
                "location": "import",
                "path": "./models/np-input.enum",
                "id": "src/components/np-input/models/np-input.enum.ts::InputActions"
              }
            }
          },
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Sets Actions: tooltip, tags, counter, lock, reset, moreoptions, icon",
          "docsTags": [],
          "values": [
            {
              "type": "InputActions.counter"
            },
            {
              "type": "InputActions.icon"
            },
            {
              "type": "InputActions.lock"
            },
            {
              "type": "InputActions.moreoptions"
            },
            {
              "type": "InputActions.reset"
            },
            {
              "type": "InputActions.tags"
            },
            {
              "type": "InputActions.toolTip"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Sets autocomplete",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Sets autofocus",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "Sets icon clear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customPaddingLeft",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "custompaddingleft",
          "reflectToAttr": false,
          "docs": "Custom padding on the left side",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customPaddingRight",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "custompaddingright",
          "reflectToAttr": false,
          "docs": "Custom padding on the right side",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customSpacingLeft",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "customspacingleft",
          "reflectToAttr": false,
          "docs": "Custom left css property (icons)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customSpacingRight",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "customspacingright",
          "reflectToAttr": false,
          "docs": "Custom right css property (icons)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableEyeClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableeyeclick",
          "reflectToAttr": false,
          "docs": "Disable eye click for input of type password",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusAfterClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focusafterclear",
          "reflectToAttr": false,
          "docs": "Sets tooltip focus",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullHeight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fullheight",
          "reflectToAttr": false,
          "docs": "if true, the input will ocupy 100% of the parent height and not just the height of it's content",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "If true, the error cross won't show up",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Sets icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "iconposition",
          "reflectToAttr": false,
          "docs": "Sets icon position: Left or Right",
          "docsTags": [],
          "default": "ElementPosition.Left",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indexTab",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "indextab",
          "reflectToAttr": false,
          "docs": "The tab index of the input",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lockNumber",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "locknumber",
          "reflectToAttr": false,
          "docs": "Sets lock number",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Sets max number of characters",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noBorder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "noborder",
          "reflectToAttr": false,
          "docs": "Sets no border around input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Sets orientation",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Sets outline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Sets placeholder text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderPosition",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "placeholderposition",
          "reflectToAttr": false,
          "docs": "Sets placeholder position: Left, Right",
          "docsTags": [],
          "default": "ElementPosition.Left",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholdervisible",
          "reflectToAttr": false,
          "docs": "Sets if the placeholder is visible",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preventKeys",
          "type": "string[]",
          "complexType": {
            "original": "Array<string>",
            "resolved": "string[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Sets prevent keys",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Behaviour states",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Sets if the input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size: Xsmall, Small, Regular, Medium, Large, Xlarge",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "States",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "stateAfterClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "stateafterclear",
          "reflectToAttr": false,
          "docs": "Sets state after clear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "Sets message for the state",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tagLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "taglabel",
          "reflectToAttr": false,
          "docs": "Sets tag",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "templateLeft",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "templateleft",
          "reflectToAttr": false,
          "docs": "Used if we want to define an custom component inside the input on the left or right side",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "templateRight",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "templateright",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textCentered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "textcentered",
          "reflectToAttr": false,
          "docs": "Sets text centered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toolTipWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipwidth",
          "reflectToAttr": false,
          "docs": "Sets tooltip width",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Sets tooltip value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "InputTypes.DoubleDigit | InputTypes.Email | InputTypes.Number | InputTypes.Password | InputTypes.Text",
          "complexType": {
            "original": "InputTypes",
            "resolved": "InputTypes.DoubleDigit | InputTypes.Email | InputTypes.Number | InputTypes.Password | InputTypes.Text",
            "references": {
              "InputTypes": {
                "location": "import",
                "path": "../models/input-types.enum",
                "id": "src/components/models/input-types.enum.ts::InputTypes"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Sets input type: Text, Password, Number, Email, DoubleDigit",
          "docsTags": [],
          "default": "InputTypes.Text",
          "values": [
            {
              "type": "InputTypes.DoubleDigit"
            },
            {
              "type": "InputTypes.Email"
            },
            {
              "type": "InputTypes.Number"
            },
            {
              "type": "InputTypes.Password"
            },
            {
              "type": "InputTypes.Text"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unsetBackground",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "unsetbackground",
          "reflectToAttr": false,
          "docs": "Sets no background",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Sets value",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "InputZoomConfig",
          "complexType": {
            "original": "InputZoomConfig",
            "resolved": "InputZoomConfig",
            "references": {
              "InputZoomConfig": {
                "location": "import",
                "path": "./models/np-input-zoom.model",
                "id": "src/components/np-input/models/np-input-zoom.model.ts::InputZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new InputZoomConfig()",
          "values": [
            {
              "type": "InputZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "_updateDefaultValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(updatedString: string) => Promise<void>",
            "parameters": [
              {
                "name": "updatedString",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_updateDefaultValue(updatedString: string) => Promise<void>",
          "parameters": [
            {
              "name": "updatedString",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "getElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "isVertical",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<boolean>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "isVertical() => Promise<boolean>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "clearEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "dropEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "enterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "focusChangeEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "keyPressEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "pasteEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-chips",
        "np-color-picker",
        "np-date-picker",
        "np-input-selector",
        "np-keyboard",
        "np-list-template",
        "np-primary-tree",
        "np-select-box",
        "np-side-tab",
        "np-side-view",
        "np-textarea-chips",
        "np-tree-card-grid"
      ],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-chips": [
          "np-input"
        ],
        "np-color-picker": [
          "np-input"
        ],
        "np-date-picker": [
          "np-input"
        ],
        "np-input-selector": [
          "np-input"
        ],
        "np-keyboard": [
          "np-input"
        ],
        "np-list-template": [
          "np-input"
        ],
        "np-primary-tree": [
          "np-input"
        ],
        "np-select-box": [
          "np-input"
        ],
        "np-side-tab": [
          "np-input"
        ],
        "np-side-view": [
          "np-input"
        ],
        "np-textarea-chips": [
          "np-input"
        ],
        "np-tree-card-grid": [
          "np-input"
        ]
      }
    },
    {
      "filePath": "src/components/np-input-file/np-input-file.tsx",
      "encapsulation": "shadow",
      "tag": "np-input-file",
      "readme": "# np-input-file\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'.svg'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionType",
          "type": "\"multiple\" | \"single\"",
          "complexType": {
            "original": "'single' | 'multiple'",
            "resolved": "\"multiple\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selectiontype",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'single'",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "openFileExplorer",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openFileExplorer() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/np-input-group/np-input-group.tsx",
      "encapsulation": "shadow",
      "tag": "np-input-group",
      "readme": "# np-input-group\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "If true, when writing, words will be suggested by the browser",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "if true, when the input group receives focus, this component will automatically focus on the input component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "Sets icon clear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disabled state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdown",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dropdown",
          "reflectToAttr": false,
          "docs": "If true, an Dropdown will apear when clicking on the input group",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "If true, the error cross won't show up",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Sets action icon",
          "docsTags": [],
          "default": "'icon_list'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconright",
          "reflectToAttr": false,
          "docs": "Sets icon on the right",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "The max number of characters that this input group can have",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Sets outline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The placeholder of the input group",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popup",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "popup",
          "reflectToAttr": false,
          "docs": "Sets style when component is used to open pop up",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Readonly state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If true, the '*' character will be set to tell the user that this input must have an value",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reverseIcons",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "reverseicons",
          "reflectToAttr": false,
          "docs": "Sets reverse icons style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "This will change the size of the icons and text",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "This variable applies an state to this component, if null not state is applied",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "Defines an message for the state",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textAdd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "textadd",
          "reflectToAttr": false,
          "docs": "The translation of the dropdown's add button",
          "docsTags": [],
          "default": "'Add'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textRemove",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "textremove",
          "reflectToAttr": false,
          "docs": "The translation of the dropdown's remove button",
          "docsTags": [],
          "default": "'Remove'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toolTipWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipwidth",
          "reflectToAttr": false,
          "docs": "Changes the width of the tooltip",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"password\" | \"text\"",
          "complexType": {
            "original": "'text' | 'password'",
            "resolved": "\"password\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "if type is difined as password, the text of the input group will be encripted",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The text value of the input group",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "InputGroupZoomConfig",
          "complexType": {
            "original": "InputGroupZoomConfig",
            "resolved": "InputGroupZoomConfig",
            "references": {
              "InputGroupZoomConfig": {
                "location": "import",
                "path": "./models/np-input-group.model",
                "id": "src/components/np-input-group/models/np-input-group.model.ts::InputGroupZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "InputGroupZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Used to manually give focus to the input",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "buttonClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "clearEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "dropdownActionEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "focusChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-input-group": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-input-mask/np-input-mask.tsx",
      "encapsulation": "shadow",
      "tag": "np-input-mask",
      "readme": "# np-input-mask\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "\"icon\" | \"reset\"",
          "complexType": {
            "original": "'icon' | 'reset'",
            "resolved": "\"icon\" | \"reset\"",
            "references": {}
          },
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Defines the action of the input top-right 'icon'",
          "docsTags": [],
          "values": [
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autoclear",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "characterPattern",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "characterpattern",
          "reflectToAttr": false,
          "docs": "Pattern for alpha chars",
          "docsTags": [],
          "default": "'[A-Za-z]'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "Sets icon clear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "controlName",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "controlname",
          "reflectToAttr": false,
          "docs": "Forms",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableicon",
          "reflectToAttr": false,
          "docs": "When the icon is disabled, it has the c-scale-10 color",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusInputText",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focusinputtext",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusOnClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focusonclear",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasToShiftL",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hastoshiftl",
          "reflectToAttr": false,
          "docs": "Used to control if the value is to be shifted Left when deleting data from the input mask value",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasToShiftR",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hastoshiftr",
          "reflectToAttr": false,
          "docs": "Used to control if the value is to be shifted Right",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "Hides clear icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Sets icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "iconposition",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ignoreMaskValue",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "ignoremaskvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mask",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "mask",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maskChecking",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "maskchecking",
          "reflectToAttr": false,
          "docs": "Used to control if the mask is to be checked",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maskIdentifiers",
          "type": "MaskIdentifierModel",
          "complexType": {
            "original": "MaskIdentifierModel",
            "resolved": "MaskIdentifierModel",
            "references": {
              "MaskIdentifierModel": {
                "location": "import",
                "path": "./models/np-input-mask.interface",
                "id": "src/components/np-input-mask/models/np-input-mask.interface.ts::MaskIdentifierModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Mask Customization",
          "docsTags": [],
          "default": "{\r\n    number: '9',\r\n    letter: 'a',\r\n    all: '*',\r\n  }",
          "values": [
            {
              "type": "MaskIdentifierModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noBorder",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "noborder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "order",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "order",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Sets outline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Sets placeholder text",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholderposition",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "To put '*' in the mask label",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets the input size",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "slotChar",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "slotchar",
          "reflectToAttr": false,
          "docs": "Placeholder char in the mask",
          "docsTags": [],
          "default": "'_'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "States",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "Sets message for the state",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabIndexValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindexvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unmask",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "unmask",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unsetBackground",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "unsetbackground",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "updateValueOnEnter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "updatevalueonenter",
          "reflectToAttr": false,
          "docs": "Allows the value to be updated when the user clicks the 'Enter' key",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "InputZoomConfig",
          "complexType": {
            "original": "InputZoomConfig",
            "resolved": "InputZoomConfig",
            "references": {
              "InputZoomConfig": {
                "location": "import",
                "path": "../np-input/models/np-input-zoom.model",
                "id": "src/components/np-input/models/np-input-zoom.model.ts::InputZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "InputZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "_updateDefaultValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(updatedString: string) => Promise<void>",
            "parameters": [
              {
                "name": "updatedString",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "_updateDefaultValue(updatedString: string) => Promise<void>",
          "parameters": [
            {
              "name": "updatedString",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "getElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": "The DOM element representing the input field."
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Retrieves the underlying DOM element associated with the input component.",
          "docsTags": [
            {
              "name": "returns",
              "text": "The DOM element representing the input field."
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the input field.\r\nIt triggers the focus method of the input element to bring focus to the field.",
          "docsTags": []
        },
        {
          "name": "writeValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: any, flag?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "any",
                "docs": "The value to be assigned to the input element."
              },
              {
                "name": "flag",
                "type": "boolean",
                "docs": "A boolean flag indicating whether to perform certain actions."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "writeValue(value: any, flag?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "any",
              "docs": "The value to be assigned to the input element."
            },
            {
              "name": "flag",
              "type": "boolean",
              "docs": "A boolean flag indicating whether to perform certain actions."
            }
          ],
          "docs": "Sets the value of the input element and performs various actions based on provided flags.\r\nIf the element exists, it ensures the value is not null, then checks the value, updates\r\nfocus text, and updates the filled state. If the `ignoreMaskValue` flag is set, it also\r\ndetermines whether the value contains non-mask characters.",
          "docsTags": [
            {
              "name": "param",
              "text": "value The value to be assigned to the input element."
            },
            {
              "name": "param",
              "text": "flag A boolean flag indicating whether to perform certain actions."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "blurEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "changeValueEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "completeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "keydownEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-date-picker",
        "np-input-time-spinner"
      ],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-input-mask": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-date-picker": [
          "np-input-mask"
        ],
        "np-input-time-spinner": [
          "np-input-mask"
        ]
      }
    },
    {
      "filePath": "src/components/np-input-rounded/np-input-rounded.tsx",
      "encapsulation": "shadow",
      "tag": "np-input-rounded",
      "readme": "# np-input-rounded\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Enables multiple selection (CHIPS).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text displayed in the input field when it is empty.",
          "docsTags": [],
          "default": "'Pesquise...'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Determines if the input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoom-percentage-config",
          "reflectToAttr": false,
          "docs": "The percentage to be appyied to the icon's zoom",
          "docsTags": [],
          "default": "40",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the input value changes.",
          "docsTags": []
        },
        {
          "event": "submitEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the input value changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-chips",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-input-rounded": [
          "np-chips",
          "np-icon"
        ],
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-input-selector/np-input-selector.tsx",
      "encapsulation": "shadow",
      "tag": "np-input-selector",
      "readme": "# nc-input-selector\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "Sets icon clear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Sets action icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconright",
          "reflectToAttr": false,
          "docs": "Sets icon on the right",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputDisableEyeClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inputdisableeyeclick",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inputdisabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputHideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inputhidecross",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputicon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputIconPosition",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "inputiconposition",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "ElementPosition.Left",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputMaxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmaxlength",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputPlaceholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputplaceholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputPlaceholderPosition",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "inputplaceholderposition",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "ElementPosition.Left",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputPlaceholderVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inputplaceholdervisible",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputShowClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inputshowclear",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Sets outline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayMaxHeight",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "overlaymaxheight",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popup",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "popup",
          "reflectToAttr": false,
          "docs": "Sets style when component is used to open pop up",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Behaviour states",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonlyLocked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonlylocked",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "since 12.0.70"
            }
          ],
          "default": "false",
          "deprecation": "since 12.0.70",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "reverseInputs",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "reverseinputs",
          "reflectToAttr": false,
          "docs": "Sets reverse icons style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectAppendTo",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selectappendto",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectAriaFilterLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectariafilterlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectAutoZIndex",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectautozindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectAutofocusFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectautofocusfilter",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectBaseZIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectbasezindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectDataKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectdatakey",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectDefaultLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectdefaultlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectdisabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectDisplay",
          "type": "SelectBoxDisplay.Chip | SelectBoxDisplay.Comma",
          "complexType": {
            "original": "SelectBoxDisplay",
            "resolved": "SelectBoxDisplay.Chip | SelectBoxDisplay.Comma",
            "references": {
              "SelectBoxDisplay": {
                "location": "import",
                "path": "../np-select-box/models/np-select-box.enum",
                "id": "src/components/np-select-box/models/np-select-box.enum.ts::SelectBoxDisplay"
              }
            }
          },
          "mutable": false,
          "attr": "selectdisplay",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "SelectBoxDisplay.Comma",
          "values": [
            {
              "type": "SelectBoxDisplay.Chip"
            },
            {
              "type": "SelectBoxDisplay.Comma"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectDisplayPath",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectdisplaypath",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectDisplaySelectedLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectdisplayselectedlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectDropdownIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectdropdownicon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'icon_arrow'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectEmptyFilterMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectemptyfiltermessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'No results found'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfilter",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFilterBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfilterby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFilterIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfiltericon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'icon_search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFilterLocale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfilterlocale",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFilterMatchMode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfiltermatchmode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'contains'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFilterPlaceholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfilterplaceholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFilterValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfiltervalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectFixedDropdown",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectfixeddropdown",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectGroup",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectgroup",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectHideTransitionOptions",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selecthidetransitionoptions",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'.1s linear'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectLabelFormatter",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selectlabelformatter",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectLabelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectlabeltrimmer",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectMaxSelectedLabels",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectmaxselectedlabels",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectMaxWidth",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "selectmaxwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectMinWidth",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "selectminwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectname",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOptionDisabled",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectoptiondisabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOptionGroupChildren",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectoptiongroupchildren",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'children'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOptionGroupLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectoptiongrouplabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOptionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectoptionlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOptionValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectoptionvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOptions",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectOverlayVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectoverlayvisible",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectPlaceholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectplaceholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectPlaceholderItem",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectplaceholderitem",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectResetFilterOnHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectresetfilteronhide",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectScrollToSelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectscrolltoselected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectSelectAllLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectselectalllabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Select All'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectSelectedIconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "selectselectediconcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectSelectedItemsLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectselecteditemslabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'ellipsis'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectSelectedOptions",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectSelectionLimit",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectselectionlimit",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectSelectionMode",
          "type": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../models/selection-mode.enum",
                "id": "src/components/models/selection-mode.enum.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectselectionmode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "SelectionMode.Single",
          "values": [
            {
              "type": "SelectionMode.Multiple"
            },
            {
              "type": "SelectionMode.MultipleToggle"
            },
            {
              "type": "SelectionMode.Single"
            },
            {
              "type": "SelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectShowHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectshowheader",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectShowTransitionOptions",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectshowtransitionoptions",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'.12s cubic-bezier(0, 0, 0.2, 1)'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectType",
          "type": "SelectBoxType.Color | SelectBoxType.Icon | SelectBoxType.Img | SelectBoxType.Label",
          "complexType": {
            "original": "SelectBoxType",
            "resolved": "SelectBoxType.Color | SelectBoxType.Icon | SelectBoxType.Img | SelectBoxType.Label",
            "references": {
              "SelectBoxType": {
                "location": "import",
                "path": "../np-select-box/models/np-select-box.enum",
                "id": "src/components/np-select-box/models/np-select-box.enum.ts::SelectBoxType"
              }
            }
          },
          "mutable": false,
          "attr": "selecttype",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "SelectBoxType.Label",
          "values": [
            {
              "type": "SelectBoxType.Color"
            },
            {
              "type": "SelectBoxType.Icon"
            },
            {
              "type": "SelectBoxType.Img"
            },
            {
              "type": "SelectBoxType.Label"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectVirtualScroll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectvirtualscroll",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectWaitForOptions",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectwaitforoptions",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectindexTab",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectindextab",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "Sets message for the state",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textAdd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "textadd",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Add'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textRemove",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "textremove",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Remove'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "InputTypes.DoubleDigit | InputTypes.Email | InputTypes.Number | InputTypes.Password | InputTypes.Text",
          "complexType": {
            "original": "InputTypes",
            "resolved": "InputTypes.DoubleDigit | InputTypes.Email | InputTypes.Number | InputTypes.Password | InputTypes.Text",
            "references": {
              "InputTypes": {
                "location": "import",
                "path": "../models/input-types.enum",
                "id": "src/components/models/input-types.enum.ts::InputTypes"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "InputTypes.Text",
          "values": [
            {
              "type": "InputTypes.DoubleDigit"
            },
            {
              "type": "InputTypes.Email"
            },
            {
              "type": "InputTypes.Number"
            },
            {
              "type": "InputTypes.Password"
            },
            {
              "type": "InputTypes.Text"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "InputSelectorZoomConfig",
          "complexType": {
            "original": "InputSelectorZoomConfig",
            "resolved": "InputSelectorZoomConfig",
            "references": {
              "InputSelectorZoomConfig": {
                "location": "import",
                "path": "./models/np-input-selector.model",
                "id": "src/components/np-input-selector/models/np-input-selector.model.ts::InputSelectorZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "InputSelectorZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "focusChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputClearEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputDropEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputPasteEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectedFilterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectPanelHideEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectPanelShowEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text",
        "np-select-box",
        "np-input",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-input-selector": [
          "np-text",
          "np-select-box",
          "np-input",
          "np-icon"
        ],
        "np-select-box": [
          "np-text",
          "np-icon",
          "np-check-box",
          "np-select-item",
          "np-virtual-scroller",
          "np-chips",
          "np-input"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-select-item": [
          "np-check-box",
          "np-icon",
          "np-text"
        ],
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-input-spinner/np-input-spinner.tsx",
      "encapsulation": "shadow",
      "tag": "np-input-spinner",
      "readme": "# np-input-spinner\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "\"switch\"",
          "complexType": {
            "original": "'switch' | null",
            "resolved": "\"switch\"",
            "references": {}
          },
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Sets an action section in the top section",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "value": "switch",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "Autocomplete.Off | Autocomplete.On",
          "complexType": {
            "original": "Autocomplete",
            "resolved": "Autocomplete.Off | Autocomplete.On",
            "references": {
              "Autocomplete": {
                "location": "import",
                "path": "./models/np-input-spinner.enum",
                "id": "src/components/np-input-spinner/models/np-input-spinner.enum.ts::Autocomplete"
              }
            }
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "sets the autocomplete attribute of the input",
          "docsTags": [],
          "default": "Autocomplete.Off",
          "values": [
            {
              "type": "Autocomplete.Off"
            },
            {
              "type": "Autocomplete.On"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "determines if the input should automatically focus when the component is loaded",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "buttonLayout",
          "type": "ButtonLayout.Horizontal | ButtonLayout.Pos | ButtonLayout.Stacked | ButtonLayout.Vertical",
          "complexType": {
            "original": "ButtonLayout",
            "resolved": "ButtonLayout.Horizontal | ButtonLayout.Pos | ButtonLayout.Stacked | ButtonLayout.Vertical",
            "references": {
              "ButtonLayout": {
                "location": "import",
                "path": "./models/np-input-spinner.enum",
                "id": "src/components/np-input-spinner/models/np-input-spinner.enum.ts::ButtonLayout"
              }
            }
          },
          "mutable": false,
          "attr": "buttonlayout",
          "reflectToAttr": false,
          "docs": "sets the layout of the increment/decrement buttons",
          "docsTags": [],
          "default": "ButtonLayout.Stacked",
          "values": [
            {
              "type": "ButtonLayout.Horizontal"
            },
            {
              "type": "ButtonLayout.Pos"
            },
            {
              "type": "ButtonLayout.Stacked"
            },
            {
              "type": "ButtonLayout.Vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "If true, an cross that enables the user to clear the value will appear",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "decimal",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "decimal",
          "reflectToAttr": false,
          "docs": "Number of decimal places",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "default",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "default",
          "reflectToAttr": false,
          "docs": "The value that the input spinner start with",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableMouseWheelEvents",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablemousewheelevents",
          "reflectToAttr": false,
          "docs": "If mouse wheel event should be disabled or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableStateClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablestateclear",
          "reflectToAttr": false,
          "docs": "indicates whether the state clear functionality should be disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "determines whether the input spinner is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "finances",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "finances",
          "reflectToAttr": false,
          "docs": "When setted to true a thousandsSeparator is gonna be applied for every 3 number in the input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusSelect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focusselect",
          "reflectToAttr": false,
          "docs": "Selects the value when focus in",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleclear",
          "reflectToAttr": false,
          "docs": "determines if the input value should be cleared",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasToHaveValue",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hastohavevalue",
          "reflectToAttr": false,
          "docs": "Prevents the value from being null, even if the user deletes it",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "determines if the clear (cross) button should be hidden",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon must be always on the left",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconAdd",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconadd",
          "reflectToAttr": false,
          "docs": "sets a custom icon for the increment button",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconAddColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconaddcolor",
          "reflectToAttr": false,
          "docs": "Custom color for icon add",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconLess",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconless",
          "reflectToAttr": false,
          "docs": "sets a custom icon for the decrement button",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "indexTab",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "indextab",
          "reflectToAttr": false,
          "docs": "specifies the tab index of the input spinner",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "infoMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "infomessage",
          "reflectToAttr": false,
          "docs": "holds an informational message to be displayed",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keepValue",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "keepvalue",
          "reflectToAttr": false,
          "docs": "When setted to true, the value emitted may not be the same as the shown one(rounded)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "sets the maximum allowable value for the input spinner",
          "docsTags": [],
          "default": "9999999999999998",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "sets the maximum number of characters allowed in the input",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "sets the minimum allowable value for the input spinner",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "indicates whether the input spinner should have an outline",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Sets placeholder text",
          "docsTags": [],
          "default": "'---'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderPosition",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "placeholderposition",
          "reflectToAttr": false,
          "docs": "sets the position of the placeholder text",
          "docsTags": [],
          "default": "ElementPosition.Right",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholdervisible",
          "reflectToAttr": false,
          "docs": "determines if the placeholder text should be visible",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "indicates whether the input spinner is read-only",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removeTrailingZeros",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "removetrailingzeros",
          "reflectToAttr": false,
          "docs": "If trailing zeros should be removed or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "indicates if the input is required",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resetValueOnEscape",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "resetvalueonescape",
          "reflectToAttr": false,
          "docs": "specifies if the input value should reset when the Escape key is pressed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Icon, label and state message SIZES",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "holds a message indicating the state of the input spinner",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Step that each click does to the value",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stepByDecimal",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "stepbydecimal",
          "reflectToAttr": false,
          "docs": "Uses step according to number of decimal places or not",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "switchActionState",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "switchactionstate",
          "reflectToAttr": false,
          "docs": "When the action is set to true, there's the possibility to change the state of the switch",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "symbol",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "symbol",
          "reflectToAttr": false,
          "docs": "Symbol must be always on the left",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "thousandsSeparator",
          "type": "ThousandsSeparator.APOSTROPHE | ThousandsSeparator.COMMA | ThousandsSeparator.PERIOD | ThousandsSeparator.SPACE",
          "complexType": {
            "original": "ThousandsSeparator",
            "resolved": "ThousandsSeparator.APOSTROPHE | ThousandsSeparator.COMMA | ThousandsSeparator.PERIOD | ThousandsSeparator.SPACE",
            "references": {
              "ThousandsSeparator": {
                "location": "import",
                "path": "./models/np-input-spinner.enum",
                "id": "src/components/np-input-spinner/models/np-input-spinner.enum.ts::ThousandsSeparator"
              }
            }
          },
          "mutable": false,
          "attr": "thousandsseparator",
          "reflectToAttr": false,
          "docs": "If finances is set to true, a separator is used to separate the input value for every 3 numbers, for ex: 3,444",
          "docsTags": [],
          "default": "ThousandsSeparator.COMMA",
          "values": [
            {
              "type": "ThousandsSeparator.APOSTROPHE"
            },
            {
              "type": "ThousandsSeparator.COMMA"
            },
            {
              "type": "ThousandsSeparator.PERIOD"
            },
            {
              "type": "ThousandsSeparator.SPACE"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toolTipWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipwidth",
          "reflectToAttr": false,
          "docs": "sets the width of the tooltip",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "widthToReduce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "widthtoreduce",
          "reflectToAttr": false,
          "docs": "When the buttons overlay is of type \"pos\", this width will be subtracted to the width of the input",
          "docsTags": [],
          "default": "20",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "InputSpinnerZoomConfig",
          "complexType": {
            "original": "InputSpinnerZoomConfig",
            "resolved": "InputSpinnerZoomConfig",
            "references": {
              "InputSpinnerZoomConfig": {
                "location": "import",
                "path": "./models/np-input-spinner.model",
                "id": "src/components/np-input-spinner/models/np-input-spinner.model.ts::InputSpinnerZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "InputSpinnerZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Applies focus on the input",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the input value changes",
          "docsTags": []
        },
        {
          "event": "clearEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the input is cleared",
          "docsTags": []
        },
        {
          "event": "enterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the Enter key is pressed while the input spinner has focus",
          "docsTags": []
        },
        {
          "event": "escapeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the Escape key is pressed while the input spinner has focus",
          "docsTags": []
        },
        {
          "event": "focusInEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the input spinner gains focus",
          "docsTags": []
        },
        {
          "event": "focusOutEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the input spinner loses focus",
          "docsTags": []
        },
        {
          "event": "inputEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when there is input in the input spinner",
          "docsTags": []
        },
        {
          "event": "maximumReachedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the maximum value is reached",
          "docsTags": []
        },
        {
          "event": "minimumReachedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the minimum value is reached",
          "docsTags": []
        },
        {
          "event": "switchChangedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "emitted when the switch action changes state",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text",
        "np-switch",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-input-spinner": [
          "np-text",
          "np-switch",
          "np-icon"
        ],
        "np-switch": [
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-input-time-spinner/np-input-time-spinner.tsx",
      "encapsulation": "shadow",
      "tag": "np-input-time-spinner",
      "readme": "# np-input-time-spinner\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "action",
          "type": "\"switch\"",
          "complexType": {
            "original": "'switch' | null",
            "resolved": "\"switch\"",
            "references": {}
          },
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Sets an action section in the top section",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "value": "switch",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'on' | 'off'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clear",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "controlName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "controlname",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableicon",
          "reflectToAttr": false,
          "docs": "When the icon is disabled, it has the c-scale-10 color",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableStateClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablestateclear",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusSelect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focusselect",
          "reflectToAttr": false,
          "docs": "Selects the value when focus in",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleClear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleclear",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasFocus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "hasfocus",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon must be always on the left",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "id",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "id",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "infoMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "infomessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputMaskOrder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputmaskorder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "resetvalueonescape",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Sets placeholder text",
          "docsTags": [],
          "default": "'hh:mm'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholderposition",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showSeconds",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showseconds",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "States",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "switchActionState",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "switchactionstate",
          "reflectToAttr": false,
          "docs": "When the action is set to true, there's the possibility to change the state of the switch",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabindex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toolTipWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "InputTimeSpinnerZoomConfig",
          "complexType": {
            "original": "InputTimeSpinnerZoomConfig",
            "resolved": "InputTimeSpinnerZoomConfig",
            "references": {
              "InputTimeSpinnerZoomConfig": {
                "location": "import",
                "path": "./models/np-input-time-spinner.zoom",
                "id": "src/components/np-input-time-spinner/models/np-input-time-spinner.zoom.ts::InputTimeSpinnerZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new InputTimeSpinnerZoomConfig()",
          "values": [
            {
              "type": "InputTimeSpinnerZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clearEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "focusOutEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputTimeFocusInEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputTimeFocusOutEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "maximumReachedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "minimumReachedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "pasteEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "switchActionChangedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "valueChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text",
        "np-switch",
        "np-icon",
        "np-input-mask"
      ],
      "dependencyGraph": {
        "np-input-time-spinner": [
          "np-text",
          "np-switch",
          "np-icon",
          "np-input-mask"
        ],
        "np-switch": [
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input-mask": [
          "np-text",
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-keyboard/np-keyboard.tsx",
      "encapsulation": "shadow",
      "tag": "np-keyboard",
      "readme": "# np-keyboard\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "configuration",
          "type": "KeyboardConfigurationModel",
          "complexType": {
            "original": "KeyboardConfigurationModel",
            "resolved": "KeyboardConfigurationModel",
            "references": {
              "KeyboardConfigurationModel": {
                "location": "import",
                "path": "./np-keyboard.class",
                "id": "src/components/np-keyboard/np-keyboard.class.ts::KeyboardConfigurationModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new KeyboardConfigurationModel()",
          "values": [
            {
              "type": "KeyboardConfigurationModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyboard",
          "type": "KeyboardModel",
          "complexType": {
            "original": "KeyboardModel",
            "resolved": "KeyboardModel",
            "references": {
              "KeyboardModel": {
                "location": "import",
                "path": "./np-keyboard.class",
                "id": "src/components/np-keyboard/np-keyboard.class.ts::KeyboardModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "KeyboardModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-input",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "KeyboardZoomConfig",
          "complexType": {
            "original": "KeyboardZoomConfig",
            "resolved": "KeyboardZoomConfig",
            "references": {
              "KeyboardZoomConfig": {
                "location": "import",
                "path": "./models/np-keyboard.model",
                "id": "src/components/np-keyboard/models/np-keyboard.model.ts::KeyboardZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "KeyboardZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Close keyboard",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Open keyboard",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "changeEvent",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "closeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "enterEvent",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-text",
        "np-input"
      ],
      "dependencyGraph": {
        "np-keyboard": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-list-item/np-list-item.tsx",
      "encapsulation": "none",
      "tag": "np-list-item",
      "readme": "# nc-list-item\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "item",
          "type": "ListItemModel",
          "complexType": {
            "original": "ListItemModel",
            "resolved": "ListItemModel",
            "references": {
              "ListItemModel": {
                "location": "import",
                "path": "./models/np-list-item.model",
                "id": "src/components/np-list-item/models/np-list-item.model.ts::ListItemModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ListItemModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optiondescription",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickIconEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-list-item": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-list-template/np-list-template.tsx",
      "encapsulation": "shadow",
      "tag": "np-list-template",
      "readme": "# np-list-template\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "addIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "addicon",
          "reflectToAttr": false,
          "docs": "Button add icon",
          "docsTags": [],
          "default": "'icon_plus'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "changes",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "changes",
          "reflectToAttr": false,
          "docs": "If there are changes made in the detail, then set to true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configs",
          "type": "ListTemplateConfigs",
          "complexType": {
            "original": "ListTemplateConfigs",
            "resolved": "ListTemplateConfigs",
            "references": {
              "ListTemplateConfigs": {
                "location": "import",
                "path": "./models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateConfigs"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contextMenuItems",
          "type": "MenuItem[]",
          "complexType": {
            "original": "Array<MenuItem>",
            "resolved": "MenuItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "MenuItem": {
                "location": "import",
                "path": "../np-context-menu/models/np-context-menu.model",
                "id": "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Context Menus",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "MenuItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableAddButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableaddbutton",
          "reflectToAttr": false,
          "docs": "Disables the Add button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableAllFields",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableallfields",
          "reflectToAttr": false,
          "docs": "If this property is set to true, the list will be completely disabled, meaning that the user won't be able to do any action on the list (drag, filter, select item)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableDeselectAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabledeselectall",
          "reflectToAttr": false,
          "docs": "Disables the Deselect All button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableEditButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableeditbutton",
          "reflectToAttr": false,
          "docs": "Disables the Edit button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableFilterInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disablefilterinput",
          "reflectToAttr": false,
          "docs": "Disables the list's filter input, Meaning we won't be able to use it to filter data on the list",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableItems",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableitems",
          "reflectToAttr": false,
          "docs": "If this property is set to true, the items will be disabled, meaning that the user won't be able to select or do any action on the item",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableOrderButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableorderbutton",
          "reflectToAttr": false,
          "docs": "Disables order Button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableOrderSelectBox",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableorderselectbox",
          "reflectToAttr": false,
          "docs": "Disables the Order Select box",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableRemoveButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableremovebutton",
          "reflectToAttr": false,
          "docs": "Disables the Remove button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableSelectAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableselectall",
          "reflectToAttr": false,
          "docs": "Disables the Select All button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableSelectboxFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableselectboxfilter",
          "reflectToAttr": false,
          "docs": "Disables the Filter Select box",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "editIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "editicon",
          "reflectToAttr": false,
          "docs": "Button edit icon",
          "docsTags": [],
          "default": "'icon_edit'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "errorid",
          "reflectToAttr": false,
          "docs": "The id of the error message",
          "docsTags": [],
          "default": "'alert-1'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterArray",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterarray",
          "reflectToAttr": false,
          "docs": "Filter Array used to filter data on the list",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterArrayProperty",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterarrayproperty",
          "reflectToAttr": false,
          "docs": "Filter Array property used to filter data on the list",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterConfigs",
          "type": "ListTemplateFilterConfigs",
          "complexType": {
            "original": "ListTemplateFilterConfigs",
            "resolved": "ListTemplateFilterConfigs",
            "references": {
              "ListTemplateFilterConfigs": {
                "location": "import",
                "path": "./models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateFilterConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateFilterConfigs"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterInputMinWidth",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterinputminwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterResults",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterresults",
          "reflectToAttr": false,
          "docs": "The value passed here will be filtered on the list",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterSelectBoxSelected",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Filter Select Box Selected Option",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterSelectOptions",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Filter Select Box Options",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterSelectboxHasSearch",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filterselectboxhassearch",
          "reflectToAttr": false,
          "docs": "If true, the filter Select Box will have an search input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterSelectboxLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterselectboxlabel",
          "reflectToAttr": false,
          "docs": "Filter Select Box Label Translation",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterSelectboxOptionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterselectboxoptionlabel",
          "reflectToAttr": false,
          "docs": "Filter Select Box Option Label",
          "docsTags": [],
          "default": "'name'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterTranslations",
          "type": "ListTemplateFilterTranslations",
          "complexType": {
            "original": "ListTemplateFilterTranslations",
            "resolved": "ListTemplateFilterTranslations",
            "references": {
              "ListTemplateFilterTranslations": {
                "location": "import",
                "path": "./models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateFilterTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateFilterTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filteredItems",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The Filtered items of the list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelect",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Used to validate item selection",
          "docsTags": [],
          "default": "(...params) => {\r\n    return params ?? true;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectactive",
          "reflectToAttr": false,
          "docs": "Used to define if there is an item selection validation",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectDeselect",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectdeselect",
          "reflectToAttr": false,
          "docs": "if true we will handle the select and deselect all buttons click",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelection",
          "type": "HandleSelection[]",
          "complexType": {
            "original": "Array<HandleSelection>",
            "resolved": "HandleSelection[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "HandleSelection": {
                "location": "import",
                "path": "../np-custom-list/models/np-custom-list.model",
                "id": "src/components/np-custom-list/models/np-custom-list.model.ts::HandleSelection"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "This lets us add custom logic to clicking on an certain element of an item",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "HandleSelection[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hidden",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidden",
          "reflectToAttr": false,
          "docs": "Used to show or hide the list template, whem shown the list template will calculate list height and list item size",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconEmptyList",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconemptylist",
          "reflectToAttr": false,
          "docs": "The icon that will apear when the list is empty",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputHasFullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filterinputhasfullwidth",
          "reflectToAttr": false,
          "docs": "If true, the filter input will ocupy 100% of the available width",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemTemplate",
          "type": "any",
          "complexType": {
            "original": "((viewPortItem: any, index: number) => VNode | string) | any",
            "resolved": "any",
            "references": {
              "VNode": {
                "location": "import",
                "path": "@stencil/core",
                "id": "node_modules::VNode"
              }
            }
          },
          "mutable": false,
          "attr": "itemtemplate",
          "reflectToAttr": false,
          "docs": "This callback will emit the index of the list item to be rendered",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "itemValidation",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "This callback validate if the item will appear on the list",
          "docsTags": [
            {
              "name": "param",
              "text": "params item data"
            },
            {
              "name": "returns",
              "text": "true or false (if false, it won't appear on the list)"
            }
          ],
          "default": "(...params) => {\r\n    return params ?? true;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The items that are gonna populate the list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "listConfigs",
          "type": "CustomListConfigs",
          "complexType": {
            "original": "CustomListConfigs",
            "resolved": "CustomListConfigs",
            "references": {
              "CustomListConfigs": {
                "location": "import",
                "path": "../np-custom-list/models/np-custom-list.model",
                "id": "src/components/np-custom-list/models/np-custom-list.model.ts::CustomListConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "CustomListConfigs"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "listDragConfigs",
          "type": "CustomListDragConfigs",
          "complexType": {
            "original": "CustomListDragConfigs",
            "resolved": "CustomListDragConfigs",
            "references": {
              "CustomListDragConfigs": {
                "location": "import",
                "path": "../np-custom-list/models/np-custom-list.model",
                "id": "src/components/np-custom-list/models/np-custom-list.model.ts::CustomListDragConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List Drag configurations (note, to make the list draggable, set the prop \"listConfigs.draggableList = true\")",
          "docsTags": [],
          "values": [
            {
              "type": "CustomListDragConfigs"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsConfigs",
          "type": "FiltersInfoModel",
          "complexType": {
            "original": "FiltersInfoModel",
            "resolved": "FiltersInfoModel",
            "references": {
              "FiltersInfoModel": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Filter info component configs (this is the component that appears when there are no items on the list",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsTranslations",
          "type": "FiltersInfoTranslations",
          "complexType": {
            "original": "FiltersInfoTranslations",
            "resolved": "FiltersInfoTranslations",
            "references": {
              "FiltersInfoTranslations": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "filter info component translations (this is the component that appears when there are no items on the list)",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orderOption",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "1 | 2 | 3 | 4 | 5 | 6",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {}
          },
          "mutable": true,
          "attr": "orderoption",
          "reflectToAttr": false,
          "docs": "1- A-Z ; 2- Z-A; 3 - Most recent Date; 4- Eariest Date; 5- More Values; 6- Less Values  null - No order",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orderSelectboxLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "orderselectboxlabel",
          "reflectToAttr": false,
          "docs": "Filter Select Box Label Translation",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonlySelectboxFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonlyselectboxfilter",
          "reflectToAttr": false,
          "docs": "Sets the Select box Order as readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removeIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "removeicon",
          "reflectToAttr": false,
          "docs": "Button remove icon",
          "docsTags": [],
          "default": "'icon_cross'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "secondaryFilterArray",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "secondaryfilterarray",
          "reflectToAttr": false,
          "docs": "Secondary filter Array used to filter data on the list",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "secondaryFilterArrayProperty",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "secondaryfilterarrayproperty",
          "reflectToAttr": false,
          "docs": "Secondary Filter Array property used to filter data on the list",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectBoxFilterOverlayAditionalWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectboxfilteroverlayaditionalwidth",
          "reflectToAttr": false,
          "docs": "Select Box Overlay Aditional width",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectBoxFilterProperties",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Filter Select Box filter Options - For ex: ['id', 'attributeTypeId'], the items will be filtered based on their \"attributeTypeId\" being equal to the \"id\" of the Filter Select Box items",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectBoxOrderOverlayAditionalWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectboxorderoverlayaditionalwidth",
          "reflectToAttr": false,
          "docs": "This properties add an aditional width to the Select Box overlay",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectboxFilterSelectionMode",
          "type": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../models/selection-mode.enum",
                "id": "src/components/models/selection-mode.enum.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectboxfilterselectionmode",
          "reflectToAttr": false,
          "docs": "Select Box Filter Selection Mode",
          "docsTags": [],
          "default": "SelectionMode.Single",
          "values": [
            {
              "type": "SelectionMode.Multiple"
            },
            {
              "type": "SelectionMode.MultipleToggle"
            },
            {
              "type": "SelectionMode.Single"
            },
            {
              "type": "SelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "setFilter",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "setfilter",
          "reflectToAttr": false,
          "docs": "Sets a value to the input filter (the list items will be filtered)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styles",
          "type": "ListTemplateStyles",
          "complexType": {
            "original": "ListTemplateStyles",
            "resolved": "ListTemplateStyles",
            "references": {
              "ListTemplateStyles": {
                "location": "import",
                "path": "./models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateStyles"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateStyles"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "templateBodyStyle",
          "type": "\"first\" | \"second\"",
          "complexType": {
            "original": "'first' | 'second'",
            "resolved": "\"first\" | \"second\"",
            "references": {}
          },
          "mutable": false,
          "attr": "templatebodystyle",
          "reflectToAttr": false,
          "docs": "Template Body Style",
          "docsTags": [],
          "default": "'first'",
          "values": [
            {
              "value": "first",
              "type": "string"
            },
            {
              "value": "second",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "templateHeadStyle",
          "type": "\"first\" | \"second\"",
          "complexType": {
            "original": "'first' | 'second'",
            "resolved": "\"first\" | \"second\"",
            "references": {}
          },
          "mutable": false,
          "attr": "templateheadstyle",
          "reflectToAttr": false,
          "docs": "Template Head Style",
          "docsTags": [],
          "default": "'first'",
          "values": [
            {
              "value": "first",
              "type": "string"
            },
            {
              "value": "second",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translations",
          "type": "ListTemplateTranslations",
          "complexType": {
            "original": "ListTemplateTranslations",
            "resolved": "ListTemplateTranslations",
            "references": {
              "ListTemplateTranslations": {
                "location": "import",
                "path": "./models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "virtuallScrollHasContent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "virtuallscrollhascontent",
          "reflectToAttr": false,
          "docs": "Used to indicate that there is content to populate the virtuall scroller",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "ListTemplateZoomConfig",
          "complexType": {
            "original": "ListTemplateZoomConfig",
            "resolved": "ListTemplateZoomConfig",
            "references": {
              "ListTemplateZoomConfig": {
                "location": "import",
                "path": "./models/np-list-template.model",
                "id": "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ListTemplateZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clearErrorNotification",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clearErrorNotification() => Promise<void>",
          "parameters": [],
          "docs": "CLEAR ERROR NOTIFICATION\r\nUsed to hide the error notification",
          "docsTags": []
        },
        {
          "name": "clearFilter",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clearFilter() => Promise<void>",
          "parameters": [],
          "docs": "CLEAR FILTERS\r\nUsed to clear the filters (of the filter input)",
          "docsTags": []
        },
        {
          "name": "revertFilter",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "revertFilter() => Promise<void>",
          "parameters": [],
          "docs": "REVERT FILTERS\r\nUsed to revert the filters (of the input filter) to the last saved filters",
          "docsTags": []
        },
        {
          "name": "saveFilter",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "saveFilter() => Promise<void>",
          "parameters": [],
          "docs": "SAVE FILTERS\r\nUsed to save the filters (of the input filter)",
          "docsTags": []
        },
        {
          "name": "showErrorNotification",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(_notification: any) => Promise<void>",
            "parameters": [
              {
                "name": "_notification",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "showErrorNotification(_notification: any) => Promise<void>",
          "parameters": [
            {
              "name": "_notification",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "SHOW ERROR NOTIFICATION\r\nUsed to show the error notification",
          "docsTags": [
            {
              "name": "param",
              "text": "notification //Used to configure the error notification"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "addClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Add button is clicked",
          "docsTags": []
        },
        {
          "event": "contextMenuActionClickedEvent",
          "detail": "MenuItem",
          "bubbles": true,
          "complexType": {
            "original": "MenuItem",
            "resolved": "MenuItem",
            "references": {
              "MenuItem": {
                "location": "import",
                "path": "../np-context-menu/models/np-context-menu.model",
                "id": "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an action of the context menu is clicked",
          "docsTags": []
        },
        {
          "event": "contextMenuCloseEvent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the context menu is closed",
          "docsTags": []
        },
        {
          "event": "contextMenuOpenEvent",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the context menu is opened",
          "docsTags": []
        },
        {
          "event": "deselectAllEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Deselect all button is clicked",
          "docsTags": []
        },
        {
          "event": "doubleClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is double clicked",
          "docsTags": []
        },
        {
          "event": "dragStartEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user start dragging an item",
          "docsTags": []
        },
        {
          "event": "dragStopEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user stops dragging an item",
          "docsTags": []
        },
        {
          "event": "dropIntoListEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is dropped into this list",
          "docsTags": []
        },
        {
          "event": "dropOutsideListEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is dropped into another list",
          "docsTags": []
        },
        {
          "event": "editClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Edit button is clicked",
          "docsTags": []
        },
        {
          "event": "filterByItemTypeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when items are filtered by type",
          "docsTags": []
        },
        {
          "event": "filterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the list is filtered or ordered",
          "docsTags": []
        },
        {
          "event": "orderChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the item order changes",
          "docsTags": []
        },
        {
          "event": "removeClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Remove button is clicked",
          "docsTags": []
        },
        {
          "event": "scrollEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called whenever the user is scrolling",
          "docsTags": []
        },
        {
          "event": "scrollSizeChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the height of the virtuall scroller changes",
          "docsTags": []
        },
        {
          "event": "scrollStartEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user start srolling on the list",
          "docsTags": []
        },
        {
          "event": "scrollStopEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the user Stops srolling on the list",
          "docsTags": []
        },
        {
          "event": "selectAllEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when the Select all button is clicked",
          "docsTags": []
        },
        {
          "event": "selectBoxClickEvent",
          "detail": "\"filter-by-item-type\" | \"filter-order\"",
          "bubbles": true,
          "complexType": {
            "original": "'filter-by-item-type' | 'filter-order'",
            "resolved": "\"filter-by-item-type\" | \"filter-order\"",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an select box is clicked",
          "docsTags": []
        },
        {
          "event": "selectedChangeEvent",
          "detail": "any[]",
          "bubbles": true,
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called when an item is selected or deselected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-card-list",
        "np-color-picker",
        "np-detail-list"
      ],
      "dependencies": [
        "np-text",
        "np-button",
        "np-select-box",
        "np-icon",
        "np-input",
        "np-custom-list"
      ],
      "dependencyGraph": {
        "np-list-template": [
          "np-text",
          "np-button",
          "np-select-box",
          "np-icon",
          "np-input",
          "np-custom-list"
        ],
        "np-button": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-select-box": [
          "np-text",
          "np-icon",
          "np-check-box",
          "np-select-item",
          "np-virtual-scroller",
          "np-chips",
          "np-input"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-select-item": [
          "np-check-box",
          "np-icon",
          "np-text"
        ],
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-custom-list": [
          "np-filters-info",
          "np-icon",
          "np-virtual-scroller",
          "np-context-menu"
        ],
        "np-filters-info": [
          "np-icon",
          "np-text"
        ],
        "np-context-menu": [
          "np-icon",
          "np-text"
        ],
        "np-card-list": [
          "np-list-template"
        ],
        "np-color-picker": [
          "np-list-template"
        ],
        "np-detail-list": [
          "np-list-template"
        ]
      }
    },
    {
      "filePath": "src/components/np-loader/np-loader.tsx",
      "encapsulation": "shadow",
      "tag": "np-loader",
      "readme": "# np-loader\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'This operation may take more than a few seconds'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Loading...'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "LoaderZoomConfig",
          "complexType": {
            "original": "LoaderZoomConfig",
            "resolved": "LoaderZoomConfig",
            "references": {
              "LoaderZoomConfig": {
                "location": "import",
                "path": "./models/np-loader.model",
                "id": "src/components/np-loader/models/np-loader.model.ts::LoaderZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new LoaderZoomConfig()",
          "values": [
            {
              "type": "LoaderZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text"
      ],
      "dependencyGraph": {
        "np-loader": [
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-menu-bar/np-menu-bar.tsx",
      "encapsulation": "shadow",
      "tag": "np-menu-bar",
      "readme": "# np-menu-bar\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "categoriesList",
          "type": "MenuCategory[]",
          "complexType": {
            "original": "MenuCategory[]",
            "resolved": "MenuCategory[]",
            "references": {
              "MenuCategory": {
                "location": "import",
                "path": "./models/np-menu-bar.model",
                "id": "src/components/np-menu-bar/models/np-menu-bar.model.ts::MenuCategory"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List of categories, and their items, to the menu",
          "docsTags": [
            {
              "name": "name",
              "text": "CategoriesList"
            },
            {
              "name": "type",
              "text": "{MenuCategory[]}"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "MenuCategory[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closeOnlyOnOutterClick",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closeonlyonoutterclick",
          "reflectToAttr": false,
          "docs": "Defines if the menu only closes when click outside of him",
          "docsTags": [
            {
              "name": "name",
              "text": "CloseOnlyOnOutterClick"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "defaultValue",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expandMenuWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "expandmenuwidth",
          "reflectToAttr": false,
          "docs": "Define the width of the expanded menu, in the case of \"expandMenuWithStaticWidth\" was setted as true",
          "docsTags": [
            {
              "name": "name",
              "text": "ExpandMenuWidth"
            },
            {
              "name": "type",
              "text": "{number}"
            },
            {
              "name": "defaultValue",
              "text": "220 tbu"
            }
          ],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expandMenuWithStaticWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expandmenuwithstaticwidth",
          "reflectToAttr": false,
          "docs": "Defines if the menu should have a static width when expanded or not",
          "docsTags": [
            {
              "name": "name",
              "text": "ExpandMenuWithStaticWidth"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "defaultValue",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuBarStyle",
          "type": "MenuBarStyle",
          "complexType": {
            "original": "MenuBarStyle",
            "resolved": "MenuBarStyle",
            "references": {
              "MenuBarStyle": {
                "location": "import",
                "path": "./models/np-menu-bar.model",
                "id": "src/components/np-menu-bar/models/np-menu-bar.model.ts::MenuBarStyle"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Menu Bar Style Configuration",
          "docsTags": [
            {
              "name": "name",
              "text": "MenuBarStyle"
            },
            {
              "name": "type",
              "text": "{MenuBarStyle}"
            }
          ],
          "values": [
            {
              "type": "MenuBarStyle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openMainMenuOnHover",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "openmainmenuonhover",
          "reflectToAttr": false,
          "docs": "Defines if the main menu should open on mouse hover or not",
          "docsTags": [
            {
              "name": "name",
              "text": "OpenMainMenuOnHover"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submenusStyle",
          "type": "SubmenusStyle",
          "complexType": {
            "original": "SubmenusStyle",
            "resolved": "SubmenusStyle",
            "references": {
              "SubmenusStyle": {
                "location": "import",
                "path": "./models/np-menu-bar.model",
                "id": "src/components/np-menu-bar/models/np-menu-bar.model.ts::SubmenusStyle"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "SubMenus Style Configuration",
          "docsTags": [
            {
              "name": "name",
              "text": "SubmenusStyle"
            },
            {
              "name": "type",
              "text": "{SubmenusStyle}"
            }
          ],
          "values": [
            {
              "type": "SubmenusStyle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "MenuBarZoomConfig",
          "complexType": {
            "original": "MenuBarZoomConfig",
            "resolved": "MenuBarZoomConfig",
            "references": {
              "MenuBarZoomConfig": {
                "location": "import",
                "path": "./models/np-menu-bar.model",
                "id": "src/components/np-menu-bar/models/np-menu-bar.model.ts::MenuBarZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Zoom component configuration",
          "docsTags": [
            {
              "name": "name",
              "text": "ZoomPercentageConfig"
            },
            {
              "name": "type",
              "text": "{MenuBarZoomConfig}"
            }
          ],
          "default": "new MenuBarZoomConfig()",
          "values": [
            {
              "type": "MenuBarZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "itemSelectionEvent",
          "detail": "Item",
          "bubbles": true,
          "complexType": {
            "original": "Item",
            "resolved": "Item",
            "references": {
              "Item": {
                "location": "import",
                "path": "./models/np-menu-bar.model",
                "id": "src/components/np-menu-bar/models/np-menu-bar.model.ts::Item"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when an item its clicked or selected",
          "docsTags": [
            {
              "name": "name",
              "text": "ItemSelectionEvent"
            },
            {
              "name": "event",
              "text": "itemSelectionEvent"
            },
            {
              "name": "emits",
              "text": "Original event and the item selected"
            }
          ]
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "document",
          "capture": false,
          "passive": false
        },
        {
          "event": "click",
          "target": "document",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-menu-bar": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-menu-item/np-menu-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-menu-item",
      "readme": "# np-menu-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentlySelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "currently-selected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuItemWrapperHeight",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "menu-item-wrapper-height",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "menuTextFontSize",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "menu-text-font-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "routerLinkActive",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "router-link-active",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "srcImage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "src-image",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-card-input"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "np-card-input": [
          "np-menu-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-more-options/np-more-options.tsx",
      "encapsulation": "shadow",
      "tag": "np-more-options",
      "readme": "# np-more-options\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "dotWidth",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "dot-width",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dotsWrapperWidth",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "dots-wrapper-width",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ellipsisMinWidth",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "ellipsis-min-width",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"regular\" | \"small\"",
          "complexType": {
            "original": "'small' | 'regular' | 'medium' | 'large'",
            "resolved": "\"large\" | \"medium\" | \"regular\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "regular",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabIndexValue",
          "type": "-1 | 0",
          "complexType": {
            "original": "-1 | 0",
            "resolved": "-1 | 0",
            "references": {}
          },
          "mutable": false,
          "attr": "tab-index-value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "value": "-1",
              "type": "number"
            },
            {
              "value": "0",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-card-input"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "np-card-input": [
          "np-more-options"
        ]
      }
    },
    {
      "filePath": "src/components/np-popup/np-popup.tsx",
      "encapsulation": "shadow",
      "tag": "np-popup",
      "readme": "# nc-popup\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "backdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "backdrop",
          "reflectToAttr": false,
          "docs": "backdrop",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "blurOverlay",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "bluroverlay",
          "reflectToAttr": false,
          "docs": "If overlay of the popup should blur the background or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "bodyBackgroundColor",
          "type": "string",
          "complexType": {
            "original": "Color | string | null",
            "resolved": "string",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "bodybackgroundcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "closable",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closableOnEscapeKey",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closableonescapekey",
          "reflectToAttr": false,
          "docs": "closable On Escape Key",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "crossIconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "crossiconcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_9",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "crossIconHoverColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "crossiconhovercolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_9",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "crossIconSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "cross-icon-size",
          "reflectToAttr": false,
          "docs": "cross Icon Size",
          "docsTags": [],
          "default": "16",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultBodyPaddings",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "defaultbodypaddings",
          "reflectToAttr": false,
          "docs": "default Body Paddings",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultFooterPaddings",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "defaultfooterpaddings",
          "reflectToAttr": false,
          "docs": "default Footer Paddings",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultHeaderPaddings",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "defaultheaderpaddings",
          "reflectToAttr": false,
          "docs": "default Header Paddings",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultHeight",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "defaultheight",
          "reflectToAttr": false,
          "docs": "default Height",
          "docsTags": [],
          "default": "440",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "defaultwidth",
          "reflectToAttr": false,
          "docs": "default Width",
          "docsTags": [],
          "default": "600",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "footerBackgroundColor",
          "type": "string",
          "complexType": {
            "original": "Color | string | null",
            "resolved": "string",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "footerbackgroundcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "footerBorderTop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "footerbordertop",
          "reflectToAttr": false,
          "docs": "footer Border Top",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleclose",
          "reflectToAttr": false,
          "docs": "handle Close",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerBackgroundColor",
          "type": "string",
          "complexType": {
            "original": "Color | string | null",
            "resolved": "string",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "headerbackgroundcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerHeightFitContent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "headerheightfitcontent",
          "reflectToAttr": false,
          "docs": "header Height Fit Content",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inViewport",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inviewport",
          "reflectToAttr": false,
          "docs": "in Viewport",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxHeight",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxheight",
          "reflectToAttr": false,
          "docs": "max Height",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxwidth",
          "reflectToAttr": false,
          "docs": "max Width",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maximizable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "maximizable",
          "reflectToAttr": false,
          "docs": "maximizable",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minHeight",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minheight",
          "reflectToAttr": false,
          "docs": "min Height",
          "docsTags": [],
          "default": "380",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minwidth",
          "reflectToAttr": false,
          "docs": "min Width",
          "docsTags": [],
          "default": "500",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollTopEnable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrolltopenable",
          "reflectToAttr": false,
          "docs": "scroll Top Enable",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "The zoom percentage to be applied to the component",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(sendCloseEvent?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "sendCloseEvent",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide(sendCloseEvent?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "sendCloseEvent",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "hide popup method",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "show popup method",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "closeModalEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "close Modal Event",
          "docsTags": []
        },
        {
          "event": "escapeKeyDownEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "escape Key Down Event",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-resizable-draggable"
      ],
      "dependencyGraph": {
        "np-popup": [
          "np-icon",
          "np-resizable-draggable"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-primary-tree/np-primary-tree.tsx",
      "encapsulation": "shadow",
      "tag": "np-primary-tree",
      "readme": "# np-primary-tree\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "arialabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ariaLabelledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "arialabelledby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contextMenu",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "contextmenu",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "draggableNodes",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "draggablenodes",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "draggableScope",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "draggablescope",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "droppableNodes",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "droppablenodes",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "droppableScope",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "droppablescope",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "emptymessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'No records found'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterLocale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterlocale",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterMode",
          "type": "\"lenient\" | \"strict\"",
          "complexType": {
            "original": "'lenient' | 'strict'",
            "resolved": "\"lenient\" | \"strict\"",
            "references": {}
          },
          "mutable": false,
          "attr": "filtermode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'lenient'",
          "values": [
            {
              "value": "lenient",
              "type": "string"
            },
            {
              "value": "strict",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterPlaceholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterplaceholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layout",
          "type": "LayoutModel.horizontal | LayoutModel.vertical",
          "complexType": {
            "original": "LayoutModel",
            "resolved": "LayoutModel.horizontal | LayoutModel.vertical",
            "references": {
              "LayoutModel": {
                "location": "import",
                "path": "./models/np-primary-tree.enum",
                "id": "src/components/np-primary-tree/models/np-primary-tree.enum.ts::LayoutModel"
              }
            }
          },
          "mutable": false,
          "attr": "layout",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "LayoutModel.vertical",
          "values": [
            {
              "type": "LayoutModel.horizontal"
            },
            {
              "type": "LayoutModel.vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loadingIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "loadingicon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'pi pi-spinner'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxBufferPx",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxbufferpx",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "metaKeySelection",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "metakeyselection",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minBufferPx",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minbufferpx",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "navigationIcons",
          "type": "NavigationIconsModel",
          "complexType": {
            "original": "NavigationIconsModel",
            "resolved": "NavigationIconsModel",
            "references": {
              "NavigationIconsModel": {
                "location": "import",
                "path": "./models/np-navigation-icon.model",
                "id": "src/components/np-primary-tree/models/np-navigation-icon.model.ts::NavigationIconsModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "NavigationIconsModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionChildren",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionchildren",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'children'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "propagateSelectionDown",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "propagateselectiondown",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "propagateSelectionUp",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "propagateselectionup",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selection",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selection",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionIdentifierProp",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectionidentifierprop",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'id'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionPrimaryTreeModel.checkbox | SelectionPrimaryTreeModel.multiple | SelectionPrimaryTreeModel.single",
          "complexType": {
            "original": "SelectionPrimaryTreeModel | null",
            "resolved": "SelectionPrimaryTreeModel.checkbox | SelectionPrimaryTreeModel.multiple | SelectionPrimaryTreeModel.single",
            "references": {
              "SelectionPrimaryTreeModel": {
                "location": "import",
                "path": "./models/np-primary-tree.enum",
                "id": "src/components/np-primary-tree/models/np-primary-tree.enum.ts::SelectionPrimaryTreeModel"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "SelectionPrimaryTreeModel.checkbox"
            },
            {
              "type": "SelectionPrimaryTreeModel.multiple"
            },
            {
              "type": "SelectionPrimaryTreeModel.single"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "styleclass",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleComponent",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "stylecomponent",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "togglerAriaLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "togglerarialabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trackBy",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "(item: any) => item",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validateDrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "validatedrop",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "virtualNodeHeight",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "virtualnodeheight",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "virtualScroll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "virtualscroll",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "virtualScrollHeight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "virtualscrollheight",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'flex'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "PrimaryTreeZoomConfig",
          "complexType": {
            "original": "PrimaryTreeZoomConfig",
            "resolved": "PrimaryTreeZoomConfig",
            "references": {
              "PrimaryTreeZoomConfig": {
                "location": "import",
                "path": "./models/np-primary-tree-zoom.model",
                "id": "src/components/np-primary-tree/models/np-primary-tree-zoom.model.ts::PrimaryTreeZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new PrimaryTreeZoomConfig()",
          "values": [
            {
              "type": "PrimaryTreeZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "syncNodeOption",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(node: any, parentNodes: any, option: any, value?: any) => Promise<void>",
            "parameters": [
              {
                "name": "node",
                "type": "any",
                "docs": ""
              },
              {
                "name": "parentNodes",
                "type": "any",
                "docs": ""
              },
              {
                "name": "option",
                "type": "any",
                "docs": ""
              },
              {
                "name": "value",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "syncNodeOption(node: any, parentNodes: any, option: any, value?: any) => Promise<void>",
          "parameters": [
            {
              "name": "node",
              "type": "any",
              "docs": ""
            },
            {
              "name": "parentNodes",
              "type": "any",
              "docs": ""
            },
            {
              "name": "option",
              "type": "any",
              "docs": ""
            },
            {
              "name": "value",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "filterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "itemClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "nodeCollapseEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "nodeContextMenuSelectEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "nodeDropEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "nodeExpandEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "nodeSelectEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "nodeUnselectEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectionChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-input",
        "np-tree-node",
        "np-text"
      ],
      "dependencyGraph": {
        "np-primary-tree": [
          "np-input",
          "np-tree-node",
          "np-text"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-tree-node": [
          "np-icon",
          "np-check-box",
          "np-text",
          "np-tree-node"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-progress-bar/np-progress-bar.tsx",
      "encapsulation": "shadow",
      "tag": "np-progress-bar",
      "readme": "# np-progress-bar\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "backgroundColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "backgroundcolor",
          "reflectToAttr": false,
          "docs": "the backgroundColor of the bar",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "the color of the bar",
          "docsTags": [],
          "default": "Color.c_scale_1",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "progress",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "progress",
          "reflectToAttr": false,
          "docs": "the quantity if the percentage that is presented",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showPercentage",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showpercentage",
          "reflectToAttr": false,
          "docs": "show the percentage",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "the size of the bar",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "80",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/np-progress-stepper/np-progress-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "np-progress-stepper",
      "readme": "# np-progress-stepper\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "item",
          "type": "ProgressStepper",
          "complexType": {
            "original": "ProgressStepper",
            "resolved": "ProgressStepper",
            "references": {
              "ProgressStepper": {
                "location": "import",
                "path": "./models/progress-stepper.model",
                "id": "src/components/np-progress-stepper/models/progress-stepper.model.ts::ProgressStepper"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ProgressStepper"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stepString",
          "type": "ProgressType",
          "complexType": {
            "original": "ProgressType",
            "resolved": "ProgressType",
            "references": {
              "ProgressType": {
                "location": "import",
                "path": "./models/progress-type.model",
                "id": "src/components/np-progress-stepper/models/progress-type.model.ts::ProgressType"
              }
            }
          },
          "mutable": false,
          "attr": "stepstring",
          "reflectToAttr": false,
          "docs": "the type of stepString",
          "docsTags": [],
          "values": [
            {
              "type": "ProgressType"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "80",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text"
      ],
      "dependencyGraph": {
        "np-progress-stepper": [
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-radio-button/np-radio-button.tsx",
      "encapsulation": "shadow",
      "tag": "np-radio-button",
      "readme": "# np-radio-button\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Set icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "Set icon color",
          "docsTags": [],
          "default": "Color.c_scale_6",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputid",
          "reflectToAttr": false,
          "docs": "Index of the element in tabbing order.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Set switch label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the input element.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "option",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "option",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Is Outline style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size prop with a default value of 'regular'",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabindex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindex",
          "reflectToAttr": false,
          "docs": "The tabindex prop with a default value of 0",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value prop",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "RadioButtonZoomConfig",
          "complexType": {
            "original": "RadioButtonZoomConfig",
            "resolved": "RadioButtonZoomConfig",
            "references": {
              "RadioButtonZoomConfig": {
                "location": "import",
                "path": "./models/np-radio-button-zoom.model",
                "id": "src/components/np-radio-button/models/np-radio-button-zoom.model.ts::RadioButtonZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "RadioButtonZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "blurEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "The blurEvent event",
          "docsTags": []
        },
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "The clickEvent event",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "The focusEvent event",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-radio-button": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-popup/np-resizable-draggable/np-resizable-draggable.tsx",
      "encapsulation": "none",
      "tag": "np-resizable-draggable",
      "readme": "# nc-resizable-draggable\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "dragEventTarget",
          "type": "MouseEvent | TouchEvent",
          "complexType": {
            "original": "MouseEvent | TouchEvent",
            "resolved": "MouseEvent | TouchEvent",
            "references": {
              "MouseEvent": {
                "location": "global",
                "id": "global::MouseEvent"
              },
              "TouchEvent": {
                "location": "global",
                "id": "global::TouchEvent"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "MouseEvent"
            },
            {
              "type": "TouchEvent"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragX",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-x",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dragY",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "drag-y",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "east",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "east",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ghost",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "ghost",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inViewport",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "in-viewport",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "north",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "north",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "northEast",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "north-east",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "northWest",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "north-west",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "south",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "south",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "southEast",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "south-east",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "southWest",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "south-west",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "west",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "west",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "dragEndElementEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "dragMoveEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "dragStartEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "resizeBeginEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "resizeEndEvent",
          "detail": "ResizableEvent",
          "bubbles": true,
          "complexType": {
            "original": "ResizableEvent",
            "resolved": "ResizableEvent",
            "references": {
              "ResizableEvent": {
                "location": "import",
                "path": "../models/np-resizable-draggable.interface",
                "id": "src/components/np-popup/models/np-resizable-draggable.interface.ts::ResizableEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "resizingElementEvent",
          "detail": "ResizableEvent",
          "bubbles": true,
          "complexType": {
            "original": "ResizableEvent",
            "resolved": "ResizableEvent",
            "references": {
              "ResizableEvent": {
                "location": "import",
                "path": "../models/np-resizable-draggable.interface",
                "id": "src/components/np-popup/models/np-resizable-draggable.interface.ts::ResizableEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "touchstart",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "mousedown",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-popup"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "np-popup": [
          "np-resizable-draggable"
        ]
      }
    },
    {
      "filePath": "src/components/np-select-box/np-select-box.tsx",
      "encapsulation": "shadow",
      "tag": "np-select-box",
      "readme": "# nc-selectbox\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "appendTo",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "appendto",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ariaFilterLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "ariafilterlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ariaLabelledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "arialabelledby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autoZIndex",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autozindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocusFilter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autofocusfilter",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "baseZIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "basezindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dataKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "datakey",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "defaultlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If component is disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "display",
          "type": "SelectBoxDisplay.Chip | SelectBoxDisplay.Comma",
          "complexType": {
            "original": "SelectBoxDisplay",
            "resolved": "SelectBoxDisplay.Chip | SelectBoxDisplay.Comma",
            "references": {
              "SelectBoxDisplay": {
                "location": "import",
                "path": "./models/np-select-box.enum",
                "id": "src/components/np-select-box/models/np-select-box.enum.ts::SelectBoxDisplay"
              }
            }
          },
          "mutable": false,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "SelectBoxDisplay.Comma",
          "values": [
            {
              "type": "SelectBoxDisplay.Chip"
            },
            {
              "type": "SelectBoxDisplay.Comma"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displaySelectedLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "displayselectedlabel",
          "reflectToAttr": false,
          "docs": "Display Selected Label",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dropdownIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dropdownicon",
          "reflectToAttr": false,
          "docs": "Dropdown Icon",
          "docsTags": [],
          "default": "'icon_arrow'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyFilterMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "emptyfiltermessage",
          "reflectToAttr": false,
          "docs": "Empty Filter Message",
          "docsTags": [],
          "default": "'No results found'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "filter",
          "reflectToAttr": false,
          "docs": "If it has filter input",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterby",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filtericon",
          "reflectToAttr": false,
          "docs": "Filter icon",
          "docsTags": [],
          "default": "'icon_search'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterLocale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterlocale",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterMatchMode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filtermatchmode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'contains'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterPlaceHolder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filterplaceholder",
          "reflectToAttr": false,
          "docs": "Filter PlaceHolder",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "filtervalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fixedDropdown",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fixeddropdown",
          "reflectToAttr": false,
          "docs": "flag to fix dropdown position",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusOnSelectedItem",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "focusonselecteditem",
          "reflectToAttr": false,
          "docs": "Focus on the selectedItem",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideTransitionOptions",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hidetransitionoptions",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'.1s linear'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Item identifier",
          "docsTags": [],
          "default": "'id'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "itemTemplate",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "itemtemplate",
          "reflectToAttr": false,
          "docs": "template for each list item",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelFormatter",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "labelformatter",
          "reflectToAttr": false,
          "docs": "Item label format",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxSelectedLabels",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxselectedlabels",
          "reflectToAttr": false,
          "docs": "Max number of displayed items",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name attribute for the input element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numeric",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "numeric",
          "reflectToAttr": false,
          "docs": "If component is numeric",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionDisabled",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optiondisabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionGroupChildren",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optiongroupchildren",
          "reflectToAttr": false,
          "docs": "Property name, if the item has children",
          "docsTags": [],
          "default": "'children'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionGroupLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optiongrouplabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionlabel",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "reverse variable colors",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayAditionalWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "overlayaditionalwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayMaxHeight",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "overlaymaxheight",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlayVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "overlayvisible",
          "reflectToAttr": false,
          "docs": "Dropdown state (open/close)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "panelstyle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "panelstyleclass",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'placeholder'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderItem",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholderitem",
          "reflectToAttr": false,
          "docs": "Placeholder content",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "popup",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "popup",
          "reflectToAttr": false,
          "docs": "Sets style when component is used to open pop up",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If component is readonly",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If selection is mandatory",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resetFilterOnHide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "resetfilteronhide",
          "reflectToAttr": false,
          "docs": "Reset Filter On Hide",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollToSelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrolltoselected",
          "reflectToAttr": false,
          "docs": "Scroll to the selected item",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectAllLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selectalllabel",
          "reflectToAttr": false,
          "docs": "Label to the checkbox that selects all items",
          "docsTags": [],
          "default": "'Select All'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedIconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "selectediconcolor",
          "reflectToAttr": false,
          "docs": "Color of the selected icon",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItemsLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "selecteditemslabel",
          "reflectToAttr": false,
          "docs": "Selected Items Label",
          "docsTags": [],
          "default": "'ellipsis'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItemsTemplate",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selecteditemstemplate",
          "reflectToAttr": false,
          "docs": "template for selected items",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionLimit",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectionlimit",
          "reflectToAttr": false,
          "docs": "Max number of selected items",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../models/selection-mode.enum",
                "id": "src/components/models/selection-mode.enum.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "Selection mode",
          "docsTags": [],
          "default": "SelectionMode.Multiple",
          "values": [
            {
              "type": "SelectionMode.Multiple"
            },
            {
              "type": "SelectionMode.MultipleToggle"
            },
            {
              "type": "SelectionMode.Single"
            },
            {
              "type": "SelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDescription",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showdescription",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showheader",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showTransitionOptions",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "showtransitionoptions",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'.12s cubic-bezier(0, 0, 0.2, 1)'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Component Size",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Set state used in the componet",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleInline",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "styleinline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabIndexValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindexvalue",
          "reflectToAttr": false,
          "docs": "Tab Index Value",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "tooltip label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipposition",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'right'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipPositionStyle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltippositionstyle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'absolute'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipstyleclass",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "SelectBoxType.Color | SelectBoxType.Icon | SelectBoxType.Img | SelectBoxType.Label",
          "complexType": {
            "original": "SelectBoxType",
            "resolved": "SelectBoxType.Color | SelectBoxType.Icon | SelectBoxType.Img | SelectBoxType.Label",
            "references": {
              "SelectBoxType": {
                "location": "import",
                "path": "./models/np-select-box.enum",
                "id": "src/components/np-select-box/models/np-select-box.enum.ts::SelectBoxType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Component Type",
          "docsTags": [],
          "default": "SelectBoxType.Label",
          "values": [
            {
              "type": "SelectBoxType.Color"
            },
            {
              "type": "SelectBoxType.Icon"
            },
            {
              "type": "SelectBoxType.Img"
            },
            {
              "type": "SelectBoxType.Label"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "virtualScroll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "virtualscroll",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "waitForOptions",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "waitforoptions",
          "reflectToAttr": false,
          "docs": "To be used when using onClick to set options",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "SelectBoxZoomConfig",
          "complexType": {
            "original": "SelectBoxZoomConfig",
            "resolved": "SelectBoxZoomConfig",
            "references": {
              "SelectBoxZoomConfig": {
                "location": "import",
                "path": "./models/np-select-box.model",
                "id": "src/components/np-select-box/models/np-select-box.model.ts::SelectBoxZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "SelectBoxZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when value changes",
          "docsTags": []
        },
        {
          "event": "clickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when component is clicked",
          "docsTags": []
        },
        {
          "event": "enterApplyEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when enter key is pressed and apply is triggered",
          "docsTags": []
        },
        {
          "event": "filterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when filter value changes",
          "docsTags": []
        },
        {
          "event": "panelHideEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when panel is hidden",
          "docsTags": []
        },
        {
          "event": "panelShowEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when panel is shown",
          "docsTags": []
        },
        {
          "event": "selectBoxChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when value changes",
          "docsTags": []
        },
        {
          "event": "updateStateEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when state is updated",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-color-picker",
        "np-input-selector",
        "np-list-template"
      ],
      "dependencies": [
        "np-text",
        "np-icon",
        "np-check-box",
        "np-select-item",
        "np-virtual-scroller",
        "np-chips",
        "np-input"
      ],
      "dependencyGraph": {
        "np-select-box": [
          "np-text",
          "np-icon",
          "np-check-box",
          "np-select-item",
          "np-virtual-scroller",
          "np-chips",
          "np-input"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-select-item": [
          "np-check-box",
          "np-icon",
          "np-text"
        ],
        "np-chips": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-color-picker": [
          "np-select-box"
        ],
        "np-input-selector": [
          "np-select-box"
        ],
        "np-list-template": [
          "np-select-box"
        ]
      }
    },
    {
      "filePath": "src/components/np-select-box/np-select-item/np-select-item.tsx",
      "encapsulation": "none",
      "tag": "np-select-item",
      "readme": "# nc-selectitem\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If the item is disabled or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The item's label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "numeric",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "numeric",
          "reflectToAttr": false,
          "docs": "If the item is of the numeric type",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "option",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "option",
          "reflectToAttr": false,
          "docs": "The item data",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "If the item is selected or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedIconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "selectediconcolor",
          "reflectToAttr": false,
          "docs": "The color of the selected icon",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
          "complexType": {
            "original": "SelectionMode",
            "resolved": "SelectionMode.Multiple | SelectionMode.MultipleToggle | SelectionMode.Single | SelectionMode.Toggle",
            "references": {
              "SelectionMode": {
                "location": "import",
                "path": "../../models/selection-mode.enum",
                "id": "src/components/models/selection-mode.enum.ts::SelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "The list's selection mode",
          "docsTags": [],
          "default": "SelectionMode.Single",
          "values": [
            {
              "type": "SelectionMode.Multiple"
            },
            {
              "type": "SelectionMode.MultipleToggle"
            },
            {
              "type": "SelectionMode.Single"
            },
            {
              "type": "SelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDescription",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showdescription",
          "reflectToAttr": false,
          "docs": "if true, the item's description will be visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets the size of the item's text and icons",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "template",
          "type": "any",
          "complexType": {
            "original": "((option: any, selected: boolean, label: string) => VNode | string) | any",
            "resolved": "any",
            "references": {
              "VNode": {
                "location": "import",
                "path": "@stencil/core",
                "id": "node_modules::VNode"
              }
            }
          },
          "mutable": false,
          "attr": "template",
          "reflectToAttr": false,
          "docs": "The template of the item",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "zoomPercentageConfig",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "The config of the zoom percentage",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "itemClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmits value whenever the item is clicked\r\n{originalEvent: Event, option: any }",
          "docsTags": []
        },
        {
          "event": "itemKeydownEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emmits value whenever an key is pressed on the item\r\n{originalEvent: Event, option: any }",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-select-box"
      ],
      "dependencies": [
        "np-check-box",
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-select-item": [
          "np-check-box",
          "np-icon",
          "np-text"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-select-box": [
          "np-select-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-selector/np-selector.tsx",
      "encapsulation": "shadow",
      "tag": "np-selector",
      "readme": "# nc-selection\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color used on the Selector tabs",
          "docsTags": [
            {
              "name": "name",
              "text": "Color"
            },
            {
              "name": "type",
              "text": "{Color} from Devkit"
            },
            {
              "name": "default",
              "text": "c_scale_12"
            }
          ],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customGridTemplateStyle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "customgridtemplatestyle",
          "reflectToAttr": false,
          "docs": "Custom grid template columns style",
          "docsTags": [
            {
              "name": "name",
              "text": "CustomGridTemplateStyle"
            },
            {
              "name": "type",
              "text": "{string}"
            },
            {
              "name": "default",
              "text": "null"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableall",
          "reflectToAttr": false,
          "docs": "Defines if all Selector tabs are disabled or not",
          "docsTags": [
            {
              "name": "name",
              "text": "DisableAll"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, all Selector tabs are disabled"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableSelectorsWrap",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableselectorswrap",
          "reflectToAttr": false,
          "docs": "Disable or enable the Selector tabs to wraping",
          "docsTags": [
            {
              "name": "name",
              "text": "DisableSelectorsWrap"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the Selector tabs will not be wrapped"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fullwidth",
          "reflectToAttr": false,
          "docs": "Define if the Selector should ocupie the full width of his container or not",
          "docsTags": [
            {
              "name": "name",
              "text": "FullWidth"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the Selector will ocupie the full width of his container"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gridStyle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "gridstyle",
          "reflectToAttr": false,
          "docs": "Defines if the  \"display: grid\" style should be apply on the Selector or not",
          "docsTags": [
            {
              "name": "name",
              "text": "GridStyle"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the grid style will be applied"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCheck",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecheck",
          "reflectToAttr": false,
          "docs": "Difines if the checkmark is hidden or not",
          "docsTags": [
            {
              "name": "name",
              "text": "HideCheck"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the checkmark is hidden"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "SelectorModel[]",
          "complexType": {
            "original": "SelectorModel[]",
            "resolved": "SelectorModel[]",
            "references": {
              "SelectorModel": {
                "location": "import",
                "path": "./models/np-selector.model",
                "id": "src/components/np-selector/models/np-selector.model.ts::SelectorModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List of items to show on the Selector as tabs",
          "docsTags": [
            {
              "name": "name",
              "text": "Items"
            },
            {
              "name": "type",
              "text": "{SelectorModel[]} from Selector Models"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "SelectorModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minwidth",
          "reflectToAttr": false,
          "docs": "Minimum width of the Selector elements",
          "docsTags": [
            {
              "name": "name",
              "text": "MinWidth"
            },
            {
              "name": "type",
              "text": "{number}"
            },
            {
              "name": "default",
              "text": "0"
            }
          ],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Defines if the selector is set as readonly or not",
          "docsTags": [
            {
              "name": "name",
              "text": "Readonly"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the selector is set as readonly"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "SelectorModel[]",
          "complexType": {
            "original": "SelectorModel[]",
            "resolved": "SelectorModel[]",
            "references": {
              "SelectorModel": {
                "location": "import",
                "path": "./models/np-selector.model",
                "id": "src/components/np-selector/models/np-selector.model.ts::SelectorModel"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "List of tabs that are selected on the Selector",
          "docsTags": [
            {
              "name": "name",
              "text": "SelectedItems"
            },
            {
              "name": "type",
              "text": "{SelectorModel[]} from Selector Models"
            }
          ],
          "default": "[]",
          "values": [
            {
              "type": "SelectorModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectorSelectionMode.Multiple | SelectorSelectionMode.Single | SelectorSelectionMode.Toggle",
          "complexType": {
            "original": "SelectorSelectionMode",
            "resolved": "SelectorSelectionMode.Multiple | SelectorSelectionMode.Single | SelectorSelectionMode.Toggle",
            "references": {
              "SelectorSelectionMode": {
                "location": "import",
                "path": "./models/np-selector.enum",
                "id": "src/components/np-selector/models/np-selector.enum.ts::SelectorSelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "Type of selection to the selector",
          "docsTags": [
            {
              "name": "name",
              "text": "SelectionMode"
            },
            {
              "name": "type",
              "text": "{SelectorSelectionMode} from Selector Models"
            },
            {
              "name": "default",
              "text": "Single"
            }
          ],
          "default": "SelectorSelectionMode.Single",
          "values": [
            {
              "type": "SelectorSelectionMode.Multiple"
            },
            {
              "type": "SelectorSelectionMode.Single"
            },
            {
              "type": "SelectorSelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectorStyle",
          "type": "SelectorStyle.Landscape | SelectorStyle.Portrait",
          "complexType": {
            "original": "SelectorStyle",
            "resolved": "SelectorStyle.Landscape | SelectorStyle.Portrait",
            "references": {
              "SelectorStyle": {
                "location": "import",
                "path": "./models/np-selector.enum",
                "id": "src/components/np-selector/models/np-selector.enum.ts::SelectorStyle"
              }
            }
          },
          "mutable": false,
          "attr": "selectorstyle",
          "reflectToAttr": false,
          "docs": "Landscape type used on the Selector",
          "docsTags": [
            {
              "name": "name",
              "text": "SelectorStyle"
            },
            {
              "name": "type",
              "text": "{SelectorStyle} from Selector Models"
            },
            {
              "name": "default",
              "text": "Landscape"
            }
          ],
          "default": "SelectorStyle.Landscape",
          "values": [
            {
              "type": "SelectorStyle.Landscape"
            },
            {
              "type": "SelectorStyle.Portrait"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDescription",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showdescription",
          "reflectToAttr": false,
          "docs": "Defines if the element's Description are shown or not",
          "docsTags": [
            {
              "name": "name",
              "text": "ShowDescription"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the description will be shown"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showTitle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showtitle",
          "reflectToAttr": false,
          "docs": "Defines if the element's Title are shown or not",
          "docsTags": [
            {
              "name": "name",
              "text": "ShowTitle"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the title will be shown"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "SelectorSize.Large | SelectorSize.Medium | SelectorSize.Regular | SelectorSize.Small",
          "complexType": {
            "original": "SelectorSize",
            "resolved": "SelectorSize.Large | SelectorSize.Medium | SelectorSize.Regular | SelectorSize.Small",
            "references": {
              "SelectorSize": {
                "location": "import",
                "path": "./models/np-selector.enum",
                "id": "src/components/np-selector/models/np-selector.enum.ts::SelectorSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the Selector tab",
          "docsTags": [
            {
              "name": "name",
              "text": "Size"
            },
            {
              "name": "type",
              "text": "{SelectorSize} from Selector Models"
            },
            {
              "name": "default",
              "text": "Regular"
            }
          ],
          "default": "SelectorSize.Regular",
          "values": [
            {
              "type": "SelectorSize.Large"
            },
            {
              "type": "SelectorSize.Medium"
            },
            {
              "type": "SelectorSize.Regular"
            },
            {
              "type": "SelectorSize.Small"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "State of the selector",
          "docsTags": [
            {
              "name": "name",
              "text": "State"
            },
            {
              "name": "type",
              "text": "{States} from generic models"
            }
          ],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "Message for the state",
          "docsTags": [
            {
              "name": "name",
              "text": "StateMessage"
            },
            {
              "name": "type",
              "text": "{string}"
            },
            {
              "name": "default",
              "text": "null"
            }
          ],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleBackground",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "titlebackground",
          "reflectToAttr": false,
          "docs": "Defines if the element's Title have a background or not",
          "docsTags": [
            {
              "name": "name",
              "text": "TitleBackground"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "If true, the title will have a background"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleLenght",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "titlelenght",
          "reflectToAttr": false,
          "docs": "lenght of the title on each Selector element",
          "docsTags": [
            {
              "name": "name",
              "text": "TitleLenght"
            },
            {
              "name": "type",
              "text": "{number}"
            },
            {
              "name": "default",
              "text": "2"
            }
          ],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "SelectorType.Icon | SelectorType.Image | SelectorType.Number | SelectorType.Text",
          "complexType": {
            "original": "SelectorType",
            "resolved": "SelectorType.Icon | SelectorType.Image | SelectorType.Number | SelectorType.Text",
            "references": {
              "SelectorType": {
                "location": "import",
                "path": "./models/np-selector.enum",
                "id": "src/components/np-selector/models/np-selector.enum.ts::SelectorType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of Selector",
          "docsTags": [
            {
              "name": "name",
              "text": "Type"
            },
            {
              "name": "type",
              "text": "{SelectorType} from Selector Models"
            },
            {
              "name": "default",
              "text": "Text"
            }
          ],
          "default": "SelectorType.Text",
          "values": [
            {
              "type": "SelectorType.Icon"
            },
            {
              "type": "SelectorType.Image"
            },
            {
              "type": "SelectorType.Number"
            },
            {
              "type": "SelectorType.Text"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "SelectorZoomConfig",
          "complexType": {
            "original": "SelectorZoomConfig",
            "resolved": "SelectorZoomConfig",
            "references": {
              "SelectorZoomConfig": {
                "location": "import",
                "path": "./models/np-selector.model",
                "id": "src/components/np-selector/models/np-selector.model.ts::SelectorZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Zoom configuration to apply on the component",
          "docsTags": [
            {
              "name": "name",
              "text": "ZoomPercentageConfig"
            },
            {
              "name": "type",
              "text": "{SelectorZoomConfig} from Selector Models"
            }
          ],
          "values": [
            {
              "type": "SelectorZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "SelectorModel[]",
          "bubbles": true,
          "complexType": {
            "original": "SelectorModel[]",
            "resolved": "SelectorModel[]",
            "references": {
              "SelectorModel": {
                "location": "import",
                "path": "./models/np-selector.model",
                "id": "src/components/np-selector/models/np-selector.model.ts::SelectorModel"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the Selector tabs that are selected changes",
          "docsTags": [
            {
              "name": "name",
              "text": "ChangeEvent"
            },
            {
              "name": "type",
              "text": "{EventEmitter}"
            },
            {
              "name": "event",
              "text": "changeEvent"
            },
            {
              "name": "emits",
              "text": "Custom event with the list of the Selector elements that are selected"
            }
          ]
        },
        {
          "event": "dblClickEvent",
          "detail": "SelectorModel",
          "bubbles": true,
          "complexType": {
            "original": "SelectorModel",
            "resolved": "SelectorModel",
            "references": {
              "SelectorModel": {
                "location": "import",
                "path": "./models/np-selector.model",
                "id": "src/components/np-selector/models/np-selector.model.ts::SelectorModel"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when a double click on an Selector element is made",
          "docsTags": [
            {
              "name": "name",
              "text": "DblClickEvent"
            },
            {
              "name": "type",
              "text": "{EventEmitter}"
            },
            {
              "name": "event",
              "text": "dblClickEvent"
            },
            {
              "name": "emits",
              "text": "Custom event with the Selector element that was double clicked"
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-color-picker"
      ],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-selector": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-color-picker": [
          "np-selector"
        ]
      }
    },
    {
      "filePath": "src/components/np-side-tab/np-side-tab.tsx",
      "encapsulation": "shadow",
      "tag": "np-side-tab",
      "readme": "# np-side-tab\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Default Color to icon and label",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableall",
          "reflectToAttr": false,
          "docs": "Disable all items",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "iconsize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "SideTabModel[]",
          "complexType": {
            "original": "Array<SideTabModel>",
            "resolved": "SideTabModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "SideTabModel": {
                "location": "import",
                "path": "./models/np-side-tab.model",
                "id": "src/components/np-side-tab/models/np-side-tab.model.ts::SideTabModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Side Tab List",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "SideTabModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder to search input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resultsToSearchInput",
          "type": "SideTabModel[]",
          "complexType": {
            "original": "Array<SideTabModel>",
            "resolved": "SideTabModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "SideTabModel": {
                "location": "import",
                "path": "./models/np-side-tab.model",
                "id": "src/components/np-side-tab/models/np-side-tab.model.ts::SideTabModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Result to search input",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "SideTabModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "search",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "search",
          "reflectToAttr": false,
          "docs": "Show input to search",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "SideTabModel[]",
          "complexType": {
            "original": "Array<SideTabModel>",
            "resolved": "SideTabModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "SideTabModel": {
                "location": "import",
                "path": "./models/np-side-tab.model",
                "id": "src/components/np-side-tab/models/np-side-tab.model.ts::SideTabModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Side Tab Selected List",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "SideTabModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "SelectionModeSideTab.Multiple | SelectionModeSideTab.Single | SelectionModeSideTab.Toggle",
          "complexType": {
            "original": "SelectionModeSideTab",
            "resolved": "SelectionModeSideTab.Multiple | SelectionModeSideTab.Single | SelectionModeSideTab.Toggle",
            "references": {
              "SelectionModeSideTab": {
                "location": "import",
                "path": "./models/np-side-tab.enum",
                "id": "src/components/np-side-tab/models/np-side-tab.enum.ts::SelectionModeSideTab"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "Select list mode",
          "docsTags": [],
          "default": "SelectionModeSideTab.Toggle",
          "values": [
            {
              "type": "SelectionModeSideTab.Multiple"
            },
            {
              "type": "SelectionModeSideTab.Single"
            },
            {
              "type": "SelectionModeSideTab.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showItemDescription",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showitemdescription",
          "reflectToAttr": false,
          "docs": "If item description should be shown or not, depite the items having a description field",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "SizeSideTab.Large | SizeSideTab.Medium | SizeSideTab.Regular | SizeSideTab.Small",
          "complexType": {
            "original": "SizeSideTab",
            "resolved": "SizeSideTab.Large | SizeSideTab.Medium | SizeSideTab.Regular | SizeSideTab.Small",
            "references": {
              "SizeSideTab": {
                "location": "import",
                "path": "./models/np-side-tab.enum",
                "id": "src/components/np-side-tab/models/np-side-tab.enum.ts::SizeSideTab"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "SizeSideTab.Regular",
          "values": [
            {
              "type": "SizeSideTab.Large"
            },
            {
              "type": "SizeSideTab.Medium"
            },
            {
              "type": "SizeSideTab.Regular"
            },
            {
              "type": "SizeSideTab.Small"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabindex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "SideTabZoomConfig",
          "complexType": {
            "original": "SideTabZoomConfig",
            "resolved": "SideTabZoomConfig",
            "references": {
              "SideTabZoomConfig": {
                "location": "import",
                "path": "./models/np-side-tab.model",
                "id": "src/components/np-side-tab/models/np-side-tab.model.ts::SideTabZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "SideTabZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "dblClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Double click event",
          "docsTags": []
        },
        {
          "event": "filterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Filter Event search input",
          "docsTags": []
        },
        {
          "event": "selectedItemsChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Change Selected side tab list",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-text",
        "np-input"
      ],
      "dependencyGraph": {
        "np-side-tab": [
          "np-icon",
          "np-text",
          "np-input"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-side-view/np-side-view.tsx",
      "encapsulation": "shadow",
      "tag": "np-side-view",
      "readme": "# nc-side-view\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "categories",
          "type": "SideViewModel[]",
          "complexType": {
            "original": "Array<SideViewModel>",
            "resolved": "SideViewModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "SideViewModel": {
                "location": "import",
                "path": "./models/np-side-view.interface",
                "id": "src/components/np-side-view/models/np-side-view.interface.ts::SideViewModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "SideViewModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "centered",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "centered",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "descriptionWeight",
          "type": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
          "complexType": {
            "original": "FontWeight",
            "resolved": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
            "references": {
              "FontWeight": {
                "location": "import",
                "path": "../models/weight.enum",
                "id": "src/components/models/weight.enum.ts::FontWeight"
              }
            }
          },
          "mutable": false,
          "attr": "descriptionweight",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "FontWeight.W500",
          "values": [
            {
              "type": "FontWeight.Bold"
            },
            {
              "type": "FontWeight.Bolder"
            },
            {
              "type": "FontWeight.Lighter"
            },
            {
              "type": "FontWeight.Normal"
            },
            {
              "type": "FontWeight.Regular"
            },
            {
              "type": "FontWeight.Semibold"
            },
            {
              "type": "FontWeight.W100"
            },
            {
              "type": "FontWeight.W200"
            },
            {
              "type": "FontWeight.W300"
            },
            {
              "type": "FontWeight.W400"
            },
            {
              "type": "FontWeight.W500"
            },
            {
              "type": "FontWeight.W600"
            },
            {
              "type": "FontWeight.W700"
            },
            {
              "type": "FontWeight.W800"
            },
            {
              "type": "FontWeight.W900"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterConfig",
          "type": "FiltersInfoModel",
          "complexType": {
            "original": "FiltersInfoModel",
            "resolved": "FiltersInfoModel",
            "references": {
              "FiltersInfoModel": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterTranslations",
          "type": "FiltersInfoTranslations",
          "complexType": {
            "original": "FiltersInfoTranslations",
            "resolved": "FiltersInfoTranslations",
            "references": {
              "FiltersInfoTranslations": {
                "location": "import",
                "path": "../np-filters-info/models/np-filters-info.model",
                "id": "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoTranslations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "FiltersInfoTranslations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelect",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "() => {\r\n    return true;\r\n  }",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectactive",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasSearchInput",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hassearchinput",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasTypeButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hastypebutton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconNoResults",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconnoresults",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelWeight",
          "type": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
          "complexType": {
            "original": "FontWeight",
            "resolved": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
            "references": {
              "FontWeight": {
                "location": "import",
                "path": "../models/weight.enum",
                "id": "src/components/models/weight.enum.ts::FontWeight"
              }
            }
          },
          "mutable": false,
          "attr": "labelweight",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "FontWeight.W600",
          "values": [
            {
              "type": "FontWeight.Bold"
            },
            {
              "type": "FontWeight.Bolder"
            },
            {
              "type": "FontWeight.Lighter"
            },
            {
              "type": "FontWeight.Normal"
            },
            {
              "type": "FontWeight.Regular"
            },
            {
              "type": "FontWeight.Semibold"
            },
            {
              "type": "FontWeight.W100"
            },
            {
              "type": "FontWeight.W200"
            },
            {
              "type": "FontWeight.W300"
            },
            {
              "type": "FontWeight.W400"
            },
            {
              "type": "FontWeight.W500"
            },
            {
              "type": "FontWeight.W600"
            },
            {
              "type": "FontWeight.W700"
            },
            {
              "type": "FontWeight.W800"
            },
            {
              "type": "FontWeight.W900"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "newStyle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "newstyle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "SideViewModel",
          "complexType": {
            "original": "SideViewModel",
            "resolved": "SideViewModel",
            "references": {
              "SideViewModel": {
                "location": "import",
                "path": "./models/np-side-view.interface",
                "id": "src/components/np-side-view/models/np-side-view.interface.ts::SideViewModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "SideViewModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showheader",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sideviewBackgroundColor",
          "type": "string",
          "complexType": {
            "original": "Color | string | null",
            "resolved": "string",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "sideviewbackgroundcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unsetMinHeight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "unsetminheight",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "SideViewZoomConfigs",
          "complexType": {
            "original": "SideViewZoomConfigs",
            "resolved": "SideViewZoomConfigs",
            "references": {
              "SideViewZoomConfigs": {
                "location": "import",
                "path": "./models/np-side-view.model",
                "id": "src/components/np-side-view/models/np-side-view.model.ts::SideViewZoomConfigs"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "SideViewZoomConfigs"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "onSelect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(item: any) => Promise<void>",
            "parameters": [
              {
                "name": "item",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "onSelect(item: any) => Promise<void>",
          "parameters": [
            {
              "name": "item",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "filterEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "selectedChangeEvent",
          "detail": "SideViewModel",
          "bubbles": true,
          "complexType": {
            "original": "SideViewModel",
            "resolved": "SideViewModel",
            "references": {
              "SideViewModel": {
                "location": "import",
                "path": "./models/np-side-view.interface",
                "id": "src/components/np-side-view/models/np-side-view.interface.ts::SideViewModel"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-text",
        "np-filters-info",
        "np-input",
        "np-button-group"
      ],
      "dependencyGraph": {
        "np-side-view": [
          "np-icon",
          "np-text",
          "np-filters-info",
          "np-input",
          "np-button-group"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-filters-info": [
          "np-icon",
          "np-text"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-button-group": [
          "np-icon",
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-slider/np-slider.tsx",
      "encapsulation": "shadow",
      "tag": "np-slider",
      "readme": "# np-slider\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disableAnimation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableanimation",
          "reflectToAttr": false,
          "docs": "Disable or enable te animation, on the handler, while the value change",
          "docsTags": [
            {
              "name": "name",
              "text": "DisableAnimation"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if the slider its disabled or enabled",
          "docsTags": [
            {
              "name": "name",
              "text": "Disabled"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Maximum value of the slider",
          "docsTags": [
            {
              "name": "name",
              "text": "Max"
            },
            {
              "name": "type",
              "text": "{number}"
            },
            {
              "name": "default",
              "text": "100"
            }
          ],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Minimun value of the slider",
          "docsTags": [
            {
              "name": "name",
              "text": "Min"
            },
            {
              "name": "type",
              "text": "{number}"
            },
            {
              "name": "default",
              "text": "0"
            }
          ],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "Orientation.Horizontal | Orientation.Vertical",
          "complexType": {
            "original": "Orientation",
            "resolved": "Orientation.Horizontal | Orientation.Vertical",
            "references": {
              "Orientation": {
                "location": "import",
                "path": "../models/orientation.enum",
                "id": "src/components/models/orientation.enum.ts::Orientation"
              }
            }
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Orientation of the slider",
          "docsTags": [
            {
              "name": "name",
              "text": "Orientation"
            },
            {
              "name": "type",
              "text": "{Orientation} from Slider Models"
            },
            {
              "name": "default",
              "text": "Horizontal"
            }
          ],
          "default": "Orientation.Horizontal",
          "values": [
            {
              "type": "Orientation.Horizontal"
            },
            {
              "type": "Orientation.Vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "range",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "range",
          "reflectToAttr": false,
          "docs": "Define the slider its \"range\" mode or not",
          "docsTags": [
            {
              "name": "name",
              "text": "Range"
            },
            {
              "name": "type",
              "text": "{boolean}"
            },
            {
              "name": "description",
              "text": "In \"range\" mode the slider have 2 handles and works with 2 values, inital and final values, creating a \"range\""
            },
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sliderStyle",
          "type": "SliderStyle",
          "complexType": {
            "original": "SliderStyle",
            "resolved": "SliderStyle",
            "references": {
              "SliderStyle": {
                "location": "import",
                "path": "./models/np-slider.model",
                "id": "src/components/np-slider/models/np-slider.model.ts::SliderStyle"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Slider style configuration",
          "docsTags": [
            {
              "name": "name",
              "text": "SliderStyle from Slider Models"
            },
            {
              "name": "type",
              "text": "{Object}"
            },
            {
              "name": "description",
              "text": "Object with some styles that can be configurated on the slider"
            }
          ],
          "values": [
            {
              "type": "SliderStyle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Value of the slider step",
          "docsTags": [
            {
              "name": "name",
              "text": "Step"
            },
            {
              "name": "type",
              "text": "{number}"
            },
            {
              "name": "default",
              "text": "1"
            }
          ],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | number[]",
          "complexType": {
            "original": "number | number[]",
            "resolved": "number | number[]",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value or Values on the slider",
          "docsTags": [
            {
              "name": "name",
              "text": "Value"
            },
            {
              "name": "type",
              "text": "{number | number[]}"
            },
            {
              "name": "description",
              "text": "This can be a unique value or an array with 2 values, in case of the propertie \"range\" being defined as \"false\" or \"true\", respectively"
            }
          ],
          "default": "0",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when some value on the slider change",
          "docsTags": [
            {
              "name": "name",
              "text": "ChangeEvent"
            },
            {
              "name": "type",
              "text": "{EventEmitter}"
            },
            {
              "name": "event",
              "text": "changeEvent"
            },
            {
              "name": "emits",
              "text": "Custom event with the current value, or values, on the slider"
            }
          ]
        },
        {
          "event": "slideEndEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the \"slide action\" ends",
          "docsTags": [
            {
              "name": "name",
              "text": "SlideEndEvent"
            },
            {
              "name": "type",
              "text": "{EventEmitter}"
            },
            {
              "name": "event",
              "text": "slideEndEvent"
            },
            {
              "name": "emits",
              "text": "Custom event with the current value, or values, on the slider"
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/np-split/np-split.tsx",
      "encapsulation": "shadow",
      "tag": "np-split",
      "readme": "# np-split\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "collapseHandlerBgColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "collapsehandlerbgcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Color.c_scale_4",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapseHandlerIconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "collapsehandlericoncolor",
          "reflectToAttr": false,
          "docs": "Configures the icon color of the collapse handler.",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapseIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "collapseicon",
          "reflectToAttr": false,
          "docs": "Defines the icon used for the collapse handler.",
          "docsTags": [],
          "default": "'icon_arrow-thick-left'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "collapseSide",
          "type": "ElementPosition.Left | ElementPosition.Right",
          "complexType": {
            "original": "ElementPosition",
            "resolved": "ElementPosition.Left | ElementPosition.Right",
            "references": {
              "ElementPosition": {
                "location": "import",
                "path": "../models/element-position.enum",
                "id": "src/components/models/element-position.enum.ts::ElementPosition"
              }
            }
          },
          "mutable": false,
          "attr": "collapseside",
          "reflectToAttr": false,
          "docs": "Defines the side where the collapse handler is located.",
          "docsTags": [],
          "default": "ElementPosition.Right",
          "values": [
            {
              "type": "ElementPosition.Left"
            },
            {
              "type": "ElementPosition.Right"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "direct",
          "type": "SplitAreaDirection.Ltr | SplitAreaDirection.Rtl",
          "complexType": {
            "original": "SplitAreaDirection",
            "resolved": "SplitAreaDirection.Ltr | SplitAreaDirection.Rtl",
            "references": {
              "SplitAreaDirection": {
                "location": "import",
                "path": "./models/np-split.enum",
                "id": "src/components/np-split/models/np-split.enum.ts::SplitAreaDirection"
              }
            }
          },
          "mutable": false,
          "attr": "direct",
          "reflectToAttr": false,
          "docs": "Defines the text direction of the component (left-to-right or right-to-left).",
          "docsTags": [],
          "default": "SplitAreaDirection.Ltr",
          "values": [
            {
              "type": "SplitAreaDirection.Ltr"
            },
            {
              "type": "SplitAreaDirection.Rtl"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "direction",
          "type": "Direction.horizontal | Direction.vertical",
          "complexType": {
            "original": "Direction",
            "resolved": "Direction.horizontal | Direction.vertical",
            "references": {
              "Direction": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Direction"
              }
            }
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "Defines the direction of the component",
          "docsTags": [],
          "default": "Direction.horizontal",
          "values": [
            {
              "type": "Direction.horizontal"
            },
            {
              "type": "Direction.vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "guttercolor",
          "reflectToAttr": false,
          "docs": "Defines the color of the gutter.",
          "docsTags": [],
          "default": "Color.c_scale_6",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterDblClickDuration",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "gutterdblclickduration",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterHandlerSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "gutterhandlersize",
          "reflectToAttr": false,
          "docs": "Defines the size of the gutter handler.",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterHoverColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "gutterhovercolor",
          "reflectToAttr": false,
          "docs": "Defines the color of the gutter when hovered.",
          "docsTags": [],
          "default": "Color.c_scale_6",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterHoverSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "gutterhoversize",
          "reflectToAttr": false,
          "docs": "Defines the size of the gutter when hovered.",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "guttersize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterStates",
          "type": "gutterStateInterface[]",
          "complexType": {
            "original": "Array<gutterStateInterface>",
            "resolved": "gutterStateInterface[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "gutterStateInterface": {
                "location": "import",
                "path": "./models/np-split.interface",
                "id": "src/components/np-split/models/np-split.interface.ts::gutterStateInterface"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the states of the gutter.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "gutterStateInterface[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "gutterStep",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "gutterstep",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasCollapseHandler",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hascollapsehandler",
          "reflectToAttr": false,
          "docs": "Determines if the component has a collapse handler.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offSetTop",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "offsettop",
          "reflectToAttr": false,
          "docs": "Defines the top offset of the component.",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offsetBottom",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "offsetbottom",
          "reflectToAttr": false,
          "docs": "Defines the bottom offset of the component.",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pickFullHeight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "pickfullheight",
          "reflectToAttr": false,
          "docs": "Expands the component to fill the available height.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "restrictMove",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "restrictmove",
          "reflectToAttr": false,
          "docs": "Determines if gutter movement is restricted.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unit",
          "type": "SplitAreaUnit.Percent | SplitAreaUnit.Pixel",
          "complexType": {
            "original": "SplitAreaUnit",
            "resolved": "SplitAreaUnit.Percent | SplitAreaUnit.Pixel",
            "references": {
              "SplitAreaUnit": {
                "location": "import",
                "path": "./models/np-split.enum",
                "id": "src/components/np-split/models/np-split.enum.ts::SplitAreaUnit"
              }
            }
          },
          "mutable": false,
          "attr": "unit",
          "reflectToAttr": false,
          "docs": "Defines the unit of measurement for sizes (percent or pixel).",
          "docsTags": [],
          "default": "SplitAreaUnit.Percent",
          "values": [
            {
              "type": "SplitAreaUnit.Percent"
            },
            {
              "type": "SplitAreaUnit.Pixel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "useTransition",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "usetransition",
          "reflectToAttr": false,
          "docs": "Enables or disables transition effects.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "addArea",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(component: HTMLNpSplitAreaElement) => Promise<void>",
            "parameters": [
              {
                "name": "component",
                "type": "HTMLNpSplitAreaElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLNpSplitAreaElement": {
                "location": "global",
                "id": "global::HTMLNpSplitAreaElement"
              },
              "IArea": {
                "location": "import",
                "path": "./models/np-split.interface",
                "id": "src/components/np-split/models/np-split.interface.ts::IArea"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "addArea(component: HTMLNpSplitAreaElement) => Promise<void>",
          "parameters": [
            {
              "name": "component",
              "type": "HTMLNpSplitAreaElement",
              "docs": ""
            }
          ],
          "docs": "Used to add a split-area inside of the split",
          "docsTags": []
        },
        {
          "name": "clickGutter",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(gutterNum: number) => Promise<void>",
            "parameters": [
              {
                "name": "gutterNum",
                "type": "number",
                "docs": "The gutter number."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clickGutter(gutterNum: number) => Promise<void>",
          "parameters": [
            {
              "name": "gutterNum",
              "type": "number",
              "docs": "The gutter number."
            }
          ],
          "docs": "Handles the click event on a gutter.",
          "docsTags": [
            {
              "name": "param",
              "text": "event The mouse or touch event."
            },
            {
              "name": "param",
              "text": "gutterNum The gutter number."
            }
          ]
        },
        {
          "name": "getVisibleAreaSizes",
          "returns": {
            "type": "Promise<number[]>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<number[]>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<number[]>"
          },
          "signature": "getVisibleAreaSizes() => Promise<number[]>",
          "parameters": [],
          "docs": "Used to get the sizes of the visible split areas",
          "docsTags": []
        },
        {
          "name": "hideArea",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(comp: HTMLNpSplitAreaElement) => Promise<void>",
            "parameters": [
              {
                "name": "comp",
                "type": "HTMLNpSplitAreaElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLNpSplitAreaElement": {
                "location": "global",
                "id": "global::HTMLNpSplitAreaElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hideArea(comp: HTMLNpSplitAreaElement) => Promise<void>",
          "parameters": [
            {
              "name": "comp",
              "type": "HTMLNpSplitAreaElement",
              "docs": ""
            }
          ],
          "docs": "Used to hide the split areas",
          "docsTags": []
        },
        {
          "name": "notify",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(type: 'start' | 'progress' | 'end' | 'click' | 'dblclick' | 'transitionEnd', gutterNum: number) => Promise<void>",
            "parameters": [
              {
                "name": "type",
                "type": "\"progress\" | \"start\" | \"end\" | \"click\" | \"dblclick\" | \"transitionEnd\"",
                "docs": "The type of event ('start', 'progress', 'end', 'click', 'dblclick', 'transitionEnd')."
              },
              {
                "name": "gutterNum",
                "type": "number",
                "docs": "The gutter number."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "notify(type: 'start' | 'progress' | 'end' | 'click' | 'dblclick' | 'transitionEnd', gutterNum: number) => Promise<void>",
          "parameters": [
            {
              "name": "type",
              "type": "\"progress\" | \"start\" | \"end\" | \"click\" | \"dblclick\" | \"transitionEnd\"",
              "docs": "The type of event ('start', 'progress', 'end', 'click', 'dblclick', 'transitionEnd')."
            },
            {
              "name": "gutterNum",
              "type": "number",
              "docs": "The gutter number."
            }
          ],
          "docs": "Notifies events related to gutter interactions.",
          "docsTags": [
            {
              "name": "param",
              "text": "type The type of event ('start', 'progress', 'end', 'click', 'dblclick', 'transitionEnd')."
            },
            {
              "name": "param",
              "text": "gutterNum The gutter number."
            }
          ]
        },
        {
          "name": "removeArea",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(component: HTMLNpSplitAreaElement) => Promise<void>",
            "parameters": [
              {
                "name": "component",
                "type": "HTMLNpSplitAreaElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLNpSplitAreaElement": {
                "location": "global",
                "id": "global::HTMLNpSplitAreaElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "removeArea(component: HTMLNpSplitAreaElement) => Promise<void>",
          "parameters": [
            {
              "name": "component",
              "type": "HTMLNpSplitAreaElement",
              "docs": ""
            }
          ],
          "docs": "Used to remove a split-area inside of the split",
          "docsTags": []
        },
        {
          "name": "setVisibleAreaSizes",
          "returns": {
            "type": "Promise<boolean>",
            "docs": ""
          },
          "complexType": {
            "signature": "(sizes: IOutputAreaSizes) => Promise<boolean>",
            "parameters": [
              {
                "name": "sizes",
                "type": "IOutputAreaSizes",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "IOutputAreaSizes": {
                "location": "import",
                "path": "./models/np-split.interface",
                "id": "src/components/np-split/models/np-split.interface.ts::IOutputAreaSizes"
              }
            },
            "return": "Promise<boolean>"
          },
          "signature": "setVisibleAreaSizes(sizes: IOutputAreaSizes) => Promise<boolean>",
          "parameters": [
            {
              "name": "sizes",
              "type": "IOutputAreaSizes",
              "docs": ""
            }
          ],
          "docs": "Used to update the size of the visible split areas",
          "docsTags": []
        },
        {
          "name": "showArea",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(component: HTMLNpSplitAreaElement) => Promise<void>",
            "parameters": [
              {
                "name": "component",
                "type": "HTMLNpSplitAreaElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLNpSplitAreaElement": {
                "location": "global",
                "id": "global::HTMLNpSplitAreaElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "showArea(component: HTMLNpSplitAreaElement) => Promise<void>",
          "parameters": [
            {
              "name": "component",
              "type": "HTMLNpSplitAreaElement",
              "docs": ""
            }
          ],
          "docs": "Used to show the split areas",
          "docsTags": []
        },
        {
          "name": "updateArea",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(component: HTMLNpSplitAreaElement, resetOrders: boolean, resetSizes: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "component",
                "type": "HTMLNpSplitAreaElement",
                "docs": ""
              },
              {
                "name": "resetOrders",
                "type": "boolean",
                "docs": ""
              },
              {
                "name": "resetSizes",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLNpSplitAreaElement": {
                "location": "global",
                "id": "global::HTMLNpSplitAreaElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "updateArea(component: HTMLNpSplitAreaElement, resetOrders: boolean, resetSizes: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "component",
              "type": "HTMLNpSplitAreaElement",
              "docs": ""
            },
            {
              "name": "resetOrders",
              "type": "boolean",
              "docs": ""
            },
            {
              "name": "resetSizes",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Used to update the styles of the split areas\r\noptionally we can use this to reset the order and sizes of the split areas",
          "docsTags": [
            {
              "name": "param",
              "text": "resetOrders"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "collapseClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the collapse handler is clicked.",
          "docsTags": []
        },
        {
          "event": "dragEndEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a drag operation ends.",
          "docsTags": []
        },
        {
          "event": "dragStartEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a drag operation starts.",
          "docsTags": []
        },
        {
          "event": "gutterClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the gutter is clicked.",
          "docsTags": []
        },
        {
          "event": "gutterDblClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the gutter is double-clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-split": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-split/np-split-area/np-split-area.tsx",
      "encapsulation": "none",
      "tag": "np-split-area",
      "readme": "# np-split-area\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "lockSize",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "locksize",
          "reflectToAttr": false,
          "docs": "Locks the size of the split area.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxsize",
          "reflectToAttr": false,
          "docs": "Defines the maximum size of the split area.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minsize",
          "reflectToAttr": false,
          "docs": "Defines the minimum size of the split area.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "order",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "order",
          "reflectToAttr": false,
          "docs": "Defines the order of the split area",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Defines the size of the split area.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "visible",
          "reflectToAttr": false,
          "docs": "Defines the visibility of the split area.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "lockEvents",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Event": {
                "location": "global",
                "id": "global::Event"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "lockEvents() => Promise<void>",
          "parameters": [],
          "docs": "Used for the np-split to add \"selectstart\" and \"dragstart\" event listener on this component",
          "docsTags": []
        },
        {
          "name": "setStyleFlex",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(grow: number, shrink: number, basis: string, isMin: boolean, isMax: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "grow",
                "type": "number",
                "docs": ""
              },
              {
                "name": "shrink",
                "type": "number",
                "docs": ""
              },
              {
                "name": "basis",
                "type": "string",
                "docs": ""
              },
              {
                "name": "isMin",
                "type": "boolean",
                "docs": ""
              },
              {
                "name": "isMax",
                "type": "boolean",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setStyleFlex(grow: number, shrink: number, basis: string, isMin: boolean, isMax: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "grow",
              "type": "number",
              "docs": ""
            },
            {
              "name": "shrink",
              "type": "number",
              "docs": ""
            },
            {
              "name": "basis",
              "type": "string",
              "docs": ""
            },
            {
              "name": "isMin",
              "type": "boolean",
              "docs": ""
            },
            {
              "name": "isMax",
              "type": "boolean",
              "docs": ""
            }
          ],
          "docs": "Used for the np-split to define the css and classes to this np-split",
          "docsTags": []
        },
        {
          "name": "setStyleOrder",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(value: number) => Promise<void>",
            "parameters": [
              {
                "name": "value",
                "type": "number",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setStyleOrder(value: number) => Promise<void>",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "docs": ""
            }
          ],
          "docs": "Used for the np-split to define the order in the dom layout of this np-split",
          "docsTags": []
        },
        {
          "name": "unlockEvents",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "unlockEvents() => Promise<void>",
          "parameters": [],
          "docs": "Used to remove add event listeners",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/np-state-card/np-state-card.tsx",
      "encapsulation": "shadow",
      "tag": "np-state-card",
      "readme": "# nc-state-card\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disableAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableall",
          "reflectToAttr": false,
          "docs": "Disable all",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "StateCardItem[]",
          "complexType": {
            "original": "Array<StateCardItem>",
            "resolved": "StateCardItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StateCardItem": {
                "location": "import",
                "path": "../np-state-card-item/models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateCardItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Disabled",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StateCardItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "StateCardItem[]",
          "complexType": {
            "original": "Array<StateCardItem>",
            "resolved": "StateCardItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StateCardItem": {
                "location": "import",
                "path": "../np-state-card-item/models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateCardItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StateCardItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "Direction.horizontal | Direction.vertical",
          "complexType": {
            "original": "Direction",
            "resolved": "Direction.horizontal | Direction.vertical",
            "references": {
              "Direction": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Direction"
              }
            }
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Orientation",
          "docsTags": [],
          "default": "Direction.horizontal",
          "values": [
            {
              "type": "Direction.horizontal"
            },
            {
              "type": "Direction.vertical"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preload",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "preload",
          "reflectToAttr": false,
          "docs": "Preloads icons",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "property",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "property",
          "reflectToAttr": false,
          "docs": "Primary key",
          "docsTags": [],
          "default": "'id'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "StateCardItem[]",
          "complexType": {
            "original": "Array<StateCardItem>",
            "resolved": "StateCardItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StateCardItem": {
                "location": "import",
                "path": "../np-state-card-item/models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateCardItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Selected",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StateCardItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spaceCards",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "spacecards",
          "reflectToAttr": false,
          "docs": "Space cards",
          "docsTags": [],
          "default": "7",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "states",
          "type": "StateOptionsModel[]",
          "complexType": {
            "original": "Array<StateOptionsModel>",
            "resolved": "StateOptionsModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StateOptionsModel": {
                "location": "import",
                "path": "../np-state-card-item/models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateOptionsModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List of states",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StateOptionsModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "StateCardItemZoomConfig",
          "complexType": {
            "original": "StateCardItemZoomConfig",
            "resolved": "StateCardItemZoomConfig",
            "references": {
              "StateCardItemZoomConfig": {
                "location": "import",
                "path": "../np-state-card-item/models/np-state-card-item.model",
                "id": "src/components/np-state-card-item/models/np-state-card-item.model.ts::StateCardItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new StateCardItemZoomConfig()",
          "values": [
            {
              "type": "StateCardItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "itemClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Called everytime the item is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-state-card-item"
      ],
      "dependencyGraph": {
        "np-state-card": [
          "np-state-card-item"
        ],
        "np-state-card-item": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-state-card-item/np-state-card-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-state-card-item",
      "readme": "# np-state-card-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disableAll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disableall",
          "reflectToAttr": false,
          "docs": "Disabled all",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "StateCardItem[]",
          "complexType": {
            "original": "Array<StateCardItem>",
            "resolved": "StateCardItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StateCardItem": {
                "location": "import",
                "path": "./models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateCardItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Disabled",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StateCardItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "item",
          "type": "StateCardItem",
          "complexType": {
            "original": "StateCardItem",
            "resolved": "StateCardItem",
            "references": {
              "StateCardItem": {
                "location": "import",
                "path": "./models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateCardItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items",
          "docsTags": [],
          "values": [
            {
              "type": "StateCardItem"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "preload",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "preload",
          "reflectToAttr": false,
          "docs": "Preload icons",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "property",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "property",
          "reflectToAttr": false,
          "docs": "identifier",
          "docsTags": [],
          "default": "'id'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "StateCardItem[]",
          "complexType": {
            "original": "Array<StateCardItem>",
            "resolved": "StateCardItem[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StateCardItem": {
                "location": "import",
                "path": "./models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateCardItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StateCardItem[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedStateId",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "selectedstateid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "states",
          "type": "StateOptionsModel[]",
          "complexType": {
            "original": "Array<StateOptionsModel>",
            "resolved": "StateOptionsModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StateOptionsModel": {
                "location": "import",
                "path": "./models/np-state-card-item.inteface",
                "id": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateOptionsModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List of states",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StateOptionsModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "StateCardItemZoomConfig",
          "complexType": {
            "original": "StateCardItemZoomConfig",
            "resolved": "StateCardItemZoomConfig",
            "references": {
              "StateCardItemZoomConfig": {
                "location": "import",
                "path": "./models/np-state-card-item.model",
                "id": "src/components/np-state-card-item/models/np-state-card-item.model.ts::StateCardItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new StateCardItemZoomConfig()",
          "values": [
            {
              "type": "StateCardItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-state-card"
      ],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-state-card-item": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-state-card": [
          "np-state-card-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-stepper/np-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "np-stepper",
      "readme": "# nc-stepper\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "fillAvailable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fillavailable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "light",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "light",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "steps",
          "type": "StepperModel[]",
          "complexType": {
            "original": "Array<StepperModel>",
            "resolved": "StepperModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "StepperModel": {
                "location": "import",
                "path": "./models/np-stepper.model",
                "id": "src/components/np-stepper/models/np-stepper.model.ts::StepperModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "StepperModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "StepperZoomConfig",
          "complexType": {
            "original": "StepperZoomConfig",
            "resolved": "StepperZoomConfig",
            "references": {
              "StepperZoomConfig": {
                "location": "import",
                "path": "./models/np-stepper-zoom.model",
                "id": "src/components/np-stepper/models/np-stepper-zoom.model.ts::StepperZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new StepperZoomConfig()",
          "values": [
            {
              "type": "StepperZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "activeIndexChangeEvent",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "changeEvent",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-stepper": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-stepper-bar/np-stepper-bar.tsx",
      "encapsulation": "shadow",
      "tag": "np-stepper-bar",
      "readme": "# nc-stepper-bar\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bgColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "bgcolor",
          "reflectToAttr": false,
          "docs": "Sets the background color of the Stepper bar items",
          "docsTags": [],
          "default": "'c-scale-1'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "iconsize",
          "reflectToAttr": false,
          "docs": "stepper bar item icon size",
          "docsTags": [],
          "default": "15",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The items that will populate the list",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "StepperBarItemZoomConfig",
          "complexType": {
            "original": "StepperBarItemZoomConfig",
            "resolved": "StepperBarItemZoomConfig",
            "references": {
              "StepperBarItemZoomConfig": {
                "location": "import",
                "path": "../np-stepper-bar-item/models/np-stepper-bar-item-model",
                "id": "src/components/np-stepper-bar-item/models/np-stepper-bar-item-model.ts::StepperBarItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new StepperBarItemZoomConfig()",
          "values": [
            {
              "type": "StepperBarItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "itemClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-stepper-bar-item"
      ],
      "dependencyGraph": {
        "np-stepper-bar": [
          "np-stepper-bar-item"
        ],
        "np-stepper-bar-item": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-stepper-bar-item/np-stepper-bar-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-stepper-bar-item",
      "readme": "# nc-stepper-bar-item\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bgColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "bgcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "iconsize",
          "reflectToAttr": false,
          "docs": "stepper bar item icon size",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "item",
          "type": "StepperbarItem",
          "complexType": {
            "original": "StepperbarItem",
            "resolved": "StepperbarItem",
            "references": {
              "StepperbarItem": {
                "location": "import",
                "path": "./models/np-stepper-bar-item.interface",
                "id": "src/components/np-stepper-bar-item/models/np-stepper-bar-item.interface.ts::StepperbarItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "StepperbarItem"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "StepperBarItemZoomConfig",
          "complexType": {
            "original": "StepperBarItemZoomConfig",
            "resolved": "StepperBarItemZoomConfig",
            "references": {
              "StepperBarItemZoomConfig": {
                "location": "import",
                "path": "./models/np-stepper-bar-item-model",
                "id": "src/components/np-stepper-bar-item/models/np-stepper-bar-item-model.ts::StepperBarItemZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new StepperBarItemZoomConfig()",
          "values": [
            {
              "type": "StepperBarItemZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "buttonClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-stepper-bar"
      ],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-stepper-bar-item": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-stepper-bar": [
          "np-stepper-bar-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-switch/np-switch.tsx",
      "encapsulation": "shadow",
      "tag": "np-switch",
      "readme": "# np-switch\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "arialabelledby",
          "reflectToAttr": false,
          "docs": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "changeUncheckedColor",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "changeuncheckedcolor",
          "reflectToAttr": false,
          "docs": "Used to change label color when unchecked (c-scale-10)",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "checkcolor",
          "reflectToAttr": false,
          "docs": "Set check color",
          "docsTags": [],
          "default": "Color.primary",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "This changes the checked state of the switch, if true the switch is checked",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be disabled.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputid",
          "reflectToAttr": false,
          "docs": "Identifier of the input element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the switch label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelReverse",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labelreverse",
          "reflectToAttr": false,
          "docs": "Reverts the position of the label",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the input element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "When present, it specifies that the element should be readonly.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "When present, adds '*' to the label to represent as a required field",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "SwitchEnum.Action | SwitchEnum.Large | SwitchEnum.Medium | SwitchEnum.Regular | SwitchEnum.Small | SwitchEnum.Xlarge | SwitchEnum.Xsmall",
          "complexType": {
            "original": "SwitchEnum",
            "resolved": "SwitchEnum.Action | SwitchEnum.Large | SwitchEnum.Medium | SwitchEnum.Regular | SwitchEnum.Small | SwitchEnum.Xlarge | SwitchEnum.Xsmall",
            "references": {
              "SwitchEnum": {
                "location": "import",
                "path": "./models/np-switch.enum",
                "id": "src/components/np-switch/models/np-switch.enum.ts::SwitchEnum"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Set sizes",
          "docsTags": [],
          "default": "SwitchEnum.Regular",
          "values": [
            {
              "type": "SwitchEnum.Action"
            },
            {
              "type": "SwitchEnum.Large"
            },
            {
              "type": "SwitchEnum.Medium"
            },
            {
              "type": "SwitchEnum.Regular"
            },
            {
              "type": "SwitchEnum.Small"
            },
            {
              "type": "SwitchEnum.Xlarge"
            },
            {
              "type": "SwitchEnum.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "styleclass",
          "reflectToAttr": false,
          "docs": "Style class of the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styles",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "styles",
          "reflectToAttr": false,
          "docs": "Inline style of the component.",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabindex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindex",
          "reflectToAttr": false,
          "docs": "Set tabIndex",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "TooltipPosition.Bottom | TooltipPosition.Left | TooltipPosition.Right | TooltipPosition.Top",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "TooltipPosition.Bottom | TooltipPosition.Left | TooltipPosition.Right | TooltipPosition.Top",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../models/tooltip-position.enum",
                "id": "src/components/models/tooltip-position.enum.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltipposition",
          "reflectToAttr": false,
          "docs": "Sets tooltip position",
          "docsTags": [],
          "default": "TooltipPosition.Top",
          "values": [
            {
              "type": "TooltipPosition.Bottom"
            },
            {
              "type": "TooltipPosition.Left"
            },
            {
              "type": "TooltipPosition.Right"
            },
            {
              "type": "TooltipPosition.Top"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "uncheckedColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "uncheckedcolor",
          "reflectToAttr": false,
          "docs": "Set unchecked color",
          "docsTags": [],
          "default": "Color.c_scale_8",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "SwitchZoomConfig",
          "complexType": {
            "original": "SwitchZoomConfig",
            "resolved": "SwitchZoomConfig",
            "references": {
              "SwitchZoomConfig": {
                "location": "import",
                "path": "./models/np-switch.model",
                "id": "src/components/np-switch/models/np-switch.model.ts::SwitchZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "SwitchZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Callback to invoke on state change.\r\n\r\nevent.originalEvent: browser event\r\nevent.checked: checked state as a boolean",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-input-spinner",
        "np-input-time-spinner"
      ],
      "dependencies": [
        "np-text"
      ],
      "dependencyGraph": {
        "np-switch": [
          "np-text"
        ],
        "np-input-spinner": [
          "np-switch"
        ],
        "np-input-time-spinner": [
          "np-switch"
        ]
      }
    },
    {
      "filePath": "src/components/np-tabview/np-tab-panel/np-tab-panel.tsx",
      "encapsulation": "shadow",
      "tag": "np-tab-panel",
      "readme": "# np-tab-panel\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "Indicates whether the component is closable or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closed",
          "reflectToAttr": false,
          "docs": "Boolean indicating if the component is closed",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Indicates whether the component is disabled or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "The text displayed in the header of the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hide",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide",
          "reflectToAttr": false,
          "docs": "Indicates whether the component should be hidden or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColorDisabled",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolordisabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColorSelected",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolorselected",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColorState",
          "type": "TabPanelColorState.Error | TabPanelColorState.Info | TabPanelColorState.Primary | TabPanelColorState.Scale | TabPanelColorState.Secondary | TabPanelColorState.Success | TabPanelColorState.warning",
          "complexType": {
            "original": "TabPanelColorState",
            "resolved": "TabPanelColorState.Error | TabPanelColorState.Info | TabPanelColorState.Primary | TabPanelColorState.Scale | TabPanelColorState.Secondary | TabPanelColorState.Success | TabPanelColorState.warning",
            "references": {
              "TabPanelColorState": {
                "location": "import",
                "path": "./models/np-tab-panel.enum",
                "id": "src/components/np-tabview/np-tab-panel/models/np-tab-panel.enum.ts::TabPanelColorState"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolorstate",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "TabPanelColorState.Error"
            },
            {
              "type": "TabPanelColorState.Info"
            },
            {
              "type": "TabPanelColorState.Primary"
            },
            {
              "type": "TabPanelColorState.Scale"
            },
            {
              "type": "TabPanelColorState.Secondary"
            },
            {
              "type": "TabPanelColorState.Success"
            },
            {
              "type": "TabPanelColorState.warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconTooltipText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icontooltiptext",
          "reflectToAttr": false,
          "docs": "Text for the tooltip displayed on the icon",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "leftIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "lefticon",
          "reflectToAttr": false,
          "docs": "The name of the left icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Indicates whether the component is required or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rightIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "righticon",
          "reflectToAttr": false,
          "docs": "The name of the right icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Prop representing the selected state of the component",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the value changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/np-tabview/np-tabview.tsx",
      "encapsulation": "shadow",
      "tag": "np-tabview",
      "readme": "# np-tabview\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "activeindex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "controlClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "controlclose",
          "reflectToAttr": false,
          "docs": "property to control the close action",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fullHeight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fullheight",
          "reflectToAttr": false,
          "docs": "full height-propety to scrollbar",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelect",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselect",
          "reflectToAttr": false,
          "docs": "property to handle select action",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectactive",
          "reflectToAttr": false,
          "docs": "property to activate handle select action",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headersColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "headerscolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "scrollbar",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "scrollbar",
          "reflectToAttr": false,
          "docs": "flag to show or hide the scrollbar",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "showbutton",
          "reflectToAttr": false,
          "docs": "property to show or hide a button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "This changes size of the components's font, icon, etc",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "visible",
          "reflectToAttr": false,
          "docs": "visible scrollbar-property to scrollbar",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "TabviewZoomConfig",
          "complexType": {
            "original": "TabviewZoomConfig",
            "resolved": "TabviewZoomConfig",
            "references": {
              "TabviewZoomConfig": {
                "location": "import",
                "path": "./models/np-tabview.model",
                "id": "src/components/np-tabview/models/np-tabview.model.ts::TabviewZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new TabviewZoomConfig()",
          "values": [
            {
              "type": "TabviewZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "activeIndexChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the active index changes",
          "docsTags": []
        },
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when a change occurs",
          "docsTags": []
        },
        {
          "event": "closeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when a close action occurs",
          "docsTags": []
        },
        {
          "event": "keyDownEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitter for keydown keyboard events",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-tabview-nav"
      ],
      "dependencyGraph": {
        "np-tabview": [
          "np-tabview-nav"
        ],
        "np-tabview-nav": [
          "np-tool-tip",
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-tabview/np-tabview-nav/np-tabview-nav.tsx",
      "encapsulation": "shadow",
      "tag": "np-tabview-nav",
      "readme": "# np-tabview-nav\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "This changes size of the components's font, icon, etc",
          "docsTags": [],
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabs",
          "type": "TabViewModel[]",
          "complexType": {
            "original": "Array<TabViewModel>",
            "resolved": "TabViewModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "TabViewModel": {
                "location": "import",
                "path": "../models/np-tabview.model",
                "id": "src/components/np-tabview/models/np-tabview.model.ts::TabViewModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "This is the array of tabs",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "TabViewModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "TabviewZoomConfig",
          "complexType": {
            "original": "TabviewZoomConfig",
            "resolved": "TabviewZoomConfig",
            "references": {
              "TabviewZoomConfig": {
                "location": "import",
                "path": "../models/np-tabview.model",
                "id": "src/components/np-tabview/models/np-tabview.model.ts::TabviewZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The zoom percentage to be applied",
          "docsTags": [],
          "default": "new TabviewZoomConfig()",
          "values": [
            {
              "type": "TabviewZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tabClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when a tab is clicked",
          "docsTags": []
        },
        {
          "event": "tabCloseClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when a tab close button is clicked",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-tabview"
      ],
      "dependencies": [
        "np-tool-tip",
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-tabview-nav": [
          "np-tool-tip",
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-tabview": [
          "np-tabview-nav"
        ]
      }
    },
    {
      "filePath": "src/components/np-text/np-text.tsx",
      "encapsulation": "shadow",
      "tag": "np-text",
      "readme": "# np-text\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "addTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "addtrimmer",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Set text color",
          "docsTags": [],
          "default": "Color.c_scale_12",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "customcolor",
          "reflectToAttr": false,
          "docs": "Sets text color with any color in string type (ex: used when color comes from API)",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "font",
          "type": "FontType.Primary | FontType.Secondary",
          "complexType": {
            "original": "FontType",
            "resolved": "FontType.Primary | FontType.Secondary",
            "references": {
              "FontType": {
                "location": "import",
                "path": "../models/font-type.enum",
                "id": "src/components/models/font-type.enum.ts::FontType"
              }
            }
          },
          "mutable": false,
          "attr": "font",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "FontType.Primary",
          "values": [
            {
              "type": "FontType.Primary"
            },
            {
              "type": "FontType.Secondary"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoverColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hovercolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outsideColor",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outsidecolor",
          "reflectToAttr": false,
          "docs": "If true, we will be able to define the text color from outside of this component, via css variables",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "FontSize.H1 | FontSize.H2 | FontSize.H3 | FontSize.H4 | FontSize.H5 | FontSize.H6 | FontSize.H7 | FontSize.H8",
          "complexType": {
            "original": "FontSize",
            "resolved": "FontSize.H1 | FontSize.H2 | FontSize.H3 | FontSize.H4 | FontSize.H5 | FontSize.H6 | FontSize.H7 | FontSize.H8",
            "references": {
              "FontSize": {
                "location": "import",
                "path": "../models/font-size.enum",
                "id": "src/components/models/font-size.enum.ts::FontSize"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Set text size",
          "docsTags": [],
          "default": "FontSize.H1",
          "values": [
            {
              "type": "FontSize.H1"
            },
            {
              "type": "FontSize.H2"
            },
            {
              "type": "FontSize.H3"
            },
            {
              "type": "FontSize.H4"
            },
            {
              "type": "FontSize.H5"
            },
            {
              "type": "FontSize.H6"
            },
            {
              "type": "FontSize.H7"
            },
            {
              "type": "FontSize.H8"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "tooltipcolor",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipwidth",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimtooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimmerConfig",
          "type": "NpTextTrimmer",
          "complexType": {
            "original": "NpTextTrimmer",
            "resolved": "NpTextTrimmer",
            "references": {
              "NpTextTrimmer": {
                "location": "import",
                "path": "./models/np-text-trimmer.model",
                "id": "src/components/np-text/models/np-text-trimmer.model.ts::NpTextTrimmer"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "NpTextTrimmer"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "underline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "underline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "weight",
          "type": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
          "complexType": {
            "original": "FontWeight",
            "resolved": "FontWeight.Bold | FontWeight.Bolder | FontWeight.Lighter | FontWeight.Normal | FontWeight.Regular | FontWeight.Semibold | FontWeight.W100 | FontWeight.W200 | FontWeight.W300 | FontWeight.W400 | FontWeight.W500 | FontWeight.W600 | FontWeight.W700 | FontWeight.W800 | FontWeight.W900",
            "references": {
              "FontWeight": {
                "location": "import",
                "path": "../models/weight.enum",
                "id": "src/components/models/weight.enum.ts::FontWeight"
              }
            }
          },
          "mutable": false,
          "attr": "weight",
          "reflectToAttr": false,
          "docs": "Set text weight",
          "docsTags": [],
          "default": "FontWeight.Bold",
          "values": [
            {
              "type": "FontWeight.Bold"
            },
            {
              "type": "FontWeight.Bolder"
            },
            {
              "type": "FontWeight.Lighter"
            },
            {
              "type": "FontWeight.Normal"
            },
            {
              "type": "FontWeight.Regular"
            },
            {
              "type": "FontWeight.Semibold"
            },
            {
              "type": "FontWeight.W100"
            },
            {
              "type": "FontWeight.W200"
            },
            {
              "type": "FontWeight.W300"
            },
            {
              "type": "FontWeight.W400"
            },
            {
              "type": "FontWeight.W500"
            },
            {
              "type": "FontWeight.W600"
            },
            {
              "type": "FontWeight.W700"
            },
            {
              "type": "FontWeight.W800"
            },
            {
              "type": "FontWeight.W900"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "The zoom percentage to be applied to the text",
          "docsTags": [],
          "default": "60",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-accordion-item",
        "np-accordion-list",
        "np-alert",
        "np-box-template",
        "np-button-group",
        "np-button-toggle",
        "np-card-list-item",
        "np-check-box",
        "np-chips",
        "np-color-picker-variable-item",
        "np-context-menu",
        "np-date-picker",
        "np-detail-item",
        "np-detail-list",
        "np-filters-info",
        "np-info-box",
        "np-input",
        "np-input-group",
        "np-input-mask",
        "np-input-selector",
        "np-input-spinner",
        "np-input-time-spinner",
        "np-keyboard",
        "np-list-template",
        "np-loader",
        "np-primary-tree",
        "np-progress-stepper",
        "np-select-box",
        "np-select-item",
        "np-selector",
        "np-side-tab",
        "np-side-view",
        "np-state-card-item",
        "np-stepper-bar-item",
        "np-switch",
        "np-tabview-nav",
        "np-textarea",
        "np-textarea-chips",
        "np-tip",
        "np-toast-message-item",
        "np-tree-card-grid",
        "np-tree-node"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "np-accordion-item": [
          "np-text"
        ],
        "np-accordion-list": [
          "np-text"
        ],
        "np-alert": [
          "np-text"
        ],
        "np-box-template": [
          "np-text"
        ],
        "np-button-group": [
          "np-text"
        ],
        "np-button-toggle": [
          "np-text"
        ],
        "np-card-list-item": [
          "np-text"
        ],
        "np-check-box": [
          "np-text"
        ],
        "np-chips": [
          "np-text"
        ],
        "np-color-picker-variable-item": [
          "np-text"
        ],
        "np-context-menu": [
          "np-text"
        ],
        "np-date-picker": [
          "np-text"
        ],
        "np-detail-item": [
          "np-text"
        ],
        "np-detail-list": [
          "np-text"
        ],
        "np-filters-info": [
          "np-text"
        ],
        "np-info-box": [
          "np-text"
        ],
        "np-input": [
          "np-text"
        ],
        "np-input-group": [
          "np-text"
        ],
        "np-input-mask": [
          "np-text"
        ],
        "np-input-selector": [
          "np-text"
        ],
        "np-input-spinner": [
          "np-text"
        ],
        "np-input-time-spinner": [
          "np-text"
        ],
        "np-keyboard": [
          "np-text"
        ],
        "np-list-template": [
          "np-text"
        ],
        "np-loader": [
          "np-text"
        ],
        "np-primary-tree": [
          "np-text"
        ],
        "np-progress-stepper": [
          "np-text"
        ],
        "np-select-box": [
          "np-text"
        ],
        "np-select-item": [
          "np-text"
        ],
        "np-selector": [
          "np-text"
        ],
        "np-side-tab": [
          "np-text"
        ],
        "np-side-view": [
          "np-text"
        ],
        "np-state-card-item": [
          "np-text"
        ],
        "np-stepper-bar-item": [
          "np-text"
        ],
        "np-switch": [
          "np-text"
        ],
        "np-tabview-nav": [
          "np-text"
        ],
        "np-textarea": [
          "np-text"
        ],
        "np-textarea-chips": [
          "np-text"
        ],
        "np-tip": [
          "np-text"
        ],
        "np-toast-message-item": [
          "np-text"
        ],
        "np-tree-card-grid": [
          "np-text"
        ],
        "np-tree-node": [
          "np-text"
        ]
      }
    },
    {
      "filePath": "src/components/np-textarea/np-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "np-textarea",
      "readme": "# nc-textarea\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autoResize",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "autoresize",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cols",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Behaviour States",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCross",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hidecross",
          "reflectToAttr": false,
          "docs": "Sets hide cross",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label above the input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelTrimmer",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "labeltrimmer",
          "reflectToAttr": false,
          "docs": "Sets label with ellipsis",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Sets max number of characters",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxResizeX",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxresizex",
          "reflectToAttr": false,
          "docs": "Max height/width when resizing",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxResizeY",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxresizey",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxRows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxrows",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minwidth",
          "reflectToAttr": false,
          "docs": "To set min width is necessary",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Sets style outline",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Sets placeholder",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderVisible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholdervisible",
          "reflectToAttr": false,
          "docs": "Sets placeholder visible",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Sets required field",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resize",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "Resize options",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resizeX",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "resizex",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resizeY",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "resizey",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Set number of rows or columns",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Set size",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "Sets message for the state",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trimLabelTooltip",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "trimlabeltooltip",
          "reflectToAttr": false,
          "docs": "Sets if the user wants a tooltip with the text when trimmed",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "unsetMinHeight",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "unsetminheight",
          "reflectToAttr": false,
          "docs": "Unsets minimum size of the textarea",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "TextAreaZoomConfig",
          "complexType": {
            "original": "TextAreaZoomConfig",
            "resolved": "TextAreaZoomConfig",
            "references": {
              "TextAreaZoomConfig": {
                "location": "import",
                "path": "./models/np-textarea-zoom.model",
                "id": "src/components/np-textarea/models/np-textarea-zoom.model.ts::TextAreaZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "TextAreaZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clearClickedEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Declares an event emitter that will emit when a clear action is performed",
          "docsTags": []
        },
        {
          "event": "focusInEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Focus in emitter",
          "docsTags": []
        },
        {
          "event": "focusOutEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Focus out emitter",
          "docsTags": []
        },
        {
          "event": "resizingEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Declares an event emitter that will emit when resizing occurs",
          "docsTags": []
        },
        {
          "event": "valueChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Declares an event emitter that will emit when a value changes",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "input",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text",
        "np-icon"
      ],
      "dependencyGraph": {
        "np-textarea": [
          "np-text",
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-textarea-chips/np-textarea-chips.tsx",
      "encapsulation": "shadow",
      "tag": "np-textarea-chips",
      "readme": "# nc-textarea\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "addOnBlur",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "addonblur",
          "reflectToAttr": false,
          "docs": "Adds chips on focus out",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "addOnTab",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "addontab",
          "reflectToAttr": false,
          "docs": "Adds chips on tab",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allowDuplicate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allowduplicate",
          "reflectToAttr": false,
          "docs": "Allows duplicated labels",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "bgColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "bgcolor",
          "reflectToAttr": false,
          "docs": "Sets background colors",
          "docsTags": [],
          "default": "Color.c_scale_7",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "chipsOptions",
          "type": "TextareaChipsOptions[]",
          "complexType": {
            "original": "Array<TextareaChipsOptions>",
            "resolved": "TextareaChipsOptions[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "TextareaChipsOptions": {
                "location": "import",
                "path": "./models/np-textarea-chips.model",
                "id": "src/components/np-textarea-chips/models/np-textarea-chips.model.ts::TextareaChipsOptions"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Sets chips",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "TextareaChipsOptions[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "closable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "Chips can be closed",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color variable",
          "docsTags": [],
          "default": "Color.c_scale_1",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Sets input to disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconright",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "iconsrc",
          "reflectToAttr": false,
          "docs": "Set Icon",
          "docsTags": [],
          "default": "'icon_cross'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "inputvalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyWordOptions",
          "type": "TextareaChipsKeys",
          "complexType": {
            "original": "TextareaChipsKeys",
            "resolved": "TextareaChipsKeys",
            "references": {
              "TextareaChipsKeys": {
                "location": "import",
                "path": "./models/np-textarea-chips.model",
                "id": "src/components/np-textarea-chips/models/np-textarea-chips.model.ts::TextareaChipsKeys"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new TextareaChipsKeys(false)",
          "values": [
            {
              "type": "TextareaChipsKeys"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets label name",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Sets max number of chips",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxHeightScroll",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxheightscroll",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Sets max number set Label",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxResizeX",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxresizex",
          "reflectToAttr": false,
          "docs": "Size width",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxResizeY",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "maxresizey",
          "reflectToAttr": false,
          "docs": "Size height",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "onValidationInputValue",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "onlyAcceptSuccessValidation",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "onlyacceptsuccessvalidation",
          "reflectToAttr": false,
          "docs": "Allows duplicated labels",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Sets chips to outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Sets second label",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Sets input to readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Sets required mode",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "\"multiple\" | \"single\" | \"toggle\"",
          "complexType": {
            "original": "'single' | 'multiple' | 'toggle'",
            "resolved": "\"multiple\" | \"single\" | \"toggle\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "Sets selection mode",
          "docsTags": [],
          "default": "'multiple'",
          "values": [
            {
              "value": "multiple",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            },
            {
              "value": "toggle",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets chips size",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "States.Error | States.Help | States.Info | States.Success | States.Warning",
          "complexType": {
            "original": "States",
            "resolved": "States.Error | States.Help | States.Info | States.Success | States.Warning",
            "references": {
              "States": {
                "location": "import",
                "path": "../models/states.enum",
                "id": "src/components/models/states.enum.ts::States"
              }
            }
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "States",
          "docsTags": [],
          "values": [
            {
              "type": "States.Error"
            },
            {
              "type": "States.Help"
            },
            {
              "type": "States.Info"
            },
            {
              "type": "States.Success"
            },
            {
              "type": "States.Warning"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "stateMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "statemessage",
          "reflectToAttr": false,
          "docs": "State message",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "blurEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "chipClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "chipsChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "focusOutEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "inputValueChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "validationNotSetEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "document:click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-text",
        "np-icon",
        "np-input"
      ],
      "dependencyGraph": {
        "np-textarea-chips": [
          "np-text",
          "np-icon",
          "np-input"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-tip/np-tip.tsx",
      "encapsulation": "shadow",
      "tag": "np-tip",
      "readme": "# nc-tip\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "tipBgColor",
          "type": "\"c-scale-4\" | \"info\" | \"warning\"",
          "complexType": {
            "original": "'info' | 'warning' | 'c-scale-4'",
            "resolved": "\"c-scale-4\" | \"info\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "tipbgcolor",
          "reflectToAttr": false,
          "docs": "background color for the tip",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "c-scale-4",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tipContentColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "tipcontentcolor",
          "reflectToAttr": false,
          "docs": "color of the tip content",
          "docsTags": [],
          "default": "Color.info_dark",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tipIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tipicon",
          "reflectToAttr": false,
          "docs": "icon for the tip",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tipText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tiptext",
          "reflectToAttr": false,
          "docs": "text for the tip",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "TipZoomConfig",
          "complexType": {
            "original": "TipZoomConfig",
            "resolved": "TipZoomConfig",
            "references": {
              "TipZoomConfig": {
                "location": "import",
                "path": "./models/np-tip-zoom.model",
                "id": "src/components/np-tip/models/np-tip-zoom.model.ts::TipZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new TipZoomConfig()",
          "values": [
            {
              "type": "TipZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-alert"
      ],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-tip": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-alert": [
          "np-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-toast-message/np-toast-message.tsx",
      "encapsulation": "shadow",
      "tag": "np-toast-message",
      "readme": "# nc-textarea\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "position",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'top-right'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeout",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "timeout",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "2000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(toast: ToastMessageModel, selfDestroyTag?: boolean) => Promise<void>",
            "parameters": [
              {
                "name": "toast",
                "type": "ToastMessageModel",
                "docs": "toaster config object"
              },
              {
                "name": "selfDestroyTag",
                "type": "boolean",
                "docs": "if tag should destroy itself"
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ToastMessageModel": {
                "location": "import",
                "path": "./models/np-toast-message.model",
                "id": "src/components/np-toast-message/models/np-toast-message.model.ts::ToastMessageModel"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open(toast: ToastMessageModel, selfDestroyTag?: boolean) => Promise<void>",
          "parameters": [
            {
              "name": "toast",
              "type": "ToastMessageModel",
              "docs": "toaster config object"
            },
            {
              "name": "selfDestroyTag",
              "type": "boolean",
              "docs": "if tag should destroy itself"
            }
          ],
          "docs": "Opening event for toaster element",
          "docsTags": [
            {
              "name": "param",
              "text": "toast toaster config object"
            },
            {
              "name": "param",
              "text": "hostElement elem for toast to attach to"
            },
            {
              "name": "param",
              "text": "selfDestroyTag if tag should destroy itself"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "toasterCloseEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "toasterOpenEvent",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "handleToastMessageTimeout",
          "target": "body",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-toast-message-item"
      ],
      "dependencyGraph": {
        "np-toast-message": [
          "np-toast-message-item"
        ],
        "np-toast-message-item": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-toast-message/np-toast-message-item/np-toast-message-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-toast-message-item",
      "readme": "# np-toast-message-item\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "backgroundColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "background-color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "textColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "text-color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "titlevalue",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'error' | 'warning' | 'info'",
            "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'success'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "handleToastMessageTimeout",
          "detail": "{ type: \"clear\" | \"restore\"; itemIdentifier?: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{ type: 'clear' | 'restore'; itemIdentifier?: number }",
            "resolved": "{ type: \"clear\" | \"restore\"; itemIdentifier?: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-toast-message"
      ],
      "dependencies": [
        "np-icon",
        "np-text"
      ],
      "dependencyGraph": {
        "np-toast-message-item": [
          "np-icon",
          "np-text"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-toast-message": [
          "np-toast-message-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-tool-tip/np-tool-tip.tsx",
      "encapsulation": "shadow",
      "tag": "np-tool-tip",
      "readme": "# tool-tip\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "appendTo",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "appendto",
          "reflectToAttr": false,
          "docs": "Append to",
          "docsTags": [],
          "default": "'body'",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "componentReference",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "componentreference",
          "reflectToAttr": false,
          "docs": "Component element",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideDelay",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "hidedelay",
          "reflectToAttr": false,
          "docs": "Delay in ms until tooltip hide (only when trigger type is 'hover')",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "life",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "life",
          "reflectToAttr": false,
          "docs": "Life",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "ncTooltip",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "nctooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDelay",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "showdelay",
          "reflectToAttr": false,
          "docs": "Delay in ms until tooltip shows (only when trigger type is 'hover')",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toolTipWidth",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipwidth",
          "reflectToAttr": false,
          "docs": "Tooltip width",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "tooltipcolor",
          "reflectToAttr": false,
          "docs": "Tooltip color",
          "docsTags": [],
          "default": "Color.primary_dark",
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipDisabled",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipdisabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipEvent",
          "type": "TooltipEvent.Focus | TooltipEvent.Hover | TooltipEvent.Label",
          "complexType": {
            "original": "TooltipEvent",
            "resolved": "TooltipEvent.Focus | TooltipEvent.Hover | TooltipEvent.Label",
            "references": {
              "TooltipEvent": {
                "location": "import",
                "path": "./models/np-tool-tip.enum",
                "id": "src/components/np-tool-tip/models/np-tool-tip.enum.ts::TooltipEvent"
              }
            }
          },
          "mutable": false,
          "attr": "tooltipevent",
          "reflectToAttr": false,
          "docs": "Tooltip Event",
          "docsTags": [],
          "default": "TooltipEvent.Label",
          "values": [
            {
              "type": "TooltipEvent.Focus"
            },
            {
              "type": "TooltipEvent.Hover"
            },
            {
              "type": "TooltipEvent.Label"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipPosition",
          "type": "TooltipPosition.Bottom | TooltipPosition.Left | TooltipPosition.Right | TooltipPosition.Top",
          "complexType": {
            "original": "TooltipPosition",
            "resolved": "TooltipPosition.Bottom | TooltipPosition.Left | TooltipPosition.Right | TooltipPosition.Top",
            "references": {
              "TooltipPosition": {
                "location": "import",
                "path": "../models/tooltip-position.enum",
                "id": "src/components/models/tooltip-position.enum.ts::TooltipPosition"
              }
            }
          },
          "mutable": false,
          "attr": "tooltipposition",
          "reflectToAttr": false,
          "docs": "Position of the tooltip in relation to the element",
          "docsTags": [],
          "default": "TooltipPosition.Right",
          "values": [
            {
              "type": "TooltipPosition.Bottom"
            },
            {
              "type": "TooltipPosition.Left"
            },
            {
              "type": "TooltipPosition.Right"
            },
            {
              "type": "TooltipPosition.Top"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipSize",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "tooltipsize",
          "reflectToAttr": false,
          "docs": "Tooltip size",
          "docsTags": [],
          "default": "Size.Small",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipStyleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipstyleclass",
          "reflectToAttr": false,
          "docs": "Tooltip Style Class",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipZIndex",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "tooltipzindex",
          "reflectToAttr": false,
          "docs": "Z index",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipZoomPercentage",
          "type": "ToolTipZoomPercentageConfig",
          "complexType": {
            "original": "ToolTipZoomPercentageConfig",
            "resolved": "ToolTipZoomPercentageConfig",
            "references": {
              "ToolTipZoomPercentageConfig": {
                "location": "import",
                "path": "./models/np-tool-tip.model",
                "id": "src/components/np-tool-tip/models/np-tool-tip.model.ts::ToolTipZoomPercentageConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ToolTipZoomPercentageConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-action-bar",
        "np-action-bar-item",
        "np-basic-list-item",
        "np-icon",
        "np-tabview-nav"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "np-action-bar": [
          "np-tool-tip"
        ],
        "np-action-bar-item": [
          "np-tool-tip"
        ],
        "np-basic-list-item": [
          "np-tool-tip"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-tabview-nav": [
          "np-tool-tip"
        ]
      }
    },
    {
      "filePath": "src/components/np-tree-card-grid/np-tree-card-grid.tsx",
      "encapsulation": "shadow",
      "tag": "np-tree-card-grid",
      "readme": "# np-tree-card-grid\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "breadcrumbs",
          "type": "BreadcrumbModel[]",
          "complexType": {
            "original": "Array<BreadcrumbModel>",
            "resolved": "BreadcrumbModel[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "BreadcrumbModel": {
                "location": "import",
                "path": "./models/np-tree-card-grid.interface",
                "id": "src/components/np-tree-card-grid/models/np-tree-card-grid.interface.ts::BreadcrumbModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "BreadcrumbModel[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filters",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleBreadcrumbSelect",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "handlebreadcrumbselect",
          "reflectToAttr": false,
          "docs": "Handle breadcrumb select",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleBreadcrumbSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handlebreadcrumbselectactive",
          "reflectToAttr": false,
          "docs": "If breadcrumb selection is active",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelect",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselect",
          "reflectToAttr": false,
          "docs": "Handle select",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "handleSelectActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "handleselectactive",
          "reflectToAttr": false,
          "docs": "If handle select is active",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerMultiple",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headermultiple",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headerSingle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headersingle",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "listConfig",
          "type": "TreeCardListConfig",
          "complexType": {
            "original": "TreeCardListConfig",
            "resolved": "TreeCardListConfig",
            "references": {
              "TreeCardListConfig": {
                "location": "import",
                "path": "./models/np-tree-card-grid.model",
                "id": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::TreeCardListConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "List Config",
          "docsTags": [],
          "default": "new TreeCardListConfig()",
          "values": [
            {
              "type": "TreeCardListConfig"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noResultsConfig",
          "type": "NoResultsConfigModel",
          "complexType": {
            "original": "NoResultsConfigModel",
            "resolved": "NoResultsConfigModel",
            "references": {
              "NoResultsConfigModel": {
                "location": "import",
                "path": "./models/np-tree-card-grid.model",
                "id": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::NoResultsConfigModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "NoResultsConfigModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionalButtons",
          "type": "ButtonConfig[]",
          "complexType": {
            "original": "Array<ButtonConfig>",
            "resolved": "ButtonConfig[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              },
              "ButtonConfig": {
                "location": "import",
                "path": "./models/np-tree-card-grid.model",
                "id": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::ButtonConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "ButtonConfig[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedItems",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionMode",
          "type": "TreeCardGridSelectionMode.Multiple | TreeCardGridSelectionMode.MultipleKeepSelection | TreeCardGridSelectionMode.Single | TreeCardGridSelectionMode.Toggle",
          "complexType": {
            "original": "TreeCardGridSelectionMode",
            "resolved": "TreeCardGridSelectionMode.Multiple | TreeCardGridSelectionMode.MultipleKeepSelection | TreeCardGridSelectionMode.Single | TreeCardGridSelectionMode.Toggle",
            "references": {
              "TreeCardGridSelectionMode": {
                "location": "import",
                "path": "./models/np-tree-card-grid.enum",
                "id": "src/components/np-tree-card-grid/models/np-tree-card-grid.enum.ts::TreeCardGridSelectionMode"
              }
            }
          },
          "mutable": false,
          "attr": "selectionmode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "TreeCardGridSelectionMode.Multiple"
            },
            {
              "type": "TreeCardGridSelectionMode.MultipleKeepSelection"
            },
            {
              "type": "TreeCardGridSelectionMode.Single"
            },
            {
              "type": "TreeCardGridSelectionMode.Toggle"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size for cards",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "templateChild",
          "type": "(item: any) => any",
          "complexType": {
            "original": "(item: any) => any",
            "resolved": "(item: any) => any",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Template Child",
          "docsTags": [],
          "values": [
            {
              "type": "(item: any) => any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "templateFather",
          "type": "(item: any) => any",
          "complexType": {
            "original": "(item: any) => any",
            "resolved": "(item: any) => any",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Template Father",
          "docsTags": [],
          "values": [
            {
              "type": "(item: any) => any"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "textFilterVariable",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "textfiltervariable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "translations",
          "type": "Translations",
          "complexType": {
            "original": "Translations",
            "resolved": "Translations",
            "references": {
              "Translations": {
                "location": "import",
                "path": "./models/np-tree-card-grid.model",
                "id": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::Translations"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Translations"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "TreeCardGridZoomConfig",
          "complexType": {
            "original": "TreeCardGridZoomConfig",
            "resolved": "TreeCardGridZoomConfig",
            "references": {
              "TreeCardGridZoomConfig": {
                "location": "import",
                "path": "./models/np-tree-card-grid.model",
                "id": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::TreeCardGridZoomConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "TreeCardGridZoomConfig"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "advanceClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Advance click event",
          "docsTags": []
        },
        {
          "event": "breadcrumbsChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Breadcrumbs change event",
          "docsTags": []
        },
        {
          "event": "filterChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Filter change event",
          "docsTags": []
        },
        {
          "event": "headerButtonClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Header button click event",
          "docsTags": []
        },
        {
          "event": "optionalHeaderButtonClickEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Optional header button click event",
          "docsTags": []
        },
        {
          "event": "selectedChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Change event for the selected item",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon",
        "np-text",
        "np-input",
        "np-button",
        "np-tree-card-grid-item"
      ],
      "dependencyGraph": {
        "np-tree-card-grid": [
          "np-icon",
          "np-text",
          "np-input",
          "np-button",
          "np-tree-card-grid-item"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-input": [
          "np-text",
          "np-icon"
        ],
        "np-button": [
          "np-icon"
        ]
      }
    },
    {
      "filePath": "src/components/np-tree-card-grid/tree-card-grid-item/np-tree-card-grid-item.tsx",
      "encapsulation": "shadow",
      "tag": "np-tree-card-grid-item",
      "readme": "# np-tree-card-grid-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isFather",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "isfather",
          "reflectToAttr": false,
          "docs": "If father card style should be applied or child card style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isSelected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "isselected",
          "reflectToAttr": false,
          "docs": "If card is selected or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "item",
          "type": "any[]",
          "complexType": {
            "original": "Array<any>",
            "resolved": "any[]",
            "references": {
              "Array": {
                "location": "global",
                "id": "global::Array"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If the tree grid is in readonly mode",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size for cards",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "templateChild",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "templatechild",
          "reflectToAttr": false,
          "docs": "Template Child",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "templateFather",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "templatefather",
          "reflectToAttr": false,
          "docs": "Template Father",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fatherChangeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Father card selection emitter",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-tree-card-grid"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "np-tree-card-grid": [
          "np-tree-card-grid-item"
        ]
      }
    },
    {
      "filePath": "src/components/np-primary-tree/np-tree-node/np-tree-node.tsx",
      "encapsulation": "none",
      "tag": "np-tree-node",
      "readme": "# nc-treenode\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "firstNodeChild",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "firstnodechild",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "index",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lastNodeChild",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "lastnodechild",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "level",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "level",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "navigationIcons",
          "type": "NavigationIconsModel",
          "complexType": {
            "original": "NavigationIconsModel",
            "resolved": "NavigationIconsModel",
            "references": {
              "NavigationIconsModel": {
                "location": "import",
                "path": "../models/np-navigation-icon.model",
                "id": "src/components/np-primary-tree/models/np-navigation-icon.model.ts::NavigationIconsModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "NavigationIconsModel"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "node",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "node",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionChildren",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "optionchildren",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'children'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parentTreeNode",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "parenttreenode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "root",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "root",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowNode",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "rownode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selection",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "selection",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tree",
          "type": "any",
          "complexType": {
            "original": "HTMLNpPrimaryTreeElement | any",
            "resolved": "any",
            "references": {
              "HTMLNpPrimaryTreeElement": {
                "location": "global",
                "id": "global::HTMLNpPrimaryTreeElement"
              }
            }
          },
          "mutable": false,
          "attr": "tree",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "np-primary-tree",
        "np-tree-node"
      ],
      "dependencies": [
        "np-icon",
        "np-check-box",
        "np-text",
        "np-tree-node"
      ],
      "dependencyGraph": {
        "np-tree-node": [
          "np-tree-node"
        ],
        "np-icon": [
          "np-tool-tip"
        ],
        "np-check-box": [
          "np-icon",
          "np-text"
        ],
        "np-primary-tree": [
          "np-tree-node"
        ]
      }
    },
    {
      "filePath": "src/components/np-tri-checkbox/np-tri-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "np-tri-checkbox",
      "readme": "# nc-tri-checkbox\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelledBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "arialabelledby",
          "reflectToAttr": false,
          "docs": "ARIA label referenced by ID",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Boolean flag indicating if the component is disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconColor",
          "type": "Color",
          "complexType": {
            "original": "Color",
            "resolved": "Color",
            "references": {
              "Color": {
                "location": "import",
                "path": "@niup/devkit",
                "id": "node_modules::Color"
              }
            }
          },
          "mutable": false,
          "attr": "iconcolor",
          "reflectToAttr": false,
          "docs": "Color of the icon",
          "docsTags": [],
          "values": [
            {
              "type": "Color"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "inputid",
          "reflectToAttr": false,
          "docs": "ID for the input element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label text for the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "outline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Boolean flag indicating if the component should have an outline",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
          "complexType": {
            "original": "Size",
            "resolved": "Size.Large | Size.Medium | Size.Regular | Size.Small | Size.Xlarge | Size.Xsmall",
            "references": {
              "Size": {
                "location": "import",
                "path": "../models/size.enum",
                "id": "src/components/models/size.enum.ts::Size"
              }
            }
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "size of the component",
          "docsTags": [],
          "default": "Size.Regular",
          "values": [
            {
              "type": "Size.Large"
            },
            {
              "type": "Size.Medium"
            },
            {
              "type": "Size.Regular"
            },
            {
              "type": "Size.Small"
            },
            {
              "type": "Size.Xlarge"
            },
            {
              "type": "Size.Xsmall"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styleClass",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "styleclass",
          "reflectToAttr": false,
          "docs": "SS class for styling the component",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "styles",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "styles",
          "reflectToAttr": false,
          "docs": "Custom styles for the component",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabIndexValue",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "tabindexvalue",
          "reflectToAttr": false,
          "docs": "tab index value for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "zoomPercentageConfig",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoompercentageconfig",
          "reflectToAttr": false,
          "docs": "configuration for zoom percentage",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when there's a change in the component's value",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "np-icon"
      ],
      "dependencyGraph": {
        "np-tri-checkbox": [
          "np-icon"
        ],
        "np-icon": [
          "np-tool-tip"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/components/np-accordion/models/np-accordion.model.ts::AccordionItemModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-accordion/models/np-accordion.model.ts"
    },
    "src/components/models/size.enum.ts::Size": {
      "declaration": "export enum Size {\r\n  Xsmall = 'xsmall',\r\n  Small = 'small',\r\n  Regular = 'regular',\r\n  Medium = 'medium',\r\n  Large = 'large',\r\n  Xlarge = 'xlarge',\r\n}",
      "docstring": "",
      "path": "src/components/models/size.enum.ts"
    },
    "src/components/np-accordion-item/models/np-accordion-item.model.ts::AccordionItemZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-accordion-item/models/np-accordion-item.model.ts"
    },
    "src/components/models/states.enum.ts::States": {
      "declaration": "export enum States {\r\n  Info = 'info',\r\n  Success = 'success',\r\n  Warning = 'warning',\r\n  Error = 'error',\r\n  Help = 'help',\r\n}",
      "docstring": "",
      "path": "src/components/models/states.enum.ts"
    },
    "src/components/np-accordion-list/models/np-accordion-list.model.ts::AccordionListZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-accordion-list/models/np-accordion-list.model.ts"
    },
    "src/components/np-accordion-list/models/np-accordion-list-type.enum.ts::SelectionModeNpAccordionListType": {
      "declaration": "export enum SelectionModeNpAccordionListType {\r\n  Single = 'single',\r\n  Multiple = 'multiple',\r\n  Toggle = 'toggle',\r\n}",
      "docstring": "",
      "path": "src/components/np-accordion-list/models/np-accordion-list-type.enum.ts"
    },
    "src/components/np-action-bar/models/np-action-bar.enum.ts::ActionBarOrientation": {
      "declaration": "export enum ActionBarOrientation {\r\n  Left = 'left',\r\n  Right = 'right',\r\n  Top = 'top',\r\n  Bottom = 'bottom',\r\n}",
      "docstring": "",
      "path": "src/components/np-action-bar/models/np-action-bar.enum.ts"
    },
    "src/components/np-alert/models/np-alert.model.ts::AlertZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-alert/models/np-alert.model.ts"
    },
    "src/components/np-alert/models/np-alert.model.ts::ModalMessageModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-alert/models/np-alert.model.ts"
    },
    "src/components/np-axis-selector/models/np-axis-selector-type.enum.ts::SelectionModeAxis": {
      "declaration": "export enum SelectionModeAxis {\r\n  Single = 'single',\r\n  Multiple = 'multiple',\r\n  Toggle = 'toggle',\r\n}",
      "docstring": "",
      "path": "src/components/np-axis-selector/models/np-axis-selector-type.enum.ts"
    },
    "src/components/np-axis-selector/models/np-axis-selector-type.enum.ts::SizeAxis": {
      "declaration": "export enum SizeAxis {\r\n  Small = 'small',\r\n  Medium = 'medium',\r\n  Large = 'large',\r\n}",
      "docstring": "",
      "path": "src/components/np-axis-selector/models/np-axis-selector-type.enum.ts"
    },
    "src/components/np-basic-list-item/models/np-basic-list-item.model.ts::BasicListItemModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-basic-list-item/models/np-basic-list-item.model.ts"
    },
    "src/components/np-basic-list-item/models/np-basic-list-item-zoom.model.ts::BasicListItemZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-basic-list-item/models/np-basic-list-item-zoom.model.ts"
    },
    "src/components/models/weight.enum.ts::FontWeight": {
      "declaration": "export enum FontWeight {\r\n  Bolder = 'bolder',\r\n  Bold = 'bold',\r\n  Semibold = 'semibold',\r\n  Normal = 'normal',\r\n  Lighter = 'lighter',\r\n  Regular = 'regular',\r\n  W900 = '900',\r\n  W800 = '800',\r\n  W700 = '700',\r\n  W600 = '600',\r\n  W500 = '500',\r\n  W400 = '400',\r\n  W300 = '300',\r\n  W200 = '200',\r\n  W100 = '100',\r\n}",
      "docstring": "",
      "path": "src/components/models/weight.enum.ts"
    },
    "src/components/models/font-type.enum.ts::FontType": {
      "declaration": "export enum FontType {\r\n  Primary = 'primary',\r\n  Secondary = 'secondary',\r\n}",
      "docstring": "",
      "path": "src/components/models/font-type.enum.ts"
    },
    "src/components/np-button/models/np-button.enum.ts::ButtonState": {
      "declaration": "export enum ButtonState {\r\n  Loading = 'loading',\r\n  Success = 'success',\r\n}",
      "docstring": "",
      "path": "src/components/np-button/models/np-button.enum.ts"
    },
    "src/components/np-button/models/np-button.enum.ts::ButtonType": {
      "declaration": "export enum ButtonType {\r\n  Button = 'button',\r\n  Submit = 'submit',\r\n  Reset = 'reset',\r\n}",
      "docstring": "",
      "path": "src/components/np-button/models/np-button.enum.ts"
    },
    "src/components/np-button/models/np-button.model.ts::ButtonZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-button/models/np-button.model.ts"
    },
    "src/components/np-button-group/models/np-button-group.enum.ts::ButtonGroupColorStyle": {
      "declaration": "export enum ButtonGroupColorStyle {\r\n  outlined = 'outlined',\r\n  c_scale_4 = Color.c_scale_4,\r\n  c_scale_1 = Color.c_scale_1,\r\n}",
      "docstring": "",
      "path": "src/components/np-button-group/models/np-button-group.enum.ts"
    },
    "src/components/models/element-position.enum.ts::ElementPosition": {
      "declaration": "export enum ElementPosition {\r\n  Left = 'left',\r\n  Right = 'right',\r\n}",
      "docstring": "",
      "path": "src/components/models/element-position.enum.ts"
    },
    "src/components/np-button-group/models/np-button-group.model.ts::OptionModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-button-group/models/np-button-group.model.ts"
    },
    "src/components/np-button-group/models/np-button-group.model.ts::ButtonGroupZoomConfigs": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-button-group/models/np-button-group.model.ts"
    },
    "src/components/np-button-toggle/models/np-button-toggle.model.ts::Option": {
      "declaration": "export interface Option {\r\n    /**Set option name */\r\n    label: string;\r\n  \r\n    /**Set if option is selected */\r\n    selected: boolean;\r\n  \r\n    /**Set option id  */\r\n    id: string;\r\n  \r\n    /**Set option is disabled  */\r\n    disabled: boolean;\r\n  }",
      "docstring": "",
      "path": "src/components/np-button-toggle/models/np-button-toggle.model.ts"
    },
    "src/components/np-button-toggle/models/np-button-toggle.zoom.ts::ButtonToggleZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-button-toggle/models/np-button-toggle.zoom.ts"
    },
    "src/components/np-card-input/models/np-card-input.model.ts::CardInputSelectionModel": {
      "declaration": "export interface CardInputSelectionModel {\r\n    label: string;\r\n    id: number;\r\n    name: string;\r\n    icon?: string;\r\n    regex?: RegExp;\r\n}",
      "docstring": "",
      "path": "src/components/np-card-input/models/np-card-input.model.ts"
    },
    "src/components/np-card-input/models/np-card-input.model.ts::CardInputMenuItemModel": {
      "declaration": "export interface CardInputMenuItemModel {\r\n    label: string;\r\n    code: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-card-input/models/np-card-input.model.ts"
    },
    "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::CardListItemModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts"
    },
    "src/components/models/selection-mode.enum.ts::SelectionMode": {
      "declaration": "export enum SelectionMode {\r\n  Single = 'single',\r\n  Multiple = 'multiple',\r\n  Toggle = 'toggle',\r\n  MultipleToggle = 'multipleToggle',\r\n}",
      "docstring": "",
      "path": "src/components/models/selection-mode.enum.ts"
    },
    "src/components/np-card-list/models/np-card-list.enum.ts::CardListButtonAction": {
      "declaration": "export enum CardListButtonAction {\r\n  New = 'new',\r\n  Other = 'other',\r\n}",
      "docstring": "",
      "path": "src/components/np-card-list/models/np-card-list.enum.ts"
    },
    "src/components/np-card-list/models/np-card-list.enum.ts::CardListDeleteButton": {
      "declaration": "export enum CardListDeleteButton {\r\n  All = 'all',\r\n  Selected = 'selected',\r\n  None = 'none',\r\n}",
      "docstring": "",
      "path": "src/components/np-card-list/models/np-card-list.enum.ts"
    },
    "src/components/np-chips/models/np-chips.interface.ts::ChipsOptions": {
      "declaration": "export interface ChipsOptions {\r\n  label: string;\r\n  code: string;\r\n  placeholder?: string;\r\n  imageSrc?: string;\r\n  iconSrc?: string;\r\n  selected?: boolean;\r\n}",
      "docstring": "",
      "path": "src/components/np-chips/models/np-chips.interface.ts"
    },
    "src/components/np-chips/models/np-chips.enum.ts::ChipsBgColor": {
      "declaration": "export enum ChipsBgColor {\r\n  secondary = Color.secondary,\r\n  c_scale_9 = Color.c_scale_9,\r\n  c_scale_8 = Color.c_scale_8,\r\n  c_scale_4 = Color.c_scale_4,\r\n  c_scale_3 = Color.c_scale_3,\r\n}",
      "docstring": "",
      "path": "src/components/np-chips/models/np-chips.enum.ts"
    },
    "src/components/np-chips/models/np-chips.enum.ts::ChipsSelectionMode": {
      "declaration": "export enum ChipsSelectionMode {\r\n  Single = 'single',\r\n  Multiple = 'multiple',\r\n  Toggle = 'toggle',\r\n}",
      "docstring": "",
      "path": "src/components/np-chips/models/np-chips.enum.ts"
    },
    "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::DefaultLabelsModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts"
    },
    "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-filters-info/models/np-filters-info.model.ts"
    },
    "src/components/np-filters-info/models/np-filters-info.model.ts::FiltersInfoTranslations": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-filters-info/models/np-filters-info.model.ts"
    },
    "src/components/np-card-list/models/np-card-list.model.ts::CardListZoomModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-card-list/models/np-card-list.model.ts"
    },
    "src/components/np-card-list/np-card-list-item/models/np-card-list-item.enum.ts::CardItemType": {
      "declaration": "export enum CardItemType {\r\n  New = 'new',\r\n  Card = 'card',\r\n}",
      "docstring": "",
      "path": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.enum.ts"
    },
    "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts::CardListItemZoom": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-card-list/np-card-list-item/models/np-card-list-item.model.ts"
    },
    "src/components/np-check-box/models/np-check-box-zoom.model.ts::CheckBoxZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-check-box/models/np-check-box-zoom.model.ts"
    },
    "src/components/models/font-size.enum.ts::FontSize": {
      "declaration": "export enum FontSize {\r\n  /**  h1: font_size_8 | 48*/\r\n  H1 = 'h1',\r\n\r\n  /**  H2: font_size_7 | 32*/\r\n  H2 = 'h2',\r\n\r\n  /** H3: font_size_6 | 26 */\r\n  H3 = 'h3',\r\n\r\n  /** H4: font_size_5 | 22 */\r\n  H4 = 'h4',\r\n\r\n  /** H5: font_size_4 | 18 */\r\n  H5 = 'h5',\r\n\r\n  /** H6: font_size_3 | 16 */\r\n  H6 = 'h6',\r\n\r\n  /** H7: font_size_2 | 14 */\r\n  H7 = 'h7',\r\n\r\n  /** H8: font_size_1 | 12 */\r\n  H8 = 'h8',\r\n}",
      "docstring": "",
      "path": "src/components/models/font-size.enum.ts"
    },
    "src/components/np-chips/models/np-chips.model.ts::ChipsZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-chips/models/np-chips.model.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.enum.ts::ColorStyle": {
      "declaration": "export enum ColorStyle {\r\n  Round = 'round',\r\n  SemiRound = 'semi-round',\r\n  Square = 'square',\r\n}",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.enum.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.model.ts::ColorPickerTranslations": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.model.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.model.ts::ColorPickerTooltipPosition": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.model.ts"
    },
    "src/components/models/overlay-position.enum.ts::OverlayPosition": {
      "declaration": "export enum OverlayPosition {\r\n  Auto = 'auto',\r\n  Top = 'top',\r\n  Bottom = 'bottom',\r\n  Left = 'left',\r\n  Right = 'right',\r\n}",
      "docstring": "",
      "path": "src/components/models/overlay-position.enum.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.model.ts::ColorPresetPickerConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.model.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.interface.ts::ColorPickerSelectorModel": {
      "declaration": "export interface ColorPickerSelectorModel {\r\n  id: string;\r\n  label: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.interface.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.enum.ts::AlphaChannel": {
      "declaration": "export enum AlphaChannel {\r\n  Enabled = 'enabled',\r\n  Disabled = 'disabled',\r\n}",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.enum.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.enum.ts::ColorMode": {
      "declaration": "export enum ColorMode {\r\n  Color = 'color',\r\n  Grayscale = 'grayscale',\r\n}",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.enum.ts"
    },
    "src/components/np-color-picker/models/np-color-picker.interface.ts::ColorPickerColorVariables": {
      "declaration": "export interface ColorPickerColorVariables extends ColorPickerSelectorModel {\r\n  color: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-color-picker/models/np-color-picker.interface.ts"
    },
    "src/components/np-color-picker/np-color-picker-variable-item/models/np-color-picker-variable-item.model.ts::ColorPickerVariableItemZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-color-picker/np-color-picker-variable-item/models/np-color-picker-variable-item.model.ts"
    },
    "src/components/np-context-menu/models/np-context-menu.model.ts::MenuItem": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-context-menu/models/np-context-menu.model.ts"
    },
    "src/components/np-custom-list/models/np-custom-list.model.ts::CustomListConfigs": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-custom-list/models/np-custom-list.model.ts"
    },
    "src/components/np-custom-list/models/np-custom-list.model.ts::CustomListDragConfigs": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-custom-list/models/np-custom-list.model.ts"
    },
    "src/components/np-custom-list/models/np-custom-list.model.ts::HandleSelection": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-custom-list/models/np-custom-list.model.ts"
    },
    "src/components/np-date-picker/models/np-date-picker.models.ts::TranslationsDates": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-date-picker/models/np-date-picker.models.ts"
    },
    "src/components/np-date-picker/models/np-date-picker.models.ts::TranslationKeys": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-date-picker/models/np-date-picker.models.ts"
    },
    "src/components/np-date-picker/models/np-date-picker.models.ts::DatePickerButtonTranslations": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-date-picker/models/np-date-picker.models.ts"
    },
    "src/components/np-date-picker/models/np-date-picker.models.ts::DatePickerConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-date-picker/models/np-date-picker.models.ts"
    },
    "src/components/np-date-picker/models/np-date-picker.models.ts::CalendarTypeView": {
      "declaration": "export type CalendarTypeView = 'date' | 'month' | 'year';",
      "docstring": "",
      "path": "src/components/np-date-picker/models/np-date-picker.models.ts"
    },
    "src/components/np-date-picker/models/np-date-picker-zoom.model.ts::DatePickerZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-date-picker/models/np-date-picker-zoom.model.ts"
    },
    "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateFilterTranslations": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-list-template/models/np-list-template.model.ts"
    },
    "src/components/np-detail-list/models/np-detail-list.model.ts::DetailListMainTranslations": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-detail-list/models/np-detail-list.model.ts"
    },
    "src/components/np-detail-list/models/np-detail-list.model.ts::DetailListPlaceholderConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-detail-list/models/np-detail-list.model.ts"
    },
    "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-detail-list/models/np-detail-item.model.ts"
    },
    "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-list-template/models/np-list-template.model.ts"
    },
    "src/components/np-detail-list/models/np-detail-item.enum.ts::DetailItemSize": {
      "declaration": "export enum DetailItemSize {\r\n  Xsmall = 'xsmall',\r\n  Small = 'small',\r\n  Regular = 'regular',\r\n  Medium = 'medium',\r\n  Large = 'large',\r\n}",
      "docstring": "",
      "path": "src/components/np-detail-list/models/np-detail-item.enum.ts"
    },
    "src/components/np-detail-list/models/np-detail-item.model.ts::DetailItemModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-detail-list/models/np-detail-item.model.ts"
    },
    "src/components/np-filters-info/models/np-filters-info-zoom.model.ts::FiltersInfoZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-filters-info/models/np-filters-info-zoom.model.ts"
    },
    "src/components/np-tool-tip/models/np-tool-tip.enum.ts::TooltipEvent": {
      "declaration": "export enum TooltipEvent {\r\n  Hover = 'hover',\r\n  Focus = 'focus',\r\n  Label = 'label',\r\n}",
      "docstring": "Enumerable with tooltip events",
      "path": "src/components/np-tool-tip/models/np-tool-tip.enum.ts"
    },
    "src/components/models/tooltip-position.enum.ts::TooltipPosition": {
      "declaration": "export enum TooltipPosition {\r\n  Left = 'left',\r\n  Right = 'right',\r\n  Top = 'top',\r\n  Bottom = 'bottom',\r\n}",
      "docstring": "",
      "path": "src/components/models/tooltip-position.enum.ts"
    },
    "src/components/np-icon/models/np-icon.model.ts::CustomStyles": {
      "declaration": "export interface CustomStyles {\r\n  element: string;\r\n  id?: string;\r\n  styles: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-icon/models/np-icon.model.ts"
    },
    "src/components/np-info-box/models/np-info-box-zoom.model.ts::InfoBoxZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-info-box/models/np-info-box-zoom.model.ts"
    },
    "src/components/models/input-types.enum.ts::InputTypes": {
      "declaration": "export enum InputTypes {\r\n  Text = 'text',\r\n  Password = 'password',\r\n  Number = 'number',\r\n  Email = 'email',\r\n  DoubleDigit = 'doubleDigit',\r\n}",
      "docstring": "",
      "path": "src/components/models/input-types.enum.ts"
    },
    "src/components/np-input/models/np-input.enum.ts::InputActions": {
      "declaration": "export enum InputActions {\r\n  toolTip = 'toolTip',\r\n  tags = 'tags',\r\n  counter = 'counter',\r\n  lock = 'lock',\r\n  reset = 'reset',\r\n  moreoptions = 'moreoptions',\r\n  icon = 'icon',\r\n}",
      "docstring": "",
      "path": "src/components/np-input/models/np-input.enum.ts"
    },
    "src/components/np-input/models/np-input-zoom.model.ts::InputZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-input/models/np-input-zoom.model.ts"
    },
    "src/components/np-input-group/models/np-input-group.model.ts::InputGroupZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-input-group/models/np-input-group.model.ts"
    },
    "src/components/np-input-mask/models/np-input-mask.interface.ts::MaskIdentifierModel": {
      "declaration": "export interface MaskIdentifierModel {\r\n  number?: string;\r\n  letter?: string;\r\n  all?: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-input-mask/models/np-input-mask.interface.ts"
    },
    "src/components/np-input-selector/models/np-input-selector.model.ts::InputSelectorZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-input-selector/models/np-input-selector.model.ts"
    },
    "src/components/np-select-box/models/np-select-box.enum.ts::SelectBoxDisplay": {
      "declaration": "export enum SelectBoxDisplay {\r\n  Comma = 'comma',\r\n  Chip = 'chip',\r\n}",
      "docstring": "",
      "path": "src/components/np-select-box/models/np-select-box.enum.ts"
    },
    "src/components/np-select-box/models/np-select-box.enum.ts::SelectBoxType": {
      "declaration": "export enum SelectBoxType {\r\n  Color = 'color',\r\n  Icon = 'icon',\r\n  Img = 'img',\r\n  Label = 'label',\r\n}",
      "docstring": "",
      "path": "src/components/np-select-box/models/np-select-box.enum.ts"
    },
    "src/components/np-input-spinner/models/np-input-spinner.enum.ts::Autocomplete": {
      "declaration": "export enum Autocomplete {\r\n  On = 'on',\r\n  Off = 'off',\r\n}",
      "docstring": "",
      "path": "src/components/np-input-spinner/models/np-input-spinner.enum.ts"
    },
    "src/components/np-input-spinner/models/np-input-spinner.enum.ts::ButtonLayout": {
      "declaration": "export enum ButtonLayout {\r\n  Stacked = 'stacked',\r\n  Horizontal = 'horizontal',\r\n  Vertical = 'vertical',\r\n  Pos = 'pos',\r\n}",
      "docstring": "",
      "path": "src/components/np-input-spinner/models/np-input-spinner.enum.ts"
    },
    "src/components/np-input-spinner/models/np-input-spinner.enum.ts::ThousandsSeparator": {
      "declaration": "export enum ThousandsSeparator {\r\n  COMMA = ',',\r\n  PERIOD = '.',\r\n  SPACE = ' ',\r\n  APOSTROPHE = \"'\",\r\n}",
      "docstring": "",
      "path": "src/components/np-input-spinner/models/np-input-spinner.enum.ts"
    },
    "src/components/np-input-spinner/models/np-input-spinner.model.ts::InputSpinnerZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-input-spinner/models/np-input-spinner.model.ts"
    },
    "src/components/np-input-time-spinner/models/np-input-time-spinner.zoom.ts::InputTimeSpinnerZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-input-time-spinner/models/np-input-time-spinner.zoom.ts"
    },
    "src/components/np-keyboard/np-keyboard.class.ts::KeyboardModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-keyboard/np-keyboard.class.ts"
    },
    "src/components/np-keyboard/np-keyboard.class.ts::KeyboardConfigurationModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-keyboard/np-keyboard.class.ts"
    },
    "src/components/np-keyboard/models/np-keyboard.model.ts::KeyboardZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-keyboard/models/np-keyboard.model.ts"
    },
    "src/components/np-list-item/models/np-list-item.model.ts::ListItemModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-list-item/models/np-list-item.model.ts"
    },
    "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateTranslations": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-list-template/models/np-list-template.model.ts"
    },
    "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateConfigs": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-list-template/models/np-list-template.model.ts"
    },
    "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateFilterConfigs": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-list-template/models/np-list-template.model.ts"
    },
    "src/components/np-list-template/models/np-list-template.model.ts::ListTemplateStyles": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-list-template/models/np-list-template.model.ts"
    },
    "src/components/np-loader/models/np-loader.model.ts::LoaderZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-loader/models/np-loader.model.ts"
    },
    "src/components/np-menu-bar/models/np-menu-bar.model.ts::MenuCategory": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-menu-bar/models/np-menu-bar.model.ts"
    },
    "src/components/np-menu-bar/models/np-menu-bar.model.ts::MenuBarStyle": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-menu-bar/models/np-menu-bar.model.ts"
    },
    "src/components/np-menu-bar/models/np-menu-bar.model.ts::SubmenusStyle": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-menu-bar/models/np-menu-bar.model.ts"
    },
    "src/components/np-menu-bar/models/np-menu-bar.model.ts::MenuBarZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-menu-bar/models/np-menu-bar.model.ts"
    },
    "src/components/np-menu-bar/models/np-menu-bar.model.ts::Item": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-menu-bar/models/np-menu-bar.model.ts"
    },
    "src/components/np-popup/models/np-resizable-draggable.interface.ts::ResizableEvent": {
      "declaration": "export interface ResizableEvent {\r\n  width: number;\r\n  height: number;\r\n  event?: MouseEvent | Touch;\r\n  direction?: 'horizontal' | 'vertical';\r\n}",
      "docstring": "",
      "path": "src/components/np-popup/models/np-resizable-draggable.interface.ts"
    },
    "src/components/np-primary-tree/models/np-primary-tree.enum.ts::SelectionPrimaryTreeModel": {
      "declaration": "export enum SelectionPrimaryTreeModel {\r\n  single = 'single',\r\n  multiple = 'multiple',\r\n  checkbox = 'checkbox',\r\n}",
      "docstring": "",
      "path": "src/components/np-primary-tree/models/np-primary-tree.enum.ts"
    },
    "src/components/np-primary-tree/models/np-primary-tree.enum.ts::LayoutModel": {
      "declaration": "export enum LayoutModel {\r\n  vertical = 'vertical',\r\n  horizontal = 'horizontal',\r\n}",
      "docstring": "",
      "path": "src/components/np-primary-tree/models/np-primary-tree.enum.ts"
    },
    "src/components/np-primary-tree/models/np-navigation-icon.model.ts::NavigationIconsModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-primary-tree/models/np-navigation-icon.model.ts"
    },
    "src/components/np-primary-tree/models/np-primary-tree-zoom.model.ts::PrimaryTreeZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-primary-tree/models/np-primary-tree-zoom.model.ts"
    },
    "src/components/np-progress-stepper/models/progress-stepper.model.ts::ProgressStepper": {
      "declaration": "export interface ProgressStepper {\r\n  step: number;\r\n  steps: number;\r\n  header?: string;\r\n  footer?: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-progress-stepper/models/progress-stepper.model.ts"
    },
    "src/components/np-progress-stepper/models/progress-type.model.ts::ProgressType": {
      "declaration": "Step = 'step'",
      "docstring": "",
      "path": "src/components/np-progress-stepper/models/progress-type.model.ts"
    },
    "src/components/np-radio-button/models/np-radio-button-zoom.model.ts::RadioButtonZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-radio-button/models/np-radio-button-zoom.model.ts"
    },
    "src/components/np-select-box/models/np-select-box.model.ts::SelectBoxZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-select-box/models/np-select-box.model.ts"
    },
    "src/components/np-selector/models/np-selector.enum.ts::SelectorSelectionMode": {
      "declaration": "export enum SelectorSelectionMode {\r\n  Single = 'single',\r\n  Multiple = 'multiple',\r\n  Toggle = 'toggle',\r\n}",
      "docstring": "Enumerable with Selector Selection Modes",
      "path": "src/components/np-selector/models/np-selector.enum.ts"
    },
    "src/components/np-selector/models/np-selector.model.ts::SelectorModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-selector/models/np-selector.model.ts"
    },
    "src/components/np-selector/models/np-selector.enum.ts::SelectorSize": {
      "declaration": "export enum SelectorSize {\r\n  Small = 'small',\r\n  Regular = 'regular',\r\n  Medium = 'medium',\r\n  Large = 'large',\r\n}",
      "docstring": "Enumerable with the Selector Tabs Sizes",
      "path": "src/components/np-selector/models/np-selector.enum.ts"
    },
    "src/components/np-selector/models/np-selector.enum.ts::SelectorStyle": {
      "declaration": "export enum SelectorStyle {\r\n  Landscape = 'landscape',\r\n  Portrait = 'portrait',\r\n}",
      "docstring": "Enumerable with the Selector Styles",
      "path": "src/components/np-selector/models/np-selector.enum.ts"
    },
    "src/components/np-selector/models/np-selector.enum.ts::SelectorType": {
      "declaration": "export enum SelectorType {\r\n  Text = 'text',\r\n  Icon = 'icon',\r\n  Image = 'image',\r\n  Number = 'number',\r\n}",
      "docstring": "Enumerable with the Selector Types",
      "path": "src/components/np-selector/models/np-selector.enum.ts"
    },
    "src/components/np-selector/models/np-selector.model.ts::SelectorZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-selector/models/np-selector.model.ts"
    },
    "src/components/np-side-tab/models/np-side-tab.enum.ts::SelectionModeSideTab": {
      "declaration": "export enum SelectionModeSideTab {\r\n  Single = 'single',\r\n  Multiple = 'multiple',\r\n  Toggle = 'toggle',\r\n}",
      "docstring": "",
      "path": "src/components/np-side-tab/models/np-side-tab.enum.ts"
    },
    "src/components/np-side-tab/models/np-side-tab.model.ts::SideTabModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-side-tab/models/np-side-tab.model.ts"
    },
    "src/components/np-side-tab/models/np-side-tab.enum.ts::SizeSideTab": {
      "declaration": "export enum SizeSideTab {\r\n  Small = 'small',\r\n  Regular = 'regular',\r\n  Medium = 'medium',\r\n  Large = 'large',\r\n}",
      "docstring": "",
      "path": "src/components/np-side-tab/models/np-side-tab.enum.ts"
    },
    "src/components/np-side-tab/models/np-side-tab.model.ts::SideTabZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-side-tab/models/np-side-tab.model.ts"
    },
    "src/components/np-side-view/models/np-side-view.model.ts::SideViewZoomConfigs": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-side-view/models/np-side-view.model.ts"
    },
    "src/components/np-side-view/models/np-side-view.interface.ts::SideViewModel": {
      "declaration": "export interface SideViewModel {\r\n  code: number;\r\n  label: string;\r\n  description?: string;\r\n  color?: string;\r\n  icon?: string;\r\n  iconRaw?: string;\r\n  disabled?: boolean;\r\n  rendered?: boolean;\r\n  selection?: 'normal' | 'dark' | 'light';\r\n  dataQaAction?: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-side-view/models/np-side-view.interface.ts"
    },
    "src/components/models/orientation.enum.ts::Orientation": {
      "declaration": "export enum Orientation {\r\n  Horizontal = 'horizontal',\r\n  Vertical = 'vertical',\r\n}",
      "docstring": "",
      "path": "src/components/models/orientation.enum.ts"
    },
    "src/components/np-slider/models/np-slider.model.ts::SliderStyle": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-slider/models/np-slider.model.ts"
    },
    "src/components/np-split/models/np-split.interface.ts::gutterStateInterface": {
      "declaration": "export interface gutterStateInterface {\r\n  /** The direction of the arrow associated with the gutter */\r\n  arrowDirection: SplitAreaArrowDirection;\r\n  /** The index of the gutter. */\r\n  gutterIndex: number;\r\n  /** Indicates if the gutter is collapsable */\r\n  collapsable: boolean;\r\n  /** Indicates if the gutter is currently collapsed */\r\n  collapsed?: boolean;\r\n  /** Indicates if the collapsable area index is set */\r\n  collapsableAreaIndex?: boolean;\r\n  /** The actions associated with the gutter */\r\n  actions?: Array<actionsModel>;\r\n}",
      "docstring": "Represents the state model for a gutter.",
      "path": "src/components/np-split/models/np-split.interface.ts"
    },
    "src/components/np-split/models/np-split.enum.ts::SplitAreaUnit": {
      "declaration": "export enum SplitAreaUnit {\r\n  Percent = 'percent',\r\n  Pixel = 'pixel',\r\n}",
      "docstring": "",
      "path": "src/components/np-split/models/np-split.enum.ts"
    },
    "src/components/np-split/models/np-split.enum.ts::SplitAreaDirection": {
      "declaration": "export enum SplitAreaDirection {\r\n  Ltr = 'ltr',\r\n  Rtl = 'rtl',\r\n}",
      "docstring": "",
      "path": "src/components/np-split/models/np-split.enum.ts"
    },
    "src/components/np-split/models/np-split.interface.ts::IArea": {
      "declaration": "export interface IArea {\r\n  component: HTMLNpSplitAreaElement | HTMLElement | SplitElementAreaDirective;\r\n  order: number;\r\n  size: number;\r\n  minSize: number;\r\n  maxSize: number;\r\n}",
      "docstring": "",
      "path": "src/components/np-split/models/np-split.interface.ts"
    },
    "src/components/np-split/models/np-split.interface.ts::IOutputAreaSizes": {
      "declaration": "export interface IOutputAreaSizes extends Array<number> {}",
      "docstring": "",
      "path": "src/components/np-split/models/np-split.interface.ts"
    },
    "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateCardItem": {
      "declaration": "export interface StateCardItem {\r\n  active: number;\r\n  dots: number;\r\n  number: string;\r\n  stateId?: string;\r\n  alert?: boolean;\r\n  label?: string;\r\n  time?: number;\r\n}",
      "docstring": "",
      "path": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts"
    },
    "src/components/np-state-card-item/models/np-state-card-item.inteface.ts::StateOptionsModel": {
      "declaration": "export interface StateOptionsModel {\r\n  id: number;\r\n  iconcolor?: Color;\r\n  iconName?: string;\r\n  hasHeaderCircles?: boolean;\r\n  borderColor?: string;\r\n  borderWidth?: number;\r\n  codeColor?: Color;\r\n}",
      "docstring": "",
      "path": "src/components/np-state-card-item/models/np-state-card-item.inteface.ts"
    },
    "src/components/np-state-card-item/models/np-state-card-item.model.ts::StateCardItemZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-state-card-item/models/np-state-card-item.model.ts"
    },
    "src/components/np-stepper/models/np-stepper.model.ts::StepperModel": {
      "declaration": "export interface StepperModel {\r\n    /**Set option label */\r\n    label: string;\r\n    /**Set option icon */\r\n    icon?: string;\r\n    /**Set if option is disabled  */\r\n    disabled?: boolean;\r\n    /**Set if option is disabled  */\r\n    color?: boolean;\r\n}",
      "docstring": "",
      "path": "src/components/np-stepper/models/np-stepper.model.ts"
    },
    "src/components/np-stepper/models/np-stepper-zoom.model.ts::StepperZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-stepper/models/np-stepper-zoom.model.ts"
    },
    "src/components/np-stepper-bar-item/models/np-stepper-bar-item-model.ts::StepperBarItemZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-stepper-bar-item/models/np-stepper-bar-item-model.ts"
    },
    "src/components/np-stepper-bar-item/models/np-stepper-bar-item.interface.ts::StepperbarItem": {
      "declaration": "export interface StepperbarItem {\r\n  label?: string;\r\n  disabled?: boolean;\r\n  iconImg?: string;\r\n  number?: string;\r\n  labelPlacement?: string;\r\n  bgColor?: string;\r\n}",
      "docstring": "",
      "path": "src/components/np-stepper-bar-item/models/np-stepper-bar-item.interface.ts"
    },
    "src/components/np-switch/models/np-switch.enum.ts::SwitchEnum": {
      "declaration": "export enum SwitchEnum {\r\n  Action = 'action',\r\n  Xsmall = 'xsmall',\r\n  Small = 'small',\r\n  Regular = 'regular',\r\n  Medium = 'medium',\r\n  Large = 'large',\r\n  Xlarge = 'xlarge',\r\n}",
      "docstring": "",
      "path": "src/components/np-switch/models/np-switch.enum.ts"
    },
    "src/components/np-switch/models/np-switch.model.ts::SwitchZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-switch/models/np-switch.model.ts"
    },
    "src/components/np-tabview/models/np-tabview.model.ts::TabviewZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tabview/models/np-tabview.model.ts"
    },
    "src/components/np-tabview/np-tab-panel/models/np-tab-panel.enum.ts::TabPanelColorState": {
      "declaration": "export enum TabPanelColorState {\r\n  Info = 'info',\r\n  Success = 'success',\r\n  warning = 'warning',\r\n  Error = 'error',\r\n  Secondary = 'secondary',\r\n  Primary = 'primary',\r\n  Scale = 'scale',\r\n}",
      "docstring": "",
      "path": "src/components/np-tabview/np-tab-panel/models/np-tab-panel.enum.ts"
    },
    "src/components/np-tabview/models/np-tabview.model.ts::TabViewModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tabview/models/np-tabview.model.ts"
    },
    "src/components/np-text/models/np-text-trimmer.model.ts::NpTextTrimmer": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-text/models/np-text-trimmer.model.ts"
    },
    "src/components/np-textarea/models/np-textarea-zoom.model.ts::TextAreaZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-textarea/models/np-textarea-zoom.model.ts"
    },
    "src/components/np-textarea-chips/models/np-textarea-chips.model.ts::TextareaChipsOptions": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-textarea-chips/models/np-textarea-chips.model.ts"
    },
    "src/components/np-textarea-chips/models/np-textarea-chips.model.ts::TextareaChipsKeys": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-textarea-chips/models/np-textarea-chips.model.ts"
    },
    "src/components/np-tip/models/np-tip-zoom.model.ts::TipZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tip/models/np-tip-zoom.model.ts"
    },
    "src/components/np-toast-message/models/np-toast-message.model.ts::ToastMessageModel": {
      "declaration": "export interface ToastMessageModel {\r\n  title: string;\r\n  description: string;\r\n  timeout: number;\r\n  position: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n}",
      "docstring": "",
      "path": "src/components/np-toast-message/models/np-toast-message.model.ts"
    },
    "src/components/np-tool-tip/models/np-tool-tip.model.ts::ToolTipZoomPercentageConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tool-tip/models/np-tool-tip.model.ts"
    },
    "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::TreeCardListConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts"
    },
    "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::Translations": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts"
    },
    "src/components/np-tree-card-grid/models/np-tree-card-grid.interface.ts::BreadcrumbModel": {
      "declaration": "export interface BreadcrumbModel {\r\n  level: number;\r\n  breadCrumbLabel: string;\r\n  breadCrumbIcon: string;\r\n  selected: boolean;\r\n}",
      "docstring": "",
      "path": "src/components/np-tree-card-grid/models/np-tree-card-grid.interface.ts"
    },
    "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::NoResultsConfigModel": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts"
    },
    "src/components/np-tree-card-grid/models/np-tree-card-grid.enum.ts::TreeCardGridSelectionMode": {
      "declaration": "export enum TreeCardGridSelectionMode {\r\n  Single = 'single',\r\n  Multiple = 'multiple',\r\n  Toggle = 'toggle',\r\n  MultipleKeepSelection = 'multipleKeepSelection',\r\n}",
      "docstring": "",
      "path": "src/components/np-tree-card-grid/models/np-tree-card-grid.enum.ts"
    },
    "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::ButtonConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts"
    },
    "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts::TreeCardGridZoomConfig": {
      "declaration": "any",
      "docstring": "",
      "path": "src/components/np-tree-card-grid/models/np-tree-card-grid.model.ts"
    }
  }
}